
Block#1
    Stmt_Class
        name: LITERAL('TCPDF_STATIC')
        stmts: Block#2
    Terminal_Return

Block#2
    Stmt_Property
        declaredType: mixed
        name: LITERAL('tcpdf_version')
        defaultVar: LITERAL('6.0.099')
        defaultBlock: Block#3
    Stmt_Property
        declaredType: mixed
        name: LITERAL('alias_tot_pages')
        defaultVar: LITERAL('{:ptp:}')
        defaultBlock: Block#4
    Stmt_Property
        declaredType: mixed
        name: LITERAL('alias_num_page')
        defaultVar: LITERAL('{:pnp:}')
        defaultBlock: Block#5
    Stmt_Property
        declaredType: mixed
        name: LITERAL('alias_group_tot_pages')
        defaultVar: LITERAL('{:ptg:}')
        defaultBlock: Block#6
    Stmt_Property
        declaredType: mixed
        name: LITERAL('alias_group_num_page')
        defaultVar: LITERAL('{:png:}')
        defaultBlock: Block#7
    Stmt_Property
        declaredType: mixed
        name: LITERAL('alias_right_shift')
        defaultVar: LITERAL('{rsc:')
        defaultBlock: Block#8
    Stmt_Property
        declaredType: mixed
        name: LITERAL('enc_padding')
        defaultVar: LITERAL('(¿N^NuŠAd' . "\0" . 'NVÿú..' . "\0" . '¶Ðh>€/©þdSiz')
        defaultBlock: Block#9
    Stmt_Property
        declaredType: mixed
        name: LITERAL('byterange_string')
        defaultVar: LITERAL('/ByteRange[0 ********** ********** **********]')
        defaultBlock: Block#10
    Stmt_Property
        declaredType: mixed
        name: LITERAL('pageboxes')
        defaultVar: Var#1
        defaultBlock: Block#11
    Stmt_ClassMethod<getTCPDFVersion>
    Stmt_ClassMethod<getTCPDFProducer>
    Stmt_ClassMethod<set_mqr>
    Stmt_ClassMethod<get_mqr>
    Stmt_ClassMethod<getPageSizeFromFormat>
    Stmt_ClassMethod<setPageBoxes>
    Stmt_ClassMethod<swapPageBoxCoordinates>
    Stmt_ClassMethod<getPageLayoutMode>
    Stmt_ClassMethod<getPageMode>
    Stmt_ClassMethod<isValidURL>
    Stmt_ClassMethod<removeSHY>
    Stmt_ClassMethod<getBorderMode>
    Stmt_ClassMethod<empty_string>
    Stmt_ClassMethod<getObjFilename>
    Stmt_ClassMethod<_escape>
    Stmt_ClassMethod<_escapeXML>
    Stmt_ClassMethod<objclone>
    Stmt_ClassMethod<sendOutputData>
    Stmt_ClassMethod<replacePageNumAliases>
    Stmt_ClassMethod<getTimestamp>
    Stmt_ClassMethod<getFormattedDate>
    Stmt_ClassMethod<_getULONG>
    Stmt_ClassMethod<_getUSHORT>
    Stmt_ClassMethod<_getSHORT>
    Stmt_ClassMethod<_getFWORD>
    Stmt_ClassMethod<_getUFWORD>
    Stmt_ClassMethod<_getFIXED>
    Stmt_ClassMethod<_getBYTE>
    Stmt_ClassMethod<rfread>
    Stmt_ClassMethod<_freadint>
    Stmt_ClassMethod<getRandomSeed>
    Stmt_ClassMethod<_md5_16>
    Stmt_ClassMethod<_AES>
    Stmt_ClassMethod<_RC4>
    Stmt_ClassMethod<getUserPermissionCode>
    Stmt_ClassMethod<convertHexStringToString>
    Stmt_ClassMethod<convertStringToHexString>
    Stmt_ClassMethod<getEncPermissionsString>
    Stmt_ClassMethod<encodeNameObject>
    Stmt_ClassMethod<getAnnotOptFromJSProp>
    Stmt_ClassMethod<formatPageNumber>
    Stmt_ClassMethod<formatTOCPageNumber>
    Stmt_ClassMethod<extractCSSproperties>
    Stmt_ClassMethod<fixHTMLCode>
    Stmt_ClassMethod<isValidCSSSelectorForTag>
    Stmt_ClassMethod<getCSSdataArray>
    Stmt_ClassMethod<getTagStyleFromCSSarray>
    Stmt_ClassMethod<intToRoman>
    Stmt_ClassMethod<revstrpos>
    Stmt_ClassMethod<serializeTCPDFtagParameters>
    Stmt_ClassMethod<unserializeTCPDFtagParameters>
    Stmt_ClassMethod<getHyphenPatternsFromTEX>
    Stmt_ClassMethod<getPathPaintOperator>
    Stmt_ClassMethod<getTransformationMatrixProduct>
    Stmt_ClassMethod<getSVGTransformMatrix>
    Stmt_ClassMethod<getVectorsAngle>
    Stmt_ClassMethod<pregSplit>
    Stmt_ClassMethod<fileGetContents>

Block#3

Block#4

Block#5

Block#6

Block#7

Block#8

Block#9

Block#10

Block#11
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        keys[3]: NULL
        keys[4]: NULL
        values[0]: LITERAL('MediaBox')
        values[1]: LITERAL('CropBox')
        values[2]: LITERAL('BleedBox')
        values[3]: LITERAL('TrimBox')
        values[4]: LITERAL('ArtBox')
        result: Var#1

Function TCPDF_STATIC::getTCPDFVersion(): mixed
Block#1
    Expr_StaticPropertyFetch
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('tcpdf_version')
        result: Var#1
    Terminal_Return
        expr: Var#1

Function TCPDF_STATIC::getTCPDFProducer(): mixed
Block#1
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('getTCPDFVersion')
        result: Var#1
    Expr_BinaryOp_Concat
        left: LITERAL('TCPDF ')
        right: Var#1
        result: Var#2
    Expr_BinaryOp_Concat
        left: Var#2
        right: LITERAL(' (http://www.tcpdf.org)')
        result: Var#3
    Terminal_Return
        expr: Var#3

Function TCPDF_STATIC::set_mqr(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('mqr')
        result: Var#1<$mqr>
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('PHP_VERSION_ID')
        result: Var#2
    Expr_BooleanNot
        expr: Var#2
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION')
        result: Var#4
    Expr_Assign
        var: Var#5<$version>
        expr: Var#4
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#5<$version>
        dim: LITERAL(0)
        result: Var#7
    Expr_BinaryOp_Mul
        left: Var#7
        right: LITERAL(10000)
        result: Var#8
    Expr_ArrayDimFetch
        var: Var#5<$version>
        dim: LITERAL(2)
        result: Var#9
    Expr_BinaryOp_Mul
        left: Var#9
        right: LITERAL(100)
        result: Var#10
    Expr_BinaryOp_Plus
        left: Var#8
        right: Var#10
        result: Var#11
    Expr_ArrayDimFetch
        var: Var#5<$version>
        dim: LITERAL(4)
        result: Var#12
    Expr_BinaryOp_Plus
        left: Var#11
        right: Var#12
        result: Var#13
    Expr_FuncCall
        name: LITERAL('define')
        args[0]: LITERAL('PHP_VERSION_ID')
        args[1]: Var#13
        result: Var#14
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#15<$mqr> = Phi(Var#1<$mqr>)
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION_ID')
        result: Var#16
    Expr_BinaryOp_Smaller
        left: Var#16
        right: LITERAL(50300)
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Var#18<$mqr> = Phi(Var#15<$mqr>)
    Expr_FuncCall
        name: LITERAL('set_magic_quotes_runtime')
        args[0]: Var#18<$mqr>
        result: Var#19
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#9
    Parent: Block#6
    Terminal_Return

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#8

Function TCPDF_STATIC::get_mqr(): mixed
Block#1
    Expr_FuncCall
        name: LITERAL('defined')
        args[0]: LITERAL('PHP_VERSION_ID')
        result: Var#1
    Expr_BooleanNot
        expr: Var#1
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION')
        result: Var#3
    Expr_Assign
        var: Var#4<$version>
        expr: Var#3
        result: Var#5
    Expr_ArrayDimFetch
        var: Var#4<$version>
        dim: LITERAL(0)
        result: Var#6
    Expr_BinaryOp_Mul
        left: Var#6
        right: LITERAL(10000)
        result: Var#7
    Expr_ArrayDimFetch
        var: Var#4<$version>
        dim: LITERAL(2)
        result: Var#8
    Expr_BinaryOp_Mul
        left: Var#8
        right: LITERAL(100)
        result: Var#9
    Expr_BinaryOp_Plus
        left: Var#7
        right: Var#9
        result: Var#10
    Expr_ArrayDimFetch
        var: Var#4<$version>
        dim: LITERAL(4)
        result: Var#11
    Expr_BinaryOp_Plus
        left: Var#10
        right: Var#11
        result: Var#12
    Expr_FuncCall
        name: LITERAL('define')
        args[0]: LITERAL('PHP_VERSION_ID')
        args[1]: Var#12
        result: Var#13
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Expr_ConstFetch
        name: LITERAL('PHP_VERSION_ID')
        result: Var#14
    Expr_BinaryOp_Smaller
        left: Var#14
        right: LITERAL(50300)
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Expr_FuncCall
        name: LITERAL('get_magic_quotes_runtime')
        result: Var#16
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#6
    Terminal_Return
        expr: LITERAL(0)

Block#9
    Parent: Block#7
    Terminal_Return
        expr: Var#16

Function TCPDF_STATIC::getPageSizeFromFormat(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('format')
        result: Var#1<$format>
    Expr_FuncCall
        name: LITERAL('strtoupper')
        args[0]: Var#1<$format>
        result: Var#2
    Stmt_Switch
        cond: Var#2
        cases[0]: LITERAL('A0')
        cases[1]: LITERAL('A1')
        cases[2]: LITERAL('A2')
        cases[3]: LITERAL('A3')
        cases[4]: LITERAL('A4')
        cases[5]: LITERAL('A5')
        cases[6]: LITERAL('A6')
        cases[7]: LITERAL('A7')
        cases[8]: LITERAL('A8')
        cases[9]: LITERAL('A9')
        cases[10]: LITERAL('A10')
        cases[11]: LITERAL('A11')
        cases[12]: LITERAL('A12')
        cases[13]: LITERAL('B0')
        cases[14]: LITERAL('B1')
        cases[15]: LITERAL('B2')
        cases[16]: LITERAL('B3')
        cases[17]: LITERAL('B4')
        cases[18]: LITERAL('B5')
        cases[19]: LITERAL('B6')
        cases[20]: LITERAL('B7')
        cases[21]: LITERAL('B8')
        cases[22]: LITERAL('B9')
        cases[23]: LITERAL('B10')
        cases[24]: LITERAL('B11')
        cases[25]: LITERAL('B12')
        cases[26]: LITERAL('C0')
        cases[27]: LITERAL('C1')
        cases[28]: LITERAL('C2')
        cases[29]: LITERAL('C3')
        cases[30]: LITERAL('C4')
        cases[31]: LITERAL('C5')
        cases[32]: LITERAL('C6')
        cases[33]: LITERAL('C7')
        cases[34]: LITERAL('C8')
        cases[35]: LITERAL('C9')
        cases[36]: LITERAL('C10')
        cases[37]: LITERAL('C11')
        cases[38]: LITERAL('C12')
        cases[39]: LITERAL('C76')
        cases[40]: LITERAL('DL')
        cases[41]: LITERAL('E0')
        cases[42]: LITERAL('E1')
        cases[43]: LITERAL('E2')
        cases[44]: LITERAL('E3')
        cases[45]: LITERAL('E4')
        cases[46]: LITERAL('E5')
        cases[47]: LITERAL('E6')
        cases[48]: LITERAL('E7')
        cases[49]: LITERAL('E8')
        cases[50]: LITERAL('E9')
        cases[51]: LITERAL('E10')
        cases[52]: LITERAL('E11')
        cases[53]: LITERAL('E12')
        cases[54]: LITERAL('G0')
        cases[55]: LITERAL('G1')
        cases[56]: LITERAL('G2')
        cases[57]: LITERAL('G3')
        cases[58]: LITERAL('G4')
        cases[59]: LITERAL('G5')
        cases[60]: LITERAL('G6')
        cases[61]: LITERAL('G7')
        cases[62]: LITERAL('G8')
        cases[63]: LITERAL('G9')
        cases[64]: LITERAL('G10')
        cases[65]: LITERAL('G11')
        cases[66]: LITERAL('G12')
        cases[67]: LITERAL('RA0')
        cases[68]: LITERAL('RA1')
        cases[69]: LITERAL('RA2')
        cases[70]: LITERAL('RA3')
        cases[71]: LITERAL('RA4')
        cases[72]: LITERAL('SRA0')
        cases[73]: LITERAL('SRA1')
        cases[74]: LITERAL('SRA2')
        cases[75]: LITERAL('SRA3')
        cases[76]: LITERAL('SRA4')
        cases[77]: LITERAL('4A0')
        cases[78]: LITERAL('2A0')
        cases[79]: LITERAL('A2_EXTRA')
        cases[80]: LITERAL('A3+')
        cases[81]: LITERAL('A3_EXTRA')
        cases[82]: LITERAL('A3_SUPER')
        cases[83]: LITERAL('SUPER_A3')
        cases[84]: LITERAL('A4_EXTRA')
        cases[85]: LITERAL('A4_SUPER')
        cases[86]: LITERAL('SUPER_A4')
        cases[87]: LITERAL('A4_LONG')
        cases[88]: LITERAL('F4')
        cases[89]: LITERAL('SO_B5_EXTRA')
        cases[90]: LITERAL('A5_EXTRA')
        cases[91]: LITERAL('ANSI_E')
        cases[92]: LITERAL('ANSI_D')
        cases[93]: LITERAL('ANSI_C')
        cases[94]: LITERAL('ANSI_B')
        cases[95]: LITERAL('ANSI_A')
        cases[96]: LITERAL('USLEDGER')
        cases[97]: LITERAL('LEDGER')
        cases[98]: LITERAL('ORGANIZERK')
        cases[99]: LITERAL('BIBLE')
        cases[100]: LITERAL('USTABLOID')
        cases[101]: LITERAL('TABLOID')
        cases[102]: LITERAL('ORGANIZERM')
        cases[103]: LITERAL('USLETTER')
        cases[104]: LITERAL('LETTER')
        cases[105]: LITERAL('USLEGAL')
        cases[106]: LITERAL('LEGAL')
        cases[107]: LITERAL('GOVERNMENTLETTER')
        cases[108]: LITERAL('GLETTER')
        cases[109]: LITERAL('JUNIORLEGAL')
        cases[110]: LITERAL('JLEGAL')
        cases[111]: LITERAL('QUADDEMY')
        cases[112]: LITERAL('SUPER_B')
        cases[113]: LITERAL('QUARTO')
        cases[114]: LITERAL('GOVERNMENTLEGAL')
        cases[115]: LITERAL('FOLIO')
        cases[116]: LITERAL('MONARCH')
        cases[117]: LITERAL('EXECUTIVE')
        cases[118]: LITERAL('ORGANIZERL')
        cases[119]: LITERAL('STATEMENT')
        cases[120]: LITERAL('MEMO')
        cases[121]: LITERAL('FOOLSCAP')
        cases[122]: LITERAL('COMPACT')
        cases[123]: LITERAL('ORGANIZERJ')
        cases[124]: LITERAL('P1')
        cases[125]: LITERAL('P2')
        cases[126]: LITERAL('P3')
        cases[127]: LITERAL('P4')
        cases[128]: LITERAL('P5')
        cases[129]: LITERAL('P6')
        cases[130]: LITERAL('ARCH_E')
        cases[131]: LITERAL('ARCH_E1')
        cases[132]: LITERAL('ARCH_D')
        cases[133]: LITERAL('BROADSHEET')
        cases[134]: LITERAL('ARCH_C')
        cases[135]: LITERAL('ARCH_B')
        cases[136]: LITERAL('ARCH_A')
        cases[137]: LITERAL('ANNENV_A2')
        cases[138]: LITERAL('ANNENV_A6')
        cases[139]: LITERAL('ANNENV_A7')
        cases[140]: LITERAL('ANNENV_A8')
        cases[141]: LITERAL('ANNENV_A10')
        cases[142]: LITERAL('ANNENV_SLIM')
        cases[143]: LITERAL('COMMENV_N6_1/4')
        cases[144]: LITERAL('COMMENV_N6_3/4')
        cases[145]: LITERAL('COMMENV_N8')
        cases[146]: LITERAL('COMMENV_N9')
        cases[147]: LITERAL('COMMENV_N10')
        cases[148]: LITERAL('COMMENV_N11')
        cases[149]: LITERAL('COMMENV_N12')
        cases[150]: LITERAL('COMMENV_N14')
        cases[151]: LITERAL('CATENV_N1')
        cases[152]: LITERAL('CATENV_N1_3/4')
        cases[153]: LITERAL('CATENV_N2')
        cases[154]: LITERAL('CATENV_N3')
        cases[155]: LITERAL('CATENV_N6')
        cases[156]: LITERAL('CATENV_N7')
        cases[157]: LITERAL('CATENV_N8')
        cases[158]: LITERAL('CATENV_N9_1/2')
        cases[159]: LITERAL('CATENV_N9_3/4')
        cases[160]: LITERAL('CATENV_N10_1/2')
        cases[161]: LITERAL('CATENV_N12_1/2')
        cases[162]: LITERAL('CATENV_N13_1/2')
        cases[163]: LITERAL('CATENV_N14_1/4')
        cases[164]: LITERAL('CATENV_N14_1/2')
        cases[165]: LITERAL('JIS_B0')
        cases[166]: LITERAL('JIS_B1')
        cases[167]: LITERAL('JIS_B2')
        cases[168]: LITERAL('JIS_B3')
        cases[169]: LITERAL('JIS_B4')
        cases[170]: LITERAL('JIS_B5')
        cases[171]: LITERAL('JIS_B6')
        cases[172]: LITERAL('JIS_B7')
        cases[173]: LITERAL('JIS_B8')
        cases[174]: LITERAL('JIS_B9')
        cases[175]: LITERAL('JIS_B10')
        cases[176]: LITERAL('JIS_B11')
        cases[177]: LITERAL('JIS_B12')
        cases[178]: LITERAL('PA0')
        cases[179]: LITERAL('PA1')
        cases[180]: LITERAL('PA2')
        cases[181]: LITERAL('PA3')
        cases[182]: LITERAL('PA4')
        cases[183]: LITERAL('PA5')
        cases[184]: LITERAL('PA6')
        cases[185]: LITERAL('PA7')
        cases[186]: LITERAL('PA8')
        cases[187]: LITERAL('PA9')
        cases[188]: LITERAL('PA10')
        cases[189]: LITERAL('PASSPORT_PHOTO')
        cases[190]: LITERAL('E')
        cases[191]: LITERAL('L')
        cases[192]: LITERAL('3R')
        cases[193]: LITERAL('KG')
        cases[194]: LITERAL('4R')
        cases[195]: LITERAL('4D')
        cases[196]: LITERAL('2L')
        cases[197]: LITERAL('5R')
        cases[198]: LITERAL('8P')
        cases[199]: LITERAL('6R')
        cases[200]: LITERAL('6P')
        cases[201]: LITERAL('8R')
        cases[202]: LITERAL('6PW')
        cases[203]: LITERAL('S8R')
        cases[204]: LITERAL('4P')
        cases[205]: LITERAL('10R')
        cases[206]: LITERAL('4PW')
        cases[207]: LITERAL('S10R')
        cases[208]: LITERAL('11R')
        cases[209]: LITERAL('S11R')
        cases[210]: LITERAL('12R')
        cases[211]: LITERAL('S12R')
        cases[212]: LITERAL('NEWSPAPER_BROADSHEET')
        cases[213]: LITERAL('NEWSPAPER_BERLINER')
        cases[214]: LITERAL('NEWSPAPER_TABLOID')
        cases[215]: LITERAL('NEWSPAPER_COMPACT')
        cases[216]: LITERAL('CREDIT_CARD')
        cases[217]: LITERAL('BUSINESS_CARD')
        cases[218]: LITERAL('BUSINESS_CARD_ISO7810')
        cases[219]: LITERAL('BUSINESS_CARD_ISO216')
        cases[220]: LITERAL('BUSINESS_CARD_IT')
        cases[221]: LITERAL('BUSINESS_CARD_UK')
        cases[222]: LITERAL('BUSINESS_CARD_FR')
        cases[223]: LITERAL('BUSINESS_CARD_DE')
        cases[224]: LITERAL('BUSINESS_CARD_ES')
        cases[225]: LITERAL('BUSINESS_CARD_CA')
        cases[226]: LITERAL('BUSINESS_CARD_US')
        cases[227]: LITERAL('BUSINESS_CARD_JP')
        cases[228]: LITERAL('BUSINESS_CARD_HK')
        cases[229]: LITERAL('BUSINESS_CARD_AU')
        cases[230]: LITERAL('BUSINESS_CARD_DK')
        cases[231]: LITERAL('BUSINESS_CARD_SE')
        cases[232]: LITERAL('BUSINESS_CARD_RU')
        cases[233]: LITERAL('BUSINESS_CARD_CZ')
        cases[234]: LITERAL('BUSINESS_CARD_FI')
        cases[235]: LITERAL('BUSINESS_CARD_HU')
        cases[236]: LITERAL('BUSINESS_CARD_IL')
        cases[237]: LITERAL('4SHEET')
        cases[238]: LITERAL('6SHEET')
        cases[239]: LITERAL('12SHEET')
        cases[240]: LITERAL('16SHEET')
        cases[241]: LITERAL('32SHEET')
        cases[242]: LITERAL('48SHEET')
        cases[243]: LITERAL('64SHEET')
        cases[244]: LITERAL('96SHEET')
        cases[245]: LITERAL('EN_EMPEROR')
        cases[246]: LITERAL('EN_ANTIQUARIAN')
        cases[247]: LITERAL('EN_GRAND_EAGLE')
        cases[248]: LITERAL('EN_DOUBLE_ELEPHANT')
        cases[249]: LITERAL('EN_ATLAS')
        cases[250]: LITERAL('EN_COLOMBIER')
        cases[251]: LITERAL('EN_ELEPHANT')
        cases[252]: LITERAL('EN_DOUBLE_DEMY')
        cases[253]: LITERAL('EN_IMPERIAL')
        cases[254]: LITERAL('EN_PRINCESS')
        cases[255]: LITERAL('EN_CARTRIDGE')
        cases[256]: LITERAL('EN_DOUBLE_LARGE_POST')
        cases[257]: LITERAL('EN_ROYAL')
        cases[258]: LITERAL('EN_SHEET')
        cases[259]: LITERAL('EN_HALF_POST')
        cases[260]: LITERAL('EN_SUPER_ROYAL')
        cases[261]: LITERAL('EN_DOUBLE_POST')
        cases[262]: LITERAL('EN_MEDIUM')
        cases[263]: LITERAL('EN_DEMY')
        cases[264]: LITERAL('EN_LARGE_POST')
        cases[265]: LITERAL('EN_COPY_DRAUGHT')
        cases[266]: LITERAL('EN_POST')
        cases[267]: LITERAL('EN_CROWN')
        cases[268]: LITERAL('EN_PINCHED_POST')
        cases[269]: LITERAL('EN_BRIEF')
        cases[270]: LITERAL('EN_FOOLSCAP')
        cases[271]: LITERAL('EN_SMALL_FOOLSCAP')
        cases[272]: LITERAL('EN_POTT')
        cases[273]: LITERAL('BE_GRAND_AIGLE')
        cases[274]: LITERAL('BE_COLOMBIER')
        cases[275]: LITERAL('BE_DOUBLE_CARRE')
        cases[276]: LITERAL('BE_ELEPHANT')
        cases[277]: LITERAL('BE_PETIT_AIGLE')
        cases[278]: LITERAL('BE_GRAND_JESUS')
        cases[279]: LITERAL('BE_JESUS')
        cases[280]: LITERAL('BE_RAISIN')
        cases[281]: LITERAL('BE_GRAND_MEDIAN')
        cases[282]: LITERAL('BE_DOUBLE_POSTE')
        cases[283]: LITERAL('BE_COQUILLE')
        cases[284]: LITERAL('BE_PETIT_MEDIAN')
        cases[285]: LITERAL('BE_RUCHE')
        cases[286]: LITERAL('BE_PROPATRIA')
        cases[287]: LITERAL('BE_LYS')
        cases[288]: LITERAL('BE_POT')
        cases[289]: LITERAL('BE_ROSETTE')
        cases[290]: LITERAL('FR_UNIVERS')
        cases[291]: LITERAL('FR_DOUBLE_COLOMBIER')
        cases[292]: LITERAL('FR_GRANDE_MONDE')
        cases[293]: LITERAL('FR_DOUBLE_SOLEIL')
        cases[294]: LITERAL('FR_DOUBLE_JESUS')
        cases[295]: LITERAL('FR_GRAND_AIGLE')
        cases[296]: LITERAL('FR_PETIT_AIGLE')
        cases[297]: LITERAL('FR_DOUBLE_RAISIN')
        cases[298]: LITERAL('FR_JOURNAL')
        cases[299]: LITERAL('FR_COLOMBIER_AFFICHE')
        cases[300]: LITERAL('FR_DOUBLE_CAVALIER')
        cases[301]: LITERAL('FR_CLOCHE')
        cases[302]: LITERAL('FR_SOLEIL')
        cases[303]: LITERAL('FR_DOUBLE_CARRE')
        cases[304]: LITERAL('FR_DOUBLE_COQUILLE')
        cases[305]: LITERAL('FR_JESUS')
        cases[306]: LITERAL('FR_RAISIN')
        cases[307]: LITERAL('FR_CAVALIER')
        cases[308]: LITERAL('FR_DOUBLE_COURONNE')
        cases[309]: LITERAL('FR_CARRE')
        cases[310]: LITERAL('FR_COQUILLE')
        cases[311]: LITERAL('FR_DOUBLE_TELLIERE')
        cases[312]: LITERAL('FR_DOUBLE_CLOCHE')
        cases[313]: LITERAL('FR_DOUBLE_POT')
        cases[314]: LITERAL('FR_ECU')
        cases[315]: LITERAL('FR_COURONNE')
        cases[316]: LITERAL('FR_TELLIERE')
        cases[317]: LITERAL('FR_POT')
        targets[0]: Block#2
        targets[1]: Block#3
        targets[2]: Block#4
        targets[3]: Block#5
        targets[4]: Block#6
        targets[5]: Block#7
        targets[6]: Block#8
        targets[7]: Block#9
        targets[8]: Block#10
        targets[9]: Block#11
        targets[10]: Block#12
        targets[11]: Block#13
        targets[12]: Block#14
        targets[13]: Block#15
        targets[14]: Block#16
        targets[15]: Block#17
        targets[16]: Block#18
        targets[17]: Block#19
        targets[18]: Block#20
        targets[19]: Block#21
        targets[20]: Block#22
        targets[21]: Block#23
        targets[22]: Block#24
        targets[23]: Block#25
        targets[24]: Block#26
        targets[25]: Block#27
        targets[26]: Block#28
        targets[27]: Block#29
        targets[28]: Block#30
        targets[29]: Block#31
        targets[30]: Block#32
        targets[31]: Block#33
        targets[32]: Block#34
        targets[33]: Block#35
        targets[34]: Block#36
        targets[35]: Block#37
        targets[36]: Block#38
        targets[37]: Block#39
        targets[38]: Block#40
        targets[39]: Block#41
        targets[40]: Block#42
        targets[41]: Block#43
        targets[42]: Block#44
        targets[43]: Block#45
        targets[44]: Block#46
        targets[45]: Block#47
        targets[46]: Block#48
        targets[47]: Block#49
        targets[48]: Block#50
        targets[49]: Block#51
        targets[50]: Block#52
        targets[51]: Block#53
        targets[52]: Block#54
        targets[53]: Block#55
        targets[54]: Block#56
        targets[55]: Block#57
        targets[56]: Block#58
        targets[57]: Block#59
        targets[58]: Block#60
        targets[59]: Block#61
        targets[60]: Block#62
        targets[61]: Block#63
        targets[62]: Block#64
        targets[63]: Block#65
        targets[64]: Block#66
        targets[65]: Block#67
        targets[66]: Block#68
        targets[67]: Block#69
        targets[68]: Block#70
        targets[69]: Block#71
        targets[70]: Block#72
        targets[71]: Block#73
        targets[72]: Block#74
        targets[73]: Block#75
        targets[74]: Block#76
        targets[75]: Block#77
        targets[76]: Block#78
        targets[77]: Block#79
        targets[78]: Block#80
        targets[79]: Block#81
        targets[80]: Block#82
        targets[81]: Block#83
        targets[82]: Block#84
        targets[83]: Block#85
        targets[84]: Block#86
        targets[85]: Block#87
        targets[86]: Block#88
        targets[87]: Block#89
        targets[88]: Block#90
        targets[89]: Block#91
        targets[90]: Block#92
        targets[91]: Block#93
        targets[92]: Block#94
        targets[93]: Block#95
        targets[94]: Block#96
        targets[95]: Block#97
        targets[96]: Block#98
        targets[97]: Block#99
        targets[98]: Block#100
        targets[99]: Block#101
        targets[100]: Block#102
        targets[101]: Block#103
        targets[102]: Block#104
        targets[103]: Block#105
        targets[104]: Block#106
        targets[105]: Block#107
        targets[106]: Block#108
        targets[107]: Block#109
        targets[108]: Block#110
        targets[109]: Block#111
        targets[110]: Block#112
        targets[111]: Block#113
        targets[112]: Block#114
        targets[113]: Block#115
        targets[114]: Block#116
        targets[115]: Block#117
        targets[116]: Block#118
        targets[117]: Block#119
        targets[118]: Block#120
        targets[119]: Block#121
        targets[120]: Block#122
        targets[121]: Block#123
        targets[122]: Block#124
        targets[123]: Block#125
        targets[124]: Block#126
        targets[125]: Block#127
        targets[126]: Block#128
        targets[127]: Block#129
        targets[128]: Block#130
        targets[129]: Block#131
        targets[130]: Block#132
        targets[131]: Block#133
        targets[132]: Block#134
        targets[133]: Block#135
        targets[134]: Block#136
        targets[135]: Block#137
        targets[136]: Block#138
        targets[137]: Block#139
        targets[138]: Block#140
        targets[139]: Block#141
        targets[140]: Block#142
        targets[141]: Block#143
        targets[142]: Block#144
        targets[143]: Block#145
        targets[144]: Block#146
        targets[145]: Block#147
        targets[146]: Block#148
        targets[147]: Block#149
        targets[148]: Block#150
        targets[149]: Block#151
        targets[150]: Block#152
        targets[151]: Block#153
        targets[152]: Block#154
        targets[153]: Block#155
        targets[154]: Block#156
        targets[155]: Block#157
        targets[156]: Block#158
        targets[157]: Block#159
        targets[158]: Block#160
        targets[159]: Block#161
        targets[160]: Block#162
        targets[161]: Block#163
        targets[162]: Block#164
        targets[163]: Block#165
        targets[164]: Block#166
        targets[165]: Block#167
        targets[166]: Block#168
        targets[167]: Block#169
        targets[168]: Block#170
        targets[169]: Block#171
        targets[170]: Block#172
        targets[171]: Block#173
        targets[172]: Block#174
        targets[173]: Block#175
        targets[174]: Block#176
        targets[175]: Block#177
        targets[176]: Block#178
        targets[177]: Block#179
        targets[178]: Block#180
        targets[179]: Block#181
        targets[180]: Block#182
        targets[181]: Block#183
        targets[182]: Block#184
        targets[183]: Block#185
        targets[184]: Block#186
        targets[185]: Block#187
        targets[186]: Block#188
        targets[187]: Block#189
        targets[188]: Block#190
        targets[189]: Block#191
        targets[190]: Block#192
        targets[191]: Block#193
        targets[192]: Block#194
        targets[193]: Block#195
        targets[194]: Block#196
        targets[195]: Block#197
        targets[196]: Block#198
        targets[197]: Block#199
        targets[198]: Block#200
        targets[199]: Block#201
        targets[200]: Block#202
        targets[201]: Block#203
        targets[202]: Block#204
        targets[203]: Block#205
        targets[204]: Block#206
        targets[205]: Block#207
        targets[206]: Block#208
        targets[207]: Block#209
        targets[208]: Block#210
        targets[209]: Block#211
        targets[210]: Block#212
        targets[211]: Block#213
        targets[212]: Block#214
        targets[213]: Block#215
        targets[214]: Block#216
        targets[215]: Block#217
        targets[216]: Block#218
        targets[217]: Block#219
        targets[218]: Block#220
        targets[219]: Block#221
        targets[220]: Block#222
        targets[221]: Block#223
        targets[222]: Block#224
        targets[223]: Block#225
        targets[224]: Block#226
        targets[225]: Block#227
        targets[226]: Block#228
        targets[227]: Block#229
        targets[228]: Block#230
        targets[229]: Block#231
        targets[230]: Block#232
        targets[231]: Block#233
        targets[232]: Block#234
        targets[233]: Block#235
        targets[234]: Block#236
        targets[235]: Block#237
        targets[236]: Block#238
        targets[237]: Block#239
        targets[238]: Block#240
        targets[239]: Block#241
        targets[240]: Block#242
        targets[241]: Block#243
        targets[242]: Block#244
        targets[243]: Block#245
        targets[244]: Block#246
        targets[245]: Block#247
        targets[246]: Block#248
        targets[247]: Block#249
        targets[248]: Block#250
        targets[249]: Block#251
        targets[250]: Block#252
        targets[251]: Block#253
        targets[252]: Block#254
        targets[253]: Block#255
        targets[254]: Block#256
        targets[255]: Block#257
        targets[256]: Block#258
        targets[257]: Block#259
        targets[258]: Block#260
        targets[259]: Block#261
        targets[260]: Block#262
        targets[261]: Block#263
        targets[262]: Block#264
        targets[263]: Block#265
        targets[264]: Block#266
        targets[265]: Block#267
        targets[266]: Block#268
        targets[267]: Block#269
        targets[268]: Block#270
        targets[269]: Block#271
        targets[270]: Block#272
        targets[271]: Block#273
        targets[272]: Block#274
        targets[273]: Block#275
        targets[274]: Block#276
        targets[275]: Block#277
        targets[276]: Block#278
        targets[277]: Block#279
        targets[278]: Block#280
        targets[279]: Block#281
        targets[280]: Block#282
        targets[281]: Block#283
        targets[282]: Block#284
        targets[283]: Block#285
        targets[284]: Block#286
        targets[285]: Block#287
        targets[286]: Block#288
        targets[287]: Block#289
        targets[288]: Block#290
        targets[289]: Block#291
        targets[290]: Block#292
        targets[291]: Block#293
        targets[292]: Block#294
        targets[293]: Block#295
        targets[294]: Block#296
        targets[295]: Block#297
        targets[296]: Block#298
        targets[297]: Block#299
        targets[298]: Block#300
        targets[299]: Block#301
        targets[300]: Block#302
        targets[301]: Block#303
        targets[302]: Block#304
        targets[303]: Block#305
        targets[304]: Block#306
        targets[305]: Block#307
        targets[306]: Block#308
        targets[307]: Block#309
        targets[308]: Block#310
        targets[309]: Block#311
        targets[310]: Block#312
        targets[311]: Block#313
        targets[312]: Block#314
        targets[313]: Block#315
        targets[314]: Block#316
        targets[315]: Block#317
        targets[316]: Block#318
        targets[317]: Block#319
        default: Block#320

Block#2
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2383.937)
        values[1]: LITERAL(3370.394)
        result: Var#3
    Expr_Assign
        var: Var#4<$pf>
        expr: Var#3
        result: Var#5
    Stmt_Jump
        target: Block#321

Block#3
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1683.78)
        values[1]: LITERAL(2383.937)
        result: Var#6
    Expr_Assign
        var: Var#7<$pf>
        expr: Var#6
        result: Var#8
    Stmt_Jump
        target: Block#321

Block#4
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1190.551)
        values[1]: LITERAL(1683.78)
        result: Var#9
    Expr_Assign
        var: Var#10<$pf>
        expr: Var#9
        result: Var#11
    Stmt_Jump
        target: Block#321

Block#5
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(841.89)
        values[1]: LITERAL(1190.551)
        result: Var#12
    Expr_Assign
        var: Var#13<$pf>
        expr: Var#12
        result: Var#14
    Stmt_Jump
        target: Block#321

Block#6
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(595.276)
        values[1]: LITERAL(841.89)
        result: Var#15
    Expr_Assign
        var: Var#16<$pf>
        expr: Var#15
        result: Var#17
    Stmt_Jump
        target: Block#321

Block#7
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(419.528)
        values[1]: LITERAL(595.276)
        result: Var#18
    Expr_Assign
        var: Var#19<$pf>
        expr: Var#18
        result: Var#20
    Stmt_Jump
        target: Block#321

Block#8
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(297.638)
        values[1]: LITERAL(419.528)
        result: Var#21
    Expr_Assign
        var: Var#22<$pf>
        expr: Var#21
        result: Var#23
    Stmt_Jump
        target: Block#321

Block#9
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(209.764)
        values[1]: LITERAL(297.638)
        result: Var#24
    Expr_Assign
        var: Var#25<$pf>
        expr: Var#24
        result: Var#26
    Stmt_Jump
        target: Block#321

Block#10
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(147.402)
        values[1]: LITERAL(209.764)
        result: Var#27
    Expr_Assign
        var: Var#28<$pf>
        expr: Var#27
        result: Var#29
    Stmt_Jump
        target: Block#321

Block#11
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(104.882)
        values[1]: LITERAL(147.402)
        result: Var#30
    Expr_Assign
        var: Var#31<$pf>
        expr: Var#30
        result: Var#32
    Stmt_Jump
        target: Block#321

Block#12
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(73.701)
        values[1]: LITERAL(104.882)
        result: Var#33
    Expr_Assign
        var: Var#34<$pf>
        expr: Var#33
        result: Var#35
    Stmt_Jump
        target: Block#321

Block#13
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(51.024)
        values[1]: LITERAL(73.701)
        result: Var#36
    Expr_Assign
        var: Var#37<$pf>
        expr: Var#36
        result: Var#38
    Stmt_Jump
        target: Block#321

Block#14
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(36.85)
        values[1]: LITERAL(51.024)
        result: Var#39
    Expr_Assign
        var: Var#40<$pf>
        expr: Var#39
        result: Var#41
    Stmt_Jump
        target: Block#321

Block#15
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2834.646)
        values[1]: LITERAL(4008.189)
        result: Var#42
    Expr_Assign
        var: Var#43<$pf>
        expr: Var#42
        result: Var#44
    Stmt_Jump
        target: Block#321

Block#16
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2004.094)
        values[1]: LITERAL(2834.646)
        result: Var#45
    Expr_Assign
        var: Var#46<$pf>
        expr: Var#45
        result: Var#47
    Stmt_Jump
        target: Block#321

Block#17
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1417.323)
        values[1]: LITERAL(2004.094)
        result: Var#48
    Expr_Assign
        var: Var#49<$pf>
        expr: Var#48
        result: Var#50
    Stmt_Jump
        target: Block#321

Block#18
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1000.63)
        values[1]: LITERAL(1417.323)
        result: Var#51
    Expr_Assign
        var: Var#52<$pf>
        expr: Var#51
        result: Var#53
    Stmt_Jump
        target: Block#321

Block#19
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(708.661)
        values[1]: LITERAL(1000.63)
        result: Var#54
    Expr_Assign
        var: Var#55<$pf>
        expr: Var#54
        result: Var#56
    Stmt_Jump
        target: Block#321

Block#20
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(498.898)
        values[1]: LITERAL(708.661)
        result: Var#57
    Expr_Assign
        var: Var#58<$pf>
        expr: Var#57
        result: Var#59
    Stmt_Jump
        target: Block#321

Block#21
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(354.331)
        values[1]: LITERAL(498.898)
        result: Var#60
    Expr_Assign
        var: Var#61<$pf>
        expr: Var#60
        result: Var#62
    Stmt_Jump
        target: Block#321

Block#22
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(249.449)
        values[1]: LITERAL(354.331)
        result: Var#63
    Expr_Assign
        var: Var#64<$pf>
        expr: Var#63
        result: Var#65
    Stmt_Jump
        target: Block#321

Block#23
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(175.748)
        values[1]: LITERAL(249.449)
        result: Var#66
    Expr_Assign
        var: Var#67<$pf>
        expr: Var#66
        result: Var#68
    Stmt_Jump
        target: Block#321

Block#24
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(124.724)
        values[1]: LITERAL(175.748)
        result: Var#69
    Expr_Assign
        var: Var#70<$pf>
        expr: Var#69
        result: Var#71
    Stmt_Jump
        target: Block#321

Block#25
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(87.874)
        values[1]: LITERAL(124.724)
        result: Var#72
    Expr_Assign
        var: Var#73<$pf>
        expr: Var#72
        result: Var#74
    Stmt_Jump
        target: Block#321

Block#26
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(62.362)
        values[1]: LITERAL(87.874)
        result: Var#75
    Expr_Assign
        var: Var#76<$pf>
        expr: Var#75
        result: Var#77
    Stmt_Jump
        target: Block#321

Block#27
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(42.52)
        values[1]: LITERAL(62.362)
        result: Var#78
    Expr_Assign
        var: Var#79<$pf>
        expr: Var#78
        result: Var#80
    Stmt_Jump
        target: Block#321

Block#28
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2599.37)
        values[1]: LITERAL(3676.535)
        result: Var#81
    Expr_Assign
        var: Var#82<$pf>
        expr: Var#81
        result: Var#83
    Stmt_Jump
        target: Block#321

Block#29
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1836.85)
        values[1]: LITERAL(2599.37)
        result: Var#84
    Expr_Assign
        var: Var#85<$pf>
        expr: Var#84
        result: Var#86
    Stmt_Jump
        target: Block#321

Block#30
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1298.268)
        values[1]: LITERAL(1836.85)
        result: Var#87
    Expr_Assign
        var: Var#88<$pf>
        expr: Var#87
        result: Var#89
    Stmt_Jump
        target: Block#321

Block#31
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(918.425)
        values[1]: LITERAL(1298.268)
        result: Var#90
    Expr_Assign
        var: Var#91<$pf>
        expr: Var#90
        result: Var#92
    Stmt_Jump
        target: Block#321

Block#32
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(649.134)
        values[1]: LITERAL(918.425)
        result: Var#93
    Expr_Assign
        var: Var#94<$pf>
        expr: Var#93
        result: Var#95
    Stmt_Jump
        target: Block#321

Block#33
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(459.213)
        values[1]: LITERAL(649.134)
        result: Var#96
    Expr_Assign
        var: Var#97<$pf>
        expr: Var#96
        result: Var#98
    Stmt_Jump
        target: Block#321

Block#34
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(323.15)
        values[1]: LITERAL(459.213)
        result: Var#99
    Expr_Assign
        var: Var#100<$pf>
        expr: Var#99
        result: Var#101
    Stmt_Jump
        target: Block#321

Block#35
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(229.606)
        values[1]: LITERAL(323.15)
        result: Var#102
    Expr_Assign
        var: Var#103<$pf>
        expr: Var#102
        result: Var#104
    Stmt_Jump
        target: Block#321

Block#36
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(161.575)
        values[1]: LITERAL(229.606)
        result: Var#105
    Expr_Assign
        var: Var#106<$pf>
        expr: Var#105
        result: Var#107
    Stmt_Jump
        target: Block#321

Block#37
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(113.386)
        values[1]: LITERAL(161.575)
        result: Var#108
    Expr_Assign
        var: Var#109<$pf>
        expr: Var#108
        result: Var#110
    Stmt_Jump
        target: Block#321

Block#38
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(79.37)
        values[1]: LITERAL(113.386)
        result: Var#111
    Expr_Assign
        var: Var#112<$pf>
        expr: Var#111
        result: Var#113
    Stmt_Jump
        target: Block#321

Block#39
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(56.693)
        values[1]: LITERAL(79.37)
        result: Var#114
    Expr_Assign
        var: Var#115<$pf>
        expr: Var#114
        result: Var#116
    Stmt_Jump
        target: Block#321

Block#40
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(39.685)
        values[1]: LITERAL(56.693)
        result: Var#117
    Expr_Assign
        var: Var#118<$pf>
        expr: Var#117
        result: Var#119
    Stmt_Jump
        target: Block#321

Block#41
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(229.606)
        values[1]: LITERAL(459.213)
        result: Var#120
    Expr_Assign
        var: Var#121<$pf>
        expr: Var#120
        result: Var#122
    Stmt_Jump
        target: Block#321

Block#42
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(311.811)
        values[1]: LITERAL(623.622)
        result: Var#123
    Expr_Assign
        var: Var#124<$pf>
        expr: Var#123
        result: Var#125
    Stmt_Jump
        target: Block#321

Block#43
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2491.654)
        values[1]: LITERAL(3517.795)
        result: Var#126
    Expr_Assign
        var: Var#127<$pf>
        expr: Var#126
        result: Var#128
    Stmt_Jump
        target: Block#321

Block#44
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1757.48)
        values[1]: LITERAL(2491.654)
        result: Var#129
    Expr_Assign
        var: Var#130<$pf>
        expr: Var#129
        result: Var#131
    Stmt_Jump
        target: Block#321

Block#45
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1247.244)
        values[1]: LITERAL(1757.48)
        result: Var#132
    Expr_Assign
        var: Var#133<$pf>
        expr: Var#132
        result: Var#134
    Stmt_Jump
        target: Block#321

Block#46
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(878.74)
        values[1]: LITERAL(1247.244)
        result: Var#135
    Expr_Assign
        var: Var#136<$pf>
        expr: Var#135
        result: Var#137
    Stmt_Jump
        target: Block#321

Block#47
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(623.622)
        values[1]: LITERAL(878.74)
        result: Var#138
    Expr_Assign
        var: Var#139<$pf>
        expr: Var#138
        result: Var#140
    Stmt_Jump
        target: Block#321

Block#48
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(439.37)
        values[1]: LITERAL(623.622)
        result: Var#141
    Expr_Assign
        var: Var#142<$pf>
        expr: Var#141
        result: Var#143
    Stmt_Jump
        target: Block#321

Block#49
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(311.811)
        values[1]: LITERAL(439.37)
        result: Var#144
    Expr_Assign
        var: Var#145<$pf>
        expr: Var#144
        result: Var#146
    Stmt_Jump
        target: Block#321

Block#50
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(221.102)
        values[1]: LITERAL(311.811)
        result: Var#147
    Expr_Assign
        var: Var#148<$pf>
        expr: Var#147
        result: Var#149
    Stmt_Jump
        target: Block#321

Block#51
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(155.906)
        values[1]: LITERAL(221.102)
        result: Var#150
    Expr_Assign
        var: Var#151<$pf>
        expr: Var#150
        result: Var#152
    Stmt_Jump
        target: Block#321

Block#52
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(110.551)
        values[1]: LITERAL(155.906)
        result: Var#153
    Expr_Assign
        var: Var#154<$pf>
        expr: Var#153
        result: Var#155
    Stmt_Jump
        target: Block#321

Block#53
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(76.535)
        values[1]: LITERAL(110.551)
        result: Var#156
    Expr_Assign
        var: Var#157<$pf>
        expr: Var#156
        result: Var#158
    Stmt_Jump
        target: Block#321

Block#54
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(53.858)
        values[1]: LITERAL(76.535)
        result: Var#159
    Expr_Assign
        var: Var#160<$pf>
        expr: Var#159
        result: Var#161
    Stmt_Jump
        target: Block#321

Block#55
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(36.85)
        values[1]: LITERAL(53.858)
        result: Var#162
    Expr_Assign
        var: Var#163<$pf>
        expr: Var#162
        result: Var#164
    Stmt_Jump
        target: Block#321

Block#56
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2715.591)
        values[1]: LITERAL(3838.11)
        result: Var#165
    Expr_Assign
        var: Var#166<$pf>
        expr: Var#165
        result: Var#167
    Stmt_Jump
        target: Block#321

Block#57
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1919.055)
        values[1]: LITERAL(2715.591)
        result: Var#168
    Expr_Assign
        var: Var#169<$pf>
        expr: Var#168
        result: Var#170
    Stmt_Jump
        target: Block#321

Block#58
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1357.795)
        values[1]: LITERAL(1919.055)
        result: Var#171
    Expr_Assign
        var: Var#172<$pf>
        expr: Var#171
        result: Var#173
    Stmt_Jump
        target: Block#321

Block#59
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(958.11)
        values[1]: LITERAL(1357.795)
        result: Var#174
    Expr_Assign
        var: Var#175<$pf>
        expr: Var#174
        result: Var#176
    Stmt_Jump
        target: Block#321

Block#60
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(677.48)
        values[1]: LITERAL(958.11)
        result: Var#177
    Expr_Assign
        var: Var#178<$pf>
        expr: Var#177
        result: Var#179
    Stmt_Jump
        target: Block#321

Block#61
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(479.055)
        values[1]: LITERAL(677.48)
        result: Var#180
    Expr_Assign
        var: Var#181<$pf>
        expr: Var#180
        result: Var#182
    Stmt_Jump
        target: Block#321

Block#62
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(337.323)
        values[1]: LITERAL(479.055)
        result: Var#183
    Expr_Assign
        var: Var#184<$pf>
        expr: Var#183
        result: Var#185
    Stmt_Jump
        target: Block#321

Block#63
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(238.11)
        values[1]: LITERAL(337.323)
        result: Var#186
    Expr_Assign
        var: Var#187<$pf>
        expr: Var#186
        result: Var#188
    Stmt_Jump
        target: Block#321

Block#64
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(167.244)
        values[1]: LITERAL(238.11)
        result: Var#189
    Expr_Assign
        var: Var#190<$pf>
        expr: Var#189
        result: Var#191
    Stmt_Jump
        target: Block#321

Block#65
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(119.055)
        values[1]: LITERAL(167.244)
        result: Var#192
    Expr_Assign
        var: Var#193<$pf>
        expr: Var#192
        result: Var#194
    Stmt_Jump
        target: Block#321

Block#66
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(82.205)
        values[1]: LITERAL(119.055)
        result: Var#195
    Expr_Assign
        var: Var#196<$pf>
        expr: Var#195
        result: Var#197
    Stmt_Jump
        target: Block#321

Block#67
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(59.528)
        values[1]: LITERAL(82.205)
        result: Var#198
    Expr_Assign
        var: Var#199<$pf>
        expr: Var#198
        result: Var#200
    Stmt_Jump
        target: Block#321

Block#68
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(39.685)
        values[1]: LITERAL(59.528)
        result: Var#201
    Expr_Assign
        var: Var#202<$pf>
        expr: Var#201
        result: Var#203
    Stmt_Jump
        target: Block#321

Block#69
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2437.795)
        values[1]: LITERAL(3458.268)
        result: Var#204
    Expr_Assign
        var: Var#205<$pf>
        expr: Var#204
        result: Var#206
    Stmt_Jump
        target: Block#321

Block#70
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1729.134)
        values[1]: LITERAL(2437.795)
        result: Var#207
    Expr_Assign
        var: Var#208<$pf>
        expr: Var#207
        result: Var#209
    Stmt_Jump
        target: Block#321

Block#71
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1218.898)
        values[1]: LITERAL(1729.134)
        result: Var#210
    Expr_Assign
        var: Var#211<$pf>
        expr: Var#210
        result: Var#212
    Stmt_Jump
        target: Block#321

Block#72
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(864.567)
        values[1]: LITERAL(1218.898)
        result: Var#213
    Expr_Assign
        var: Var#214<$pf>
        expr: Var#213
        result: Var#215
    Stmt_Jump
        target: Block#321

Block#73
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(609.449)
        values[1]: LITERAL(864.567)
        result: Var#216
    Expr_Assign
        var: Var#217<$pf>
        expr: Var#216
        result: Var#218
    Stmt_Jump
        target: Block#321

Block#74
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2551.181)
        values[1]: LITERAL(3628.346)
        result: Var#219
    Expr_Assign
        var: Var#220<$pf>
        expr: Var#219
        result: Var#221
    Stmt_Jump
        target: Block#321

Block#75
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1814.173)
        values[1]: LITERAL(2551.181)
        result: Var#222
    Expr_Assign
        var: Var#223<$pf>
        expr: Var#222
        result: Var#224
    Stmt_Jump
        target: Block#321

Block#76
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1275.591)
        values[1]: LITERAL(1814.173)
        result: Var#225
    Expr_Assign
        var: Var#226<$pf>
        expr: Var#225
        result: Var#227
    Stmt_Jump
        target: Block#321

Block#77
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(907.087)
        values[1]: LITERAL(1275.591)
        result: Var#228
    Expr_Assign
        var: Var#229<$pf>
        expr: Var#228
        result: Var#230
    Stmt_Jump
        target: Block#321

Block#78
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(637.795)
        values[1]: LITERAL(907.087)
        result: Var#231
    Expr_Assign
        var: Var#232<$pf>
        expr: Var#231
        result: Var#233
    Stmt_Jump
        target: Block#321

Block#79
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(4767.874)
        values[1]: LITERAL(6740.787)
        result: Var#234
    Expr_Assign
        var: Var#235<$pf>
        expr: Var#234
        result: Var#236
    Stmt_Jump
        target: Block#321

Block#80
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(3370.394)
        values[1]: LITERAL(4767.874)
        result: Var#237
    Expr_Assign
        var: Var#238<$pf>
        expr: Var#237
        result: Var#239
    Stmt_Jump
        target: Block#321

Block#81
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1261.417)
        values[1]: LITERAL(1754.646)
        result: Var#240
    Expr_Assign
        var: Var#241<$pf>
        expr: Var#240
        result: Var#242
    Stmt_Jump
        target: Block#321

Block#82
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(932.598)
        values[1]: LITERAL(1369.134)
        result: Var#243
    Expr_Assign
        var: Var#244<$pf>
        expr: Var#243
        result: Var#245
    Stmt_Jump
        target: Block#321

Block#83
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(912.756)
        values[1]: LITERAL(1261.417)
        result: Var#246
    Expr_Assign
        var: Var#247<$pf>
        expr: Var#246
        result: Var#248
    Stmt_Jump
        target: Block#321

Block#84
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(864.567)
        values[1]: LITERAL(1440.0)
        result: Var#249
    Expr_Assign
        var: Var#250<$pf>
        expr: Var#249
        result: Var#251
    Stmt_Jump
        target: Block#321

Block#85
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(864.567)
        values[1]: LITERAL(1380.472)
        result: Var#252
    Expr_Assign
        var: Var#253<$pf>
        expr: Var#252
        result: Var#254
    Stmt_Jump
        target: Block#321

Block#86
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(666.142)
        values[1]: LITERAL(912.756)
        result: Var#255
    Expr_Assign
        var: Var#256<$pf>
        expr: Var#255
        result: Var#257
    Stmt_Jump
        target: Block#321

Block#87
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(649.134)
        values[1]: LITERAL(912.756)
        result: Var#258
    Expr_Assign
        var: Var#259<$pf>
        expr: Var#258
        result: Var#260
    Stmt_Jump
        target: Block#321

Block#88
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(643.465)
        values[1]: LITERAL(1009.134)
        result: Var#261
    Expr_Assign
        var: Var#262<$pf>
        expr: Var#261
        result: Var#263
    Stmt_Jump
        target: Block#321

Block#89
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(595.276)
        values[1]: LITERAL(986.457)
        result: Var#264
    Expr_Assign
        var: Var#265<$pf>
        expr: Var#264
        result: Var#266
    Stmt_Jump
        target: Block#321

Block#90
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(595.276)
        values[1]: LITERAL(935.433)
        result: Var#267
    Expr_Assign
        var: Var#268<$pf>
        expr: Var#267
        result: Var#269
    Stmt_Jump
        target: Block#321

Block#91
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(572.598)
        values[1]: LITERAL(782.362)
        result: Var#270
    Expr_Assign
        var: Var#271<$pf>
        expr: Var#270
        result: Var#272
    Stmt_Jump
        target: Block#321

Block#92
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(490.394)
        values[1]: LITERAL(666.142)
        result: Var#273
    Expr_Assign
        var: Var#274<$pf>
        expr: Var#273
        result: Var#275
    Stmt_Jump
        target: Block#321

Block#93
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2448.0)
        values[1]: LITERAL(3168.0)
        result: Var#276
    Expr_Assign
        var: Var#277<$pf>
        expr: Var#276
        result: Var#278
    Stmt_Jump
        target: Block#321

Block#94
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1584.0)
        values[1]: LITERAL(2448.0)
        result: Var#279
    Expr_Assign
        var: Var#280<$pf>
        expr: Var#279
        result: Var#281
    Stmt_Jump
        target: Block#321

Block#95
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1224.0)
        values[1]: LITERAL(1584.0)
        result: Var#282
    Expr_Assign
        var: Var#283<$pf>
        expr: Var#282
        result: Var#284
    Stmt_Jump
        target: Block#321

Block#96
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(792.0)
        values[1]: LITERAL(1224.0)
        result: Var#285
    Expr_Assign
        var: Var#286<$pf>
        expr: Var#285
        result: Var#287
    Stmt_Jump
        target: Block#321

Block#97
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(612.0)
        values[1]: LITERAL(792.0)
        result: Var#288
    Expr_Assign
        var: Var#289<$pf>
        expr: Var#288
        result: Var#290
    Stmt_Jump
        target: Block#321

Block#98
    Parent: Block#1
    Stmt_Jump
        target: Block#99

Block#99
    Parent: Block#1
    Parent: Block#98
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1224.0)
        values[1]: LITERAL(792.0)
        result: Var#291
    Expr_Assign
        var: Var#292<$pf>
        expr: Var#291
        result: Var#293
    Stmt_Jump
        target: Block#321

Block#100
    Parent: Block#1
    Stmt_Jump
        target: Block#101

Block#101
    Parent: Block#1
    Parent: Block#100
    Stmt_Jump
        target: Block#102

Block#102
    Parent: Block#1
    Parent: Block#101
    Stmt_Jump
        target: Block#103

Block#103
    Parent: Block#1
    Parent: Block#102
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(792.0)
        values[1]: LITERAL(1224.0)
        result: Var#294
    Expr_Assign
        var: Var#295<$pf>
        expr: Var#294
        result: Var#296
    Stmt_Jump
        target: Block#321

Block#104
    Parent: Block#1
    Stmt_Jump
        target: Block#105

Block#105
    Parent: Block#1
    Parent: Block#104
    Stmt_Jump
        target: Block#106

Block#106
    Parent: Block#1
    Parent: Block#105
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(612.0)
        values[1]: LITERAL(792.0)
        result: Var#297
    Expr_Assign
        var: Var#298<$pf>
        expr: Var#297
        result: Var#299
    Stmt_Jump
        target: Block#321

Block#107
    Parent: Block#1
    Stmt_Jump
        target: Block#108

Block#108
    Parent: Block#1
    Parent: Block#107
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(612.0)
        values[1]: LITERAL(1008.0)
        result: Var#300
    Expr_Assign
        var: Var#301<$pf>
        expr: Var#300
        result: Var#302
    Stmt_Jump
        target: Block#321

Block#109
    Parent: Block#1
    Stmt_Jump
        target: Block#110

Block#110
    Parent: Block#1
    Parent: Block#109
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(576.0)
        values[1]: LITERAL(756.0)
        result: Var#303
    Expr_Assign
        var: Var#304<$pf>
        expr: Var#303
        result: Var#305
    Stmt_Jump
        target: Block#321

Block#111
    Parent: Block#1
    Stmt_Jump
        target: Block#112

Block#112
    Parent: Block#1
    Parent: Block#111
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(576.0)
        values[1]: LITERAL(360.0)
        result: Var#306
    Expr_Assign
        var: Var#307<$pf>
        expr: Var#306
        result: Var#308
    Stmt_Jump
        target: Block#321

Block#113
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2520.0)
        values[1]: LITERAL(3240.0)
        result: Var#309
    Expr_Assign
        var: Var#310<$pf>
        expr: Var#309
        result: Var#311
    Stmt_Jump
        target: Block#321

Block#114
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(936.0)
        values[1]: LITERAL(1368.0)
        result: Var#312
    Expr_Assign
        var: Var#313<$pf>
        expr: Var#312
        result: Var#314
    Stmt_Jump
        target: Block#321

Block#115
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(648.0)
        values[1]: LITERAL(792.0)
        result: Var#315
    Expr_Assign
        var: Var#316<$pf>
        expr: Var#315
        result: Var#317
    Stmt_Jump
        target: Block#321

Block#116
    Parent: Block#1
    Stmt_Jump
        target: Block#117

Block#117
    Parent: Block#1
    Parent: Block#116
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(612.0)
        values[1]: LITERAL(936.0)
        result: Var#318
    Expr_Assign
        var: Var#319<$pf>
        expr: Var#318
        result: Var#320
    Stmt_Jump
        target: Block#321

Block#118
    Parent: Block#1
    Stmt_Jump
        target: Block#119

Block#119
    Parent: Block#1
    Parent: Block#118
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(522.0)
        values[1]: LITERAL(756.0)
        result: Var#321
    Expr_Assign
        var: Var#322<$pf>
        expr: Var#321
        result: Var#323
    Stmt_Jump
        target: Block#321

Block#120
    Parent: Block#1
    Stmt_Jump
        target: Block#121

Block#121
    Parent: Block#1
    Parent: Block#120
    Stmt_Jump
        target: Block#122

Block#122
    Parent: Block#1
    Parent: Block#121
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(396.0)
        values[1]: LITERAL(612.0)
        result: Var#324
    Expr_Assign
        var: Var#325<$pf>
        expr: Var#324
        result: Var#326
    Stmt_Jump
        target: Block#321

Block#123
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(595.44)
        values[1]: LITERAL(936.0)
        result: Var#327
    Expr_Assign
        var: Var#328<$pf>
        expr: Var#327
        result: Var#329
    Stmt_Jump
        target: Block#321

Block#124
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(306.0)
        values[1]: LITERAL(486.0)
        result: Var#330
    Expr_Assign
        var: Var#331<$pf>
        expr: Var#330
        result: Var#332
    Stmt_Jump
        target: Block#321

Block#125
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(198.0)
        values[1]: LITERAL(360.0)
        result: Var#333
    Expr_Assign
        var: Var#334<$pf>
        expr: Var#333
        result: Var#335
    Stmt_Jump
        target: Block#321

Block#126
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1587.402)
        values[1]: LITERAL(2437.795)
        result: Var#336
    Expr_Assign
        var: Var#337<$pf>
        expr: Var#336
        result: Var#338
    Stmt_Jump
        target: Block#321

Block#127
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1218.898)
        values[1]: LITERAL(1587.402)
        result: Var#339
    Expr_Assign
        var: Var#340<$pf>
        expr: Var#339
        result: Var#341
    Stmt_Jump
        target: Block#321

Block#128
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(793.701)
        values[1]: LITERAL(1218.898)
        result: Var#342
    Expr_Assign
        var: Var#343<$pf>
        expr: Var#342
        result: Var#344
    Stmt_Jump
        target: Block#321

Block#129
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(609.449)
        values[1]: LITERAL(793.701)
        result: Var#345
    Expr_Assign
        var: Var#346<$pf>
        expr: Var#345
        result: Var#347
    Stmt_Jump
        target: Block#321

Block#130
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(396.85)
        values[1]: LITERAL(609.449)
        result: Var#348
    Expr_Assign
        var: Var#349<$pf>
        expr: Var#348
        result: Var#350
    Stmt_Jump
        target: Block#321

Block#131
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(303.307)
        values[1]: LITERAL(396.85)
        result: Var#351
    Expr_Assign
        var: Var#352<$pf>
        expr: Var#351
        result: Var#353
    Stmt_Jump
        target: Block#321

Block#132
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2592.0)
        values[1]: LITERAL(3456.0)
        result: Var#354
    Expr_Assign
        var: Var#355<$pf>
        expr: Var#354
        result: Var#356
    Stmt_Jump
        target: Block#321

Block#133
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2160.0)
        values[1]: LITERAL(3024.0)
        result: Var#357
    Expr_Assign
        var: Var#358<$pf>
        expr: Var#357
        result: Var#359
    Stmt_Jump
        target: Block#321

Block#134
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1728.0)
        values[1]: LITERAL(2592.0)
        result: Var#360
    Expr_Assign
        var: Var#361<$pf>
        expr: Var#360
        result: Var#362
    Stmt_Jump
        target: Block#321

Block#135
    Parent: Block#1
    Stmt_Jump
        target: Block#136

Block#136
    Parent: Block#1
    Parent: Block#135
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1296.0)
        values[1]: LITERAL(1728.0)
        result: Var#363
    Expr_Assign
        var: Var#364<$pf>
        expr: Var#363
        result: Var#365
    Stmt_Jump
        target: Block#321

Block#137
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(864.0)
        values[1]: LITERAL(1296.0)
        result: Var#366
    Expr_Assign
        var: Var#367<$pf>
        expr: Var#366
        result: Var#368
    Stmt_Jump
        target: Block#321

Block#138
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(648.0)
        values[1]: LITERAL(864.0)
        result: Var#369
    Expr_Assign
        var: Var#370<$pf>
        expr: Var#369
        result: Var#371
    Stmt_Jump
        target: Block#321

Block#139
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(314.64)
        values[1]: LITERAL(414.0)
        result: Var#372
    Expr_Assign
        var: Var#373<$pf>
        expr: Var#372
        result: Var#374
    Stmt_Jump
        target: Block#321

Block#140
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(342.0)
        values[1]: LITERAL(468.0)
        result: Var#375
    Expr_Assign
        var: Var#376<$pf>
        expr: Var#375
        result: Var#377
    Stmt_Jump
        target: Block#321

Block#141
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(378.0)
        values[1]: LITERAL(522.0)
        result: Var#378
    Expr_Assign
        var: Var#379<$pf>
        expr: Var#378
        result: Var#380
    Stmt_Jump
        target: Block#321

Block#142
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(396.0)
        values[1]: LITERAL(584.64)
        result: Var#381
    Expr_Assign
        var: Var#382<$pf>
        expr: Var#381
        result: Var#383
    Stmt_Jump
        target: Block#321

Block#143
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(450.0)
        values[1]: LITERAL(692.64)
        result: Var#384
    Expr_Assign
        var: Var#385<$pf>
        expr: Var#384
        result: Var#386
    Stmt_Jump
        target: Block#321

Block#144
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(278.64)
        values[1]: LITERAL(638.64)
        result: Var#387
    Expr_Assign
        var: Var#388<$pf>
        expr: Var#387
        result: Var#389
    Stmt_Jump
        target: Block#321

Block#145
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(252.0)
        values[1]: LITERAL(432.0)
        result: Var#390
    Expr_Assign
        var: Var#391<$pf>
        expr: Var#390
        result: Var#392
    Stmt_Jump
        target: Block#321

Block#146
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(260.64)
        values[1]: LITERAL(468.0)
        result: Var#393
    Expr_Assign
        var: Var#394<$pf>
        expr: Var#393
        result: Var#395
    Stmt_Jump
        target: Block#321

Block#147
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(278.64)
        values[1]: LITERAL(540.0)
        result: Var#396
    Expr_Assign
        var: Var#397<$pf>
        expr: Var#396
        result: Var#398
    Stmt_Jump
        target: Block#321

Block#148
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(278.64)
        values[1]: LITERAL(638.64)
        result: Var#399
    Expr_Assign
        var: Var#400<$pf>
        expr: Var#399
        result: Var#401
    Stmt_Jump
        target: Block#321

Block#149
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(296.64)
        values[1]: LITERAL(684.0)
        result: Var#402
    Expr_Assign
        var: Var#403<$pf>
        expr: Var#402
        result: Var#404
    Stmt_Jump
        target: Block#321

Block#150
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(324.0)
        values[1]: LITERAL(746.64)
        result: Var#405
    Expr_Assign
        var: Var#406<$pf>
        expr: Var#405
        result: Var#407
    Stmt_Jump
        target: Block#321

Block#151
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(342.0)
        values[1]: LITERAL(792.0)
        result: Var#408
    Expr_Assign
        var: Var#409<$pf>
        expr: Var#408
        result: Var#410
    Stmt_Jump
        target: Block#321

Block#152
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(360.0)
        values[1]: LITERAL(828.0)
        result: Var#411
    Expr_Assign
        var: Var#412<$pf>
        expr: Var#411
        result: Var#413
    Stmt_Jump
        target: Block#321

Block#153
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(432.0)
        values[1]: LITERAL(648.0)
        result: Var#414
    Expr_Assign
        var: Var#415<$pf>
        expr: Var#414
        result: Var#416
    Stmt_Jump
        target: Block#321

Block#154
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(468.0)
        values[1]: LITERAL(684.0)
        result: Var#417
    Expr_Assign
        var: Var#418<$pf>
        expr: Var#417
        result: Var#419
    Stmt_Jump
        target: Block#321

Block#155
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(468.0)
        values[1]: LITERAL(720.0)
        result: Var#420
    Expr_Assign
        var: Var#421<$pf>
        expr: Var#420
        result: Var#422
    Stmt_Jump
        target: Block#321

Block#156
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(504.0)
        values[1]: LITERAL(720.0)
        result: Var#423
    Expr_Assign
        var: Var#424<$pf>
        expr: Var#423
        result: Var#425
    Stmt_Jump
        target: Block#321

Block#157
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(540.0)
        values[1]: LITERAL(756.0)
        result: Var#426
    Expr_Assign
        var: Var#427<$pf>
        expr: Var#426
        result: Var#428
    Stmt_Jump
        target: Block#321

Block#158
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(576.0)
        values[1]: LITERAL(792.0)
        result: Var#429
    Expr_Assign
        var: Var#430<$pf>
        expr: Var#429
        result: Var#431
    Stmt_Jump
        target: Block#321

Block#159
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(594.0)
        values[1]: LITERAL(810.0)
        result: Var#432
    Expr_Assign
        var: Var#433<$pf>
        expr: Var#432
        result: Var#434
    Stmt_Jump
        target: Block#321

Block#160
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(612.0)
        values[1]: LITERAL(756.0)
        result: Var#435
    Expr_Assign
        var: Var#436<$pf>
        expr: Var#435
        result: Var#437
    Stmt_Jump
        target: Block#321

Block#161
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(630.0)
        values[1]: LITERAL(810.0)
        result: Var#438
    Expr_Assign
        var: Var#439<$pf>
        expr: Var#438
        result: Var#440
    Stmt_Jump
        target: Block#321

Block#162
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(648.0)
        values[1]: LITERAL(864.0)
        result: Var#441
    Expr_Assign
        var: Var#442<$pf>
        expr: Var#441
        result: Var#443
    Stmt_Jump
        target: Block#321

Block#163
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(684.0)
        values[1]: LITERAL(900.0)
        result: Var#444
    Expr_Assign
        var: Var#445<$pf>
        expr: Var#444
        result: Var#446
    Stmt_Jump
        target: Block#321

Block#164
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(720.0)
        values[1]: LITERAL(936.0)
        result: Var#447
    Expr_Assign
        var: Var#448<$pf>
        expr: Var#447
        result: Var#449
    Stmt_Jump
        target: Block#321

Block#165
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(810.0)
        values[1]: LITERAL(882.0)
        result: Var#450
    Expr_Assign
        var: Var#451<$pf>
        expr: Var#450
        result: Var#452
    Stmt_Jump
        target: Block#321

Block#166
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(828.0)
        values[1]: LITERAL(1044.0)
        result: Var#453
    Expr_Assign
        var: Var#454<$pf>
        expr: Var#453
        result: Var#455
    Stmt_Jump
        target: Block#321

Block#167
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2919.685)
        values[1]: LITERAL(4127.244)
        result: Var#456
    Expr_Assign
        var: Var#457<$pf>
        expr: Var#456
        result: Var#458
    Stmt_Jump
        target: Block#321

Block#168
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2063.622)
        values[1]: LITERAL(2919.685)
        result: Var#459
    Expr_Assign
        var: Var#460<$pf>
        expr: Var#459
        result: Var#461
    Stmt_Jump
        target: Block#321

Block#169
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1459.843)
        values[1]: LITERAL(2063.622)
        result: Var#462
    Expr_Assign
        var: Var#463<$pf>
        expr: Var#462
        result: Var#464
    Stmt_Jump
        target: Block#321

Block#170
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1031.811)
        values[1]: LITERAL(1459.843)
        result: Var#465
    Expr_Assign
        var: Var#466<$pf>
        expr: Var#465
        result: Var#467
    Stmt_Jump
        target: Block#321

Block#171
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(728.504)
        values[1]: LITERAL(1031.811)
        result: Var#468
    Expr_Assign
        var: Var#469<$pf>
        expr: Var#468
        result: Var#470
    Stmt_Jump
        target: Block#321

Block#172
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(515.906)
        values[1]: LITERAL(728.504)
        result: Var#471
    Expr_Assign
        var: Var#472<$pf>
        expr: Var#471
        result: Var#473
    Stmt_Jump
        target: Block#321

Block#173
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(362.835)
        values[1]: LITERAL(515.906)
        result: Var#474
    Expr_Assign
        var: Var#475<$pf>
        expr: Var#474
        result: Var#476
    Stmt_Jump
        target: Block#321

Block#174
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(257.953)
        values[1]: LITERAL(362.835)
        result: Var#477
    Expr_Assign
        var: Var#478<$pf>
        expr: Var#477
        result: Var#479
    Stmt_Jump
        target: Block#321

Block#175
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(181.417)
        values[1]: LITERAL(257.953)
        result: Var#480
    Expr_Assign
        var: Var#481<$pf>
        expr: Var#480
        result: Var#482
    Stmt_Jump
        target: Block#321

Block#176
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(127.559)
        values[1]: LITERAL(181.417)
        result: Var#483
    Expr_Assign
        var: Var#484<$pf>
        expr: Var#483
        result: Var#485
    Stmt_Jump
        target: Block#321

Block#177
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(90.709)
        values[1]: LITERAL(127.559)
        result: Var#486
    Expr_Assign
        var: Var#487<$pf>
        expr: Var#486
        result: Var#488
    Stmt_Jump
        target: Block#321

Block#178
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(62.362)
        values[1]: LITERAL(90.709)
        result: Var#489
    Expr_Assign
        var: Var#490<$pf>
        expr: Var#489
        result: Var#491
    Stmt_Jump
        target: Block#321

Block#179
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(45.354)
        values[1]: LITERAL(62.362)
        result: Var#492
    Expr_Assign
        var: Var#493<$pf>
        expr: Var#492
        result: Var#494
    Stmt_Jump
        target: Block#321

Block#180
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2381.102)
        values[1]: LITERAL(3174.803)
        result: Var#495
    Expr_Assign
        var: Var#496<$pf>
        expr: Var#495
        result: Var#497
    Stmt_Jump
        target: Block#321

Block#181
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1587.402)
        values[1]: LITERAL(2381.102)
        result: Var#498
    Expr_Assign
        var: Var#499<$pf>
        expr: Var#498
        result: Var#500
    Stmt_Jump
        target: Block#321

Block#182
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1190.551)
        values[1]: LITERAL(1587.402)
        result: Var#501
    Expr_Assign
        var: Var#502<$pf>
        expr: Var#501
        result: Var#503
    Stmt_Jump
        target: Block#321

Block#183
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(793.701)
        values[1]: LITERAL(1190.551)
        result: Var#504
    Expr_Assign
        var: Var#505<$pf>
        expr: Var#504
        result: Var#506
    Stmt_Jump
        target: Block#321

Block#184
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(595.276)
        values[1]: LITERAL(793.701)
        result: Var#507
    Expr_Assign
        var: Var#508<$pf>
        expr: Var#507
        result: Var#509
    Stmt_Jump
        target: Block#321

Block#185
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(396.85)
        values[1]: LITERAL(595.276)
        result: Var#510
    Expr_Assign
        var: Var#511<$pf>
        expr: Var#510
        result: Var#512
    Stmt_Jump
        target: Block#321

Block#186
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(297.638)
        values[1]: LITERAL(396.85)
        result: Var#513
    Expr_Assign
        var: Var#514<$pf>
        expr: Var#513
        result: Var#515
    Stmt_Jump
        target: Block#321

Block#187
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(198.425)
        values[1]: LITERAL(297.638)
        result: Var#516
    Expr_Assign
        var: Var#517<$pf>
        expr: Var#516
        result: Var#518
    Stmt_Jump
        target: Block#321

Block#188
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(147.402)
        values[1]: LITERAL(198.425)
        result: Var#519
    Expr_Assign
        var: Var#520<$pf>
        expr: Var#519
        result: Var#521
    Stmt_Jump
        target: Block#321

Block#189
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(99.213)
        values[1]: LITERAL(147.402)
        result: Var#522
    Expr_Assign
        var: Var#523<$pf>
        expr: Var#522
        result: Var#524
    Stmt_Jump
        target: Block#321

Block#190
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(73.701)
        values[1]: LITERAL(99.213)
        result: Var#525
    Expr_Assign
        var: Var#526<$pf>
        expr: Var#525
        result: Var#527
    Stmt_Jump
        target: Block#321

Block#191
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(99.213)
        values[1]: LITERAL(127.559)
        result: Var#528
    Expr_Assign
        var: Var#529<$pf>
        expr: Var#528
        result: Var#530
    Stmt_Jump
        target: Block#321

Block#192
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(233.858)
        values[1]: LITERAL(340.157)
        result: Var#531
    Expr_Assign
        var: Var#532<$pf>
        expr: Var#531
        result: Var#533
    Stmt_Jump
        target: Block#321

Block#193
    Parent: Block#1
    Stmt_Jump
        target: Block#194

Block#194
    Parent: Block#1
    Parent: Block#193
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(252.283)
        values[1]: LITERAL(360.0)
        result: Var#534
    Expr_Assign
        var: Var#535<$pf>
        expr: Var#534
        result: Var#536
    Stmt_Jump
        target: Block#321

Block#195
    Parent: Block#1
    Stmt_Jump
        target: Block#196

Block#196
    Parent: Block#1
    Parent: Block#195
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(289.134)
        values[1]: LITERAL(430.866)
        result: Var#537
    Expr_Assign
        var: Var#538<$pf>
        expr: Var#537
        result: Var#539
    Stmt_Jump
        target: Block#321

Block#197
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(340.157)
        values[1]: LITERAL(430.866)
        result: Var#540
    Expr_Assign
        var: Var#541<$pf>
        expr: Var#540
        result: Var#542
    Stmt_Jump
        target: Block#321

Block#198
    Parent: Block#1
    Stmt_Jump
        target: Block#199

Block#199
    Parent: Block#1
    Parent: Block#198
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(360.0)
        values[1]: LITERAL(504.567)
        result: Var#543
    Expr_Assign
        var: Var#544<$pf>
        expr: Var#543
        result: Var#545
    Stmt_Jump
        target: Block#321

Block#200
    Parent: Block#1
    Stmt_Jump
        target: Block#201

Block#201
    Parent: Block#1
    Parent: Block#200
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(430.866)
        values[1]: LITERAL(575.433)
        result: Var#546
    Expr_Assign
        var: Var#547<$pf>
        expr: Var#546
        result: Var#548
    Stmt_Jump
        target: Block#321

Block#202
    Parent: Block#1
    Stmt_Jump
        target: Block#203

Block#203
    Parent: Block#1
    Parent: Block#202
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(575.433)
        values[1]: LITERAL(720.0)
        result: Var#549
    Expr_Assign
        var: Var#550<$pf>
        expr: Var#549
        result: Var#551
    Stmt_Jump
        target: Block#321

Block#204
    Parent: Block#1
    Stmt_Jump
        target: Block#205

Block#205
    Parent: Block#1
    Parent: Block#204
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(575.433)
        values[1]: LITERAL(864.567)
        result: Var#552
    Expr_Assign
        var: Var#553<$pf>
        expr: Var#552
        result: Var#554
    Stmt_Jump
        target: Block#321

Block#206
    Parent: Block#1
    Stmt_Jump
        target: Block#207

Block#207
    Parent: Block#1
    Parent: Block#206
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(720.0)
        values[1]: LITERAL(864.567)
        result: Var#555
    Expr_Assign
        var: Var#556<$pf>
        expr: Var#555
        result: Var#557
    Stmt_Jump
        target: Block#321

Block#208
    Parent: Block#1
    Stmt_Jump
        target: Block#209

Block#209
    Parent: Block#1
    Parent: Block#208
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(720.0)
        values[1]: LITERAL(1080.0)
        result: Var#558
    Expr_Assign
        var: Var#559<$pf>
        expr: Var#558
        result: Var#560
    Stmt_Jump
        target: Block#321

Block#210
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(790.866)
        values[1]: LITERAL(1009.134)
        result: Var#561
    Expr_Assign
        var: Var#562<$pf>
        expr: Var#561
        result: Var#563
    Stmt_Jump
        target: Block#321

Block#211
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(790.866)
        values[1]: LITERAL(1224.567)
        result: Var#564
    Expr_Assign
        var: Var#565<$pf>
        expr: Var#564
        result: Var#566
    Stmt_Jump
        target: Block#321

Block#212
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(864.567)
        values[1]: LITERAL(1080.0)
        result: Var#567
    Expr_Assign
        var: Var#568<$pf>
        expr: Var#567
        result: Var#569
    Stmt_Jump
        target: Block#321

Block#213
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(864.567)
        values[1]: LITERAL(1292.598)
        result: Var#570
    Expr_Assign
        var: Var#571<$pf>
        expr: Var#570
        result: Var#572
    Stmt_Jump
        target: Block#321

Block#214
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2125.984)
        values[1]: LITERAL(1700.787)
        result: Var#573
    Expr_Assign
        var: Var#574<$pf>
        expr: Var#573
        result: Var#575
    Stmt_Jump
        target: Block#321

Block#215
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1332.283)
        values[1]: LITERAL(892.913)
        result: Var#576
    Expr_Assign
        var: Var#577<$pf>
        expr: Var#576
        result: Var#578
    Stmt_Jump
        target: Block#321

Block#216
    Parent: Block#1
    Stmt_Jump
        target: Block#217

Block#217
    Parent: Block#1
    Parent: Block#216
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1218.898)
        values[1]: LITERAL(793.701)
        result: Var#579
    Expr_Assign
        var: Var#580<$pf>
        expr: Var#579
        result: Var#581
    Stmt_Jump
        target: Block#321

Block#218
    Parent: Block#1
    Stmt_Jump
        target: Block#219

Block#219
    Parent: Block#1
    Parent: Block#218
    Stmt_Jump
        target: Block#220

Block#220
    Parent: Block#1
    Parent: Block#219
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(153.014)
        values[1]: LITERAL(242.646)
        result: Var#582
    Expr_Assign
        var: Var#583<$pf>
        expr: Var#582
        result: Var#584
    Stmt_Jump
        target: Block#321

Block#221
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(147.402)
        values[1]: LITERAL(209.764)
        result: Var#585
    Expr_Assign
        var: Var#586<$pf>
        expr: Var#585
        result: Var#587
    Stmt_Jump
        target: Block#321

Block#222
    Parent: Block#1
    Stmt_Jump
        target: Block#223

Block#223
    Parent: Block#1
    Parent: Block#222
    Stmt_Jump
        target: Block#224

Block#224
    Parent: Block#1
    Parent: Block#223
    Stmt_Jump
        target: Block#225

Block#225
    Parent: Block#1
    Parent: Block#224
    Stmt_Jump
        target: Block#226

Block#226
    Parent: Block#1
    Parent: Block#225
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(155.906)
        values[1]: LITERAL(240.945)
        result: Var#588
    Expr_Assign
        var: Var#589<$pf>
        expr: Var#588
        result: Var#590
    Stmt_Jump
        target: Block#321

Block#227
    Parent: Block#1
    Stmt_Jump
        target: Block#228

Block#228
    Parent: Block#1
    Parent: Block#227
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(144.567)
        values[1]: LITERAL(252.283)
        result: Var#591
    Expr_Assign
        var: Var#592<$pf>
        expr: Var#591
        result: Var#593
    Stmt_Jump
        target: Block#321

Block#229
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(155.906)
        values[1]: LITERAL(257.953)
        result: Var#594
    Expr_Assign
        var: Var#595<$pf>
        expr: Var#594
        result: Var#596
    Stmt_Jump
        target: Block#321

Block#230
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(153.071)
        values[1]: LITERAL(255.118)
        result: Var#597
    Expr_Assign
        var: Var#598<$pf>
        expr: Var#597
        result: Var#599
    Stmt_Jump
        target: Block#321

Block#231
    Parent: Block#1
    Stmt_Jump
        target: Block#232

Block#232
    Parent: Block#1
    Parent: Block#231
    Stmt_Jump
        target: Block#233

Block#233
    Parent: Block#1
    Parent: Block#232
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(155.906)
        values[1]: LITERAL(255.118)
        result: Var#600
    Expr_Assign
        var: Var#601<$pf>
        expr: Var#600
        result: Var#602
    Stmt_Jump
        target: Block#321

Block#234
    Parent: Block#1
    Stmt_Jump
        target: Block#235

Block#235
    Parent: Block#1
    Parent: Block#234
    Stmt_Jump
        target: Block#236

Block#236
    Parent: Block#1
    Parent: Block#235
    Stmt_Jump
        target: Block#237

Block#237
    Parent: Block#1
    Parent: Block#236
    Stmt_Jump
        target: Block#238

Block#238
    Parent: Block#1
    Parent: Block#237
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(141.732)
        values[1]: LITERAL(255.118)
        result: Var#603
    Expr_Assign
        var: Var#604<$pf>
        expr: Var#603
        result: Var#605
    Stmt_Jump
        target: Block#321

Block#239
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2880.0)
        values[1]: LITERAL(4320.0)
        result: Var#606
    Expr_Assign
        var: Var#607<$pf>
        expr: Var#606
        result: Var#608
    Stmt_Jump
        target: Block#321

Block#240
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(3401.575)
        values[1]: LITERAL(5102.362)
        result: Var#609
    Expr_Assign
        var: Var#610<$pf>
        expr: Var#609
        result: Var#611
    Stmt_Jump
        target: Block#321

Block#241
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(8640.0)
        values[1]: LITERAL(4320.0)
        result: Var#612
    Expr_Assign
        var: Var#613<$pf>
        expr: Var#612
        result: Var#614
    Stmt_Jump
        target: Block#321

Block#242
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(5760.0)
        values[1]: LITERAL(8640.0)
        result: Var#615
    Expr_Assign
        var: Var#616<$pf>
        expr: Var#615
        result: Var#617
    Stmt_Jump
        target: Block#321

Block#243
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(11520.0)
        values[1]: LITERAL(8640.0)
        result: Var#618
    Expr_Assign
        var: Var#619<$pf>
        expr: Var#618
        result: Var#620
    Stmt_Jump
        target: Block#321

Block#244
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(17280.0)
        values[1]: LITERAL(8640.0)
        result: Var#621
    Expr_Assign
        var: Var#622<$pf>
        expr: Var#621
        result: Var#623
    Stmt_Jump
        target: Block#321

Block#245
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(23040.0)
        values[1]: LITERAL(8640.0)
        result: Var#624
    Expr_Assign
        var: Var#625<$pf>
        expr: Var#624
        result: Var#626
    Stmt_Jump
        target: Block#321

Block#246
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(34560.0)
        values[1]: LITERAL(8640.0)
        result: Var#627
    Expr_Assign
        var: Var#628<$pf>
        expr: Var#627
        result: Var#629
    Stmt_Jump
        target: Block#321

Block#247
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(3456.0)
        values[1]: LITERAL(5184.0)
        result: Var#630
    Expr_Assign
        var: Var#631<$pf>
        expr: Var#630
        result: Var#632
    Stmt_Jump
        target: Block#321

Block#248
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2232.0)
        values[1]: LITERAL(3816.0)
        result: Var#633
    Expr_Assign
        var: Var#634<$pf>
        expr: Var#633
        result: Var#635
    Stmt_Jump
        target: Block#321

Block#249
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2070.0)
        values[1]: LITERAL(3024.0)
        result: Var#636
    Expr_Assign
        var: Var#637<$pf>
        expr: Var#636
        result: Var#638
    Stmt_Jump
        target: Block#321

Block#250
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1926.0)
        values[1]: LITERAL(2880.0)
        result: Var#639
    Expr_Assign
        var: Var#640<$pf>
        expr: Var#639
        result: Var#641
    Stmt_Jump
        target: Block#321

Block#251
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1872.0)
        values[1]: LITERAL(2448.0)
        result: Var#642
    Expr_Assign
        var: Var#643<$pf>
        expr: Var#642
        result: Var#644
    Stmt_Jump
        target: Block#321

Block#252
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1692.0)
        values[1]: LITERAL(2484.0)
        result: Var#645
    Expr_Assign
        var: Var#646<$pf>
        expr: Var#645
        result: Var#647
    Stmt_Jump
        target: Block#321

Block#253
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1656.0)
        values[1]: LITERAL(2016.0)
        result: Var#648
    Expr_Assign
        var: Var#649<$pf>
        expr: Var#648
        result: Var#650
    Stmt_Jump
        target: Block#321

Block#254
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1620.0)
        values[1]: LITERAL(2556.0)
        result: Var#651
    Expr_Assign
        var: Var#652<$pf>
        expr: Var#651
        result: Var#653
    Stmt_Jump
        target: Block#321

Block#255
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1584.0)
        values[1]: LITERAL(2160.0)
        result: Var#654
    Expr_Assign
        var: Var#655<$pf>
        expr: Var#654
        result: Var#656
    Stmt_Jump
        target: Block#321

Block#256
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1548.0)
        values[1]: LITERAL(2016.0)
        result: Var#657
    Expr_Assign
        var: Var#658<$pf>
        expr: Var#657
        result: Var#659
    Stmt_Jump
        target: Block#321

Block#257
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1512.0)
        values[1]: LITERAL(1872.0)
        result: Var#660
    Expr_Assign
        var: Var#661<$pf>
        expr: Var#660
        result: Var#662
    Stmt_Jump
        target: Block#321

Block#258
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1512.0)
        values[1]: LITERAL(2376.0)
        result: Var#663
    Expr_Assign
        var: Var#664<$pf>
        expr: Var#663
        result: Var#665
    Stmt_Jump
        target: Block#321

Block#259
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1440.0)
        values[1]: LITERAL(1800.0)
        result: Var#666
    Expr_Assign
        var: Var#667<$pf>
        expr: Var#666
        result: Var#668
    Stmt_Jump
        target: Block#321

Block#260
    Parent: Block#1
    Stmt_Jump
        target: Block#261

Block#261
    Parent: Block#1
    Parent: Block#260
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1404.0)
        values[1]: LITERAL(1692.0)
        result: Var#669
    Expr_Assign
        var: Var#670<$pf>
        expr: Var#669
        result: Var#671
    Stmt_Jump
        target: Block#321

Block#262
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1368.0)
        values[1]: LITERAL(1944.0)
        result: Var#672
    Expr_Assign
        var: Var#673<$pf>
        expr: Var#672
        result: Var#674
    Stmt_Jump
        target: Block#321

Block#263
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1368.0)
        values[1]: LITERAL(2196.0)
        result: Var#675
    Expr_Assign
        var: Var#676<$pf>
        expr: Var#675
        result: Var#677
    Stmt_Jump
        target: Block#321

Block#264
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1260.0)
        values[1]: LITERAL(1656.0)
        result: Var#678
    Expr_Assign
        var: Var#679<$pf>
        expr: Var#678
        result: Var#680
    Stmt_Jump
        target: Block#321

Block#265
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1260.0)
        values[1]: LITERAL(1620.0)
        result: Var#681
    Expr_Assign
        var: Var#682<$pf>
        expr: Var#681
        result: Var#683
    Stmt_Jump
        target: Block#321

Block#266
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1188.0)
        values[1]: LITERAL(1512.0)
        result: Var#684
    Expr_Assign
        var: Var#685<$pf>
        expr: Var#684
        result: Var#686
    Stmt_Jump
        target: Block#321

Block#267
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1152.0)
        values[1]: LITERAL(1440.0)
        result: Var#687
    Expr_Assign
        var: Var#688<$pf>
        expr: Var#687
        result: Var#689
    Stmt_Jump
        target: Block#321

Block#268
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1116.0)
        values[1]: LITERAL(1386.0)
        result: Var#690
    Expr_Assign
        var: Var#691<$pf>
        expr: Var#690
        result: Var#692
    Stmt_Jump
        target: Block#321

Block#269
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1080.0)
        values[1]: LITERAL(1440.0)
        result: Var#693
    Expr_Assign
        var: Var#694<$pf>
        expr: Var#693
        result: Var#695
    Stmt_Jump
        target: Block#321

Block#270
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1062.0)
        values[1]: LITERAL(1332.0)
        result: Var#696
    Expr_Assign
        var: Var#697<$pf>
        expr: Var#696
        result: Var#698
    Stmt_Jump
        target: Block#321

Block#271
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(972.0)
        values[1]: LITERAL(1152.0)
        result: Var#699
    Expr_Assign
        var: Var#700<$pf>
        expr: Var#699
        result: Var#701
    Stmt_Jump
        target: Block#321

Block#272
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(972.0)
        values[1]: LITERAL(1224.0)
        result: Var#702
    Expr_Assign
        var: Var#703<$pf>
        expr: Var#702
        result: Var#704
    Stmt_Jump
        target: Block#321

Block#273
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(954.0)
        values[1]: LITERAL(1188.0)
        result: Var#705
    Expr_Assign
        var: Var#706<$pf>
        expr: Var#705
        result: Var#707
    Stmt_Jump
        target: Block#321

Block#274
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(900.0)
        values[1]: LITERAL(1080.0)
        result: Var#708
    Expr_Assign
        var: Var#709<$pf>
        expr: Var#708
        result: Var#710
    Stmt_Jump
        target: Block#321

Block#275
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1984.252)
        values[1]: LITERAL(2948.031)
        result: Var#711
    Expr_Assign
        var: Var#712<$pf>
        expr: Var#711
        result: Var#713
    Stmt_Jump
        target: Block#321

Block#276
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1757.48)
        values[1]: LITERAL(2409.449)
        result: Var#714
    Expr_Assign
        var: Var#715<$pf>
        expr: Var#714
        result: Var#716
    Stmt_Jump
        target: Block#321

Block#277
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1757.48)
        values[1]: LITERAL(2607.874)
        result: Var#717
    Expr_Assign
        var: Var#718<$pf>
        expr: Var#717
        result: Var#719
    Stmt_Jump
        target: Block#321

Block#278
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1746.142)
        values[1]: LITERAL(2182.677)
        result: Var#720
    Expr_Assign
        var: Var#721<$pf>
        expr: Var#720
        result: Var#722
    Stmt_Jump
        target: Block#321

Block#279
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1700.787)
        values[1]: LITERAL(2381.102)
        result: Var#723
    Expr_Assign
        var: Var#724<$pf>
        expr: Var#723
        result: Var#725
    Stmt_Jump
        target: Block#321

Block#280
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1559.055)
        values[1]: LITERAL(2069.291)
        result: Var#726
    Expr_Assign
        var: Var#727<$pf>
        expr: Var#726
        result: Var#728
    Stmt_Jump
        target: Block#321

Block#281
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1530.709)
        values[1]: LITERAL(2069.291)
        result: Var#729
    Expr_Assign
        var: Var#730<$pf>
        expr: Var#729
        result: Var#731
    Stmt_Jump
        target: Block#321

Block#282
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1417.323)
        values[1]: LITERAL(1842.52)
        result: Var#732
    Expr_Assign
        var: Var#733<$pf>
        expr: Var#732
        result: Var#734
    Stmt_Jump
        target: Block#321

Block#283
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1303.937)
        values[1]: LITERAL(1714.961)
        result: Var#735
    Expr_Assign
        var: Var#736<$pf>
        expr: Var#735
        result: Var#737
    Stmt_Jump
        target: Block#321

Block#284
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1233.071)
        values[1]: LITERAL(1601.575)
        result: Var#738
    Expr_Assign
        var: Var#739<$pf>
        expr: Var#738
        result: Var#740
    Stmt_Jump
        target: Block#321

Block#285
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1218.898)
        values[1]: LITERAL(1587.402)
        result: Var#741
    Expr_Assign
        var: Var#742<$pf>
        expr: Var#741
        result: Var#743
    Stmt_Jump
        target: Block#321

Block#286
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1176.378)
        values[1]: LITERAL(1502.362)
        result: Var#744
    Expr_Assign
        var: Var#745<$pf>
        expr: Var#744
        result: Var#746
    Stmt_Jump
        target: Block#321

Block#287
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1020.472)
        values[1]: LITERAL(1303.937)
        result: Var#747
    Expr_Assign
        var: Var#748<$pf>
        expr: Var#747
        result: Var#749
    Stmt_Jump
        target: Block#321

Block#288
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(977.953)
        values[1]: LITERAL(1218.898)
        result: Var#750
    Expr_Assign
        var: Var#751<$pf>
        expr: Var#750
        result: Var#752
    Stmt_Jump
        target: Block#321

Block#289
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(898.583)
        values[1]: LITERAL(1125.354)
        result: Var#753
    Expr_Assign
        var: Var#754<$pf>
        expr: Var#753
        result: Var#755
    Stmt_Jump
        target: Block#321

Block#290
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(870.236)
        values[1]: LITERAL(1088.504)
        result: Var#756
    Expr_Assign
        var: Var#757<$pf>
        expr: Var#756
        result: Var#758
    Stmt_Jump
        target: Block#321

Block#291
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(765.354)
        values[1]: LITERAL(983.622)
        result: Var#759
    Expr_Assign
        var: Var#760<$pf>
        expr: Var#759
        result: Var#761
    Stmt_Jump
        target: Block#321

Block#292
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2834.646)
        values[1]: LITERAL(3685.039)
        result: Var#762
    Expr_Assign
        var: Var#763<$pf>
        expr: Var#762
        result: Var#764
    Stmt_Jump
        target: Block#321

Block#293
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2551.181)
        values[1]: LITERAL(3571.654)
        result: Var#765
    Expr_Assign
        var: Var#766<$pf>
        expr: Var#765
        result: Var#767
    Stmt_Jump
        target: Block#321

Block#294
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2551.181)
        values[1]: LITERAL(3571.654)
        result: Var#768
    Expr_Assign
        var: Var#769<$pf>
        expr: Var#768
        result: Var#770
    Stmt_Jump
        target: Block#321

Block#295
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2267.717)
        values[1]: LITERAL(3401.575)
        result: Var#771
    Expr_Assign
        var: Var#772<$pf>
        expr: Var#771
        result: Var#773
    Stmt_Jump
        target: Block#321

Block#296
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2154.331)
        values[1]: LITERAL(3174.803)
        result: Var#774
    Expr_Assign
        var: Var#775<$pf>
        expr: Var#774
        result: Var#776
    Stmt_Jump
        target: Block#321

Block#297
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(2125.984)
        values[1]: LITERAL(3004.724)
        result: Var#777
    Expr_Assign
        var: Var#778<$pf>
        expr: Var#777
        result: Var#779
    Stmt_Jump
        target: Block#321

Block#298
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1984.252)
        values[1]: LITERAL(2664.567)
        result: Var#780
    Expr_Assign
        var: Var#781<$pf>
        expr: Var#780
        result: Var#782
    Stmt_Jump
        target: Block#321

Block#299
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1842.52)
        values[1]: LITERAL(2834.646)
        result: Var#783
    Expr_Assign
        var: Var#784<$pf>
        expr: Var#783
        result: Var#785
    Stmt_Jump
        target: Block#321

Block#300
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1842.52)
        values[1]: LITERAL(2664.567)
        result: Var#786
    Expr_Assign
        var: Var#787<$pf>
        expr: Var#786
        result: Var#788
    Stmt_Jump
        target: Block#321

Block#301
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1785.827)
        values[1]: LITERAL(2551.181)
        result: Var#789
    Expr_Assign
        var: Var#790<$pf>
        expr: Var#789
        result: Var#791
    Stmt_Jump
        target: Block#321

Block#302
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1757.48)
        values[1]: LITERAL(2607.874)
        result: Var#792
    Expr_Assign
        var: Var#793<$pf>
        expr: Var#792
        result: Var#794
    Stmt_Jump
        target: Block#321

Block#303
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1700.787)
        values[1]: LITERAL(2267.717)
        result: Var#795
    Expr_Assign
        var: Var#796<$pf>
        expr: Var#795
        result: Var#797
    Stmt_Jump
        target: Block#321

Block#304
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1700.787)
        values[1]: LITERAL(2267.717)
        result: Var#798
    Expr_Assign
        var: Var#799<$pf>
        expr: Var#798
        result: Var#800
    Stmt_Jump
        target: Block#321

Block#305
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1587.402)
        values[1]: LITERAL(2551.181)
        result: Var#801
    Expr_Assign
        var: Var#802<$pf>
        expr: Var#801
        result: Var#803
    Stmt_Jump
        target: Block#321

Block#306
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1587.402)
        values[1]: LITERAL(2494.488)
        result: Var#804
    Expr_Assign
        var: Var#805<$pf>
        expr: Var#804
        result: Var#806
    Stmt_Jump
        target: Block#321

Block#307
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1587.402)
        values[1]: LITERAL(2154.331)
        result: Var#807
    Expr_Assign
        var: Var#808<$pf>
        expr: Var#807
        result: Var#809
    Stmt_Jump
        target: Block#321

Block#308
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1417.323)
        values[1]: LITERAL(1842.52)
        result: Var#810
    Expr_Assign
        var: Var#811<$pf>
        expr: Var#810
        result: Var#812
    Stmt_Jump
        target: Block#321

Block#309
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1303.937)
        values[1]: LITERAL(1757.48)
        result: Var#813
    Expr_Assign
        var: Var#814<$pf>
        expr: Var#813
        result: Var#815
    Stmt_Jump
        target: Block#321

Block#310
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1303.937)
        values[1]: LITERAL(2040.945)
        result: Var#816
    Expr_Assign
        var: Var#817<$pf>
        expr: Var#816
        result: Var#818
    Stmt_Jump
        target: Block#321

Block#311
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1275.591)
        values[1]: LITERAL(1587.402)
        result: Var#819
    Expr_Assign
        var: Var#820<$pf>
        expr: Var#819
        result: Var#821
    Stmt_Jump
        target: Block#321

Block#312
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1247.244)
        values[1]: LITERAL(1587.402)
        result: Var#822
    Expr_Assign
        var: Var#823<$pf>
        expr: Var#822
        result: Var#824
    Stmt_Jump
        target: Block#321

Block#313
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1247.244)
        values[1]: LITERAL(1927.559)
        result: Var#825
    Expr_Assign
        var: Var#826<$pf>
        expr: Var#825
        result: Var#827
    Stmt_Jump
        target: Block#321

Block#314
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1133.858)
        values[1]: LITERAL(1700.787)
        result: Var#828
    Expr_Assign
        var: Var#829<$pf>
        expr: Var#828
        result: Var#830
    Stmt_Jump
        target: Block#321

Block#315
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1133.858)
        values[1]: LITERAL(1757.48)
        result: Var#831
    Expr_Assign
        var: Var#832<$pf>
        expr: Var#831
        result: Var#833
    Stmt_Jump
        target: Block#321

Block#316
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1133.858)
        values[1]: LITERAL(1474.016)
        result: Var#834
    Expr_Assign
        var: Var#835<$pf>
        expr: Var#834
        result: Var#836
    Stmt_Jump
        target: Block#321

Block#317
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(1020.472)
        values[1]: LITERAL(1303.937)
        result: Var#837
    Expr_Assign
        var: Var#838<$pf>
        expr: Var#837
        result: Var#839
    Stmt_Jump
        target: Block#321

Block#318
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(963.78)
        values[1]: LITERAL(1247.244)
        result: Var#840
    Expr_Assign
        var: Var#841<$pf>
        expr: Var#840
        result: Var#842
    Stmt_Jump
        target: Block#321

Block#319
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(878.74)
        values[1]: LITERAL(1133.858)
        result: Var#843
    Expr_Assign
        var: Var#844<$pf>
        expr: Var#843
        result: Var#845
    Stmt_Jump
        target: Block#321

Block#320
    Parent: Block#1
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(595.276)
        values[1]: LITERAL(841.89)
        result: Var#846
    Expr_Assign
        var: Var#847<$pf>
        expr: Var#846
        result: Var#848
    Stmt_Jump
        target: Block#321

Block#321
    Parent: Block#2
    Parent: Block#3
    Parent: Block#4
    Parent: Block#5
    Parent: Block#6
    Parent: Block#7
    Parent: Block#8
    Parent: Block#9
    Parent: Block#10
    Parent: Block#11
    Parent: Block#12
    Parent: Block#13
    Parent: Block#14
    Parent: Block#15
    Parent: Block#16
    Parent: Block#17
    Parent: Block#18
    Parent: Block#19
    Parent: Block#20
    Parent: Block#21
    Parent: Block#22
    Parent: Block#23
    Parent: Block#24
    Parent: Block#25
    Parent: Block#26
    Parent: Block#27
    Parent: Block#28
    Parent: Block#29
    Parent: Block#30
    Parent: Block#31
    Parent: Block#32
    Parent: Block#33
    Parent: Block#34
    Parent: Block#35
    Parent: Block#36
    Parent: Block#37
    Parent: Block#38
    Parent: Block#39
    Parent: Block#40
    Parent: Block#41
    Parent: Block#42
    Parent: Block#43
    Parent: Block#44
    Parent: Block#45
    Parent: Block#46
    Parent: Block#47
    Parent: Block#48
    Parent: Block#49
    Parent: Block#50
    Parent: Block#51
    Parent: Block#52
    Parent: Block#53
    Parent: Block#54
    Parent: Block#55
    Parent: Block#56
    Parent: Block#57
    Parent: Block#58
    Parent: Block#59
    Parent: Block#60
    Parent: Block#61
    Parent: Block#62
    Parent: Block#63
    Parent: Block#64
    Parent: Block#65
    Parent: Block#66
    Parent: Block#67
    Parent: Block#68
    Parent: Block#69
    Parent: Block#70
    Parent: Block#71
    Parent: Block#72
    Parent: Block#73
    Parent: Block#74
    Parent: Block#75
    Parent: Block#76
    Parent: Block#77
    Parent: Block#78
    Parent: Block#79
    Parent: Block#80
    Parent: Block#81
    Parent: Block#82
    Parent: Block#83
    Parent: Block#84
    Parent: Block#85
    Parent: Block#86
    Parent: Block#87
    Parent: Block#88
    Parent: Block#89
    Parent: Block#90
    Parent: Block#91
    Parent: Block#92
    Parent: Block#93
    Parent: Block#94
    Parent: Block#95
    Parent: Block#96
    Parent: Block#97
    Parent: Block#99
    Parent: Block#103
    Parent: Block#106
    Parent: Block#108
    Parent: Block#110
    Parent: Block#112
    Parent: Block#113
    Parent: Block#114
    Parent: Block#115
    Parent: Block#117
    Parent: Block#119
    Parent: Block#122
    Parent: Block#123
    Parent: Block#124
    Parent: Block#125
    Parent: Block#126
    Parent: Block#127
    Parent: Block#128
    Parent: Block#129
    Parent: Block#130
    Parent: Block#131
    Parent: Block#132
    Parent: Block#133
    Parent: Block#134
    Parent: Block#136
    Parent: Block#137
    Parent: Block#138
    Parent: Block#139
    Parent: Block#140
    Parent: Block#141
    Parent: Block#142
    Parent: Block#143
    Parent: Block#144
    Parent: Block#145
    Parent: Block#146
    Parent: Block#147
    Parent: Block#148
    Parent: Block#149
    Parent: Block#150
    Parent: Block#151
    Parent: Block#152
    Parent: Block#153
    Parent: Block#154
    Parent: Block#155
    Parent: Block#156
    Parent: Block#157
    Parent: Block#158
    Parent: Block#159
    Parent: Block#160
    Parent: Block#161
    Parent: Block#162
    Parent: Block#163
    Parent: Block#164
    Parent: Block#165
    Parent: Block#166
    Parent: Block#167
    Parent: Block#168
    Parent: Block#169
    Parent: Block#170
    Parent: Block#171
    Parent: Block#172
    Parent: Block#173
    Parent: Block#174
    Parent: Block#175
    Parent: Block#176
    Parent: Block#177
    Parent: Block#178
    Parent: Block#179
    Parent: Block#180
    Parent: Block#181
    Parent: Block#182
    Parent: Block#183
    Parent: Block#184
    Parent: Block#185
    Parent: Block#186
    Parent: Block#187
    Parent: Block#188
    Parent: Block#189
    Parent: Block#190
    Parent: Block#191
    Parent: Block#192
    Parent: Block#194
    Parent: Block#196
    Parent: Block#197
    Parent: Block#199
    Parent: Block#201
    Parent: Block#203
    Parent: Block#205
    Parent: Block#207
    Parent: Block#209
    Parent: Block#210
    Parent: Block#211
    Parent: Block#212
    Parent: Block#213
    Parent: Block#214
    Parent: Block#215
    Parent: Block#217
    Parent: Block#220
    Parent: Block#221
    Parent: Block#226
    Parent: Block#228
    Parent: Block#229
    Parent: Block#230
    Parent: Block#233
    Parent: Block#238
    Parent: Block#239
    Parent: Block#240
    Parent: Block#241
    Parent: Block#242
    Parent: Block#243
    Parent: Block#244
    Parent: Block#245
    Parent: Block#246
    Parent: Block#247
    Parent: Block#248
    Parent: Block#249
    Parent: Block#250
    Parent: Block#251
    Parent: Block#252
    Parent: Block#253
    Parent: Block#254
    Parent: Block#255
    Parent: Block#256
    Parent: Block#257
    Parent: Block#258
    Parent: Block#259
    Parent: Block#261
    Parent: Block#262
    Parent: Block#263
    Parent: Block#264
    Parent: Block#265
    Parent: Block#266
    Parent: Block#267
    Parent: Block#268
    Parent: Block#269
    Parent: Block#270
    Parent: Block#271
    Parent: Block#272
    Parent: Block#273
    Parent: Block#274
    Parent: Block#275
    Parent: Block#276
    Parent: Block#277
    Parent: Block#278
    Parent: Block#279
    Parent: Block#280
    Parent: Block#281
    Parent: Block#282
    Parent: Block#283
    Parent: Block#284
    Parent: Block#285
    Parent: Block#286
    Parent: Block#287
    Parent: Block#288
    Parent: Block#289
    Parent: Block#290
    Parent: Block#291
    Parent: Block#292
    Parent: Block#293
    Parent: Block#294
    Parent: Block#295
    Parent: Block#296
    Parent: Block#297
    Parent: Block#298
    Parent: Block#299
    Parent: Block#300
    Parent: Block#301
    Parent: Block#302
    Parent: Block#303
    Parent: Block#304
    Parent: Block#305
    Parent: Block#306
    Parent: Block#307
    Parent: Block#308
    Parent: Block#309
    Parent: Block#310
    Parent: Block#311
    Parent: Block#312
    Parent: Block#313
    Parent: Block#314
    Parent: Block#315
    Parent: Block#316
    Parent: Block#317
    Parent: Block#318
    Parent: Block#319
    Parent: Block#320
    Var#849<$pf> = Phi(Var#850<$pf>, Var#4<$pf>, Var#7<$pf>, Var#10<$pf>, Var#13<$pf>, Var#16<$pf>, Var#19<$pf>, Var#22<$pf>, Var#25<$pf>, Var#28<$pf>, Var#31<$pf>, Var#34<$pf>, Var#37<$pf>, Var#40<$pf>, Var#43<$pf>, Var#46<$pf>, Var#49<$pf>, Var#52<$pf>, Var#55<$pf>, Var#58<$pf>, Var#61<$pf>, Var#64<$pf>, Var#67<$pf>, Var#70<$pf>, Var#73<$pf>, Var#76<$pf>, Var#79<$pf>, Var#82<$pf>, Var#85<$pf>, Var#88<$pf>, Var#91<$pf>, Var#94<$pf>, Var#97<$pf>, Var#100<$pf>, Var#103<$pf>, Var#106<$pf>, Var#109<$pf>, Var#112<$pf>, Var#115<$pf>, Var#118<$pf>, Var#121<$pf>, Var#124<$pf>, Var#127<$pf>, Var#130<$pf>, Var#133<$pf>, Var#136<$pf>, Var#139<$pf>, Var#142<$pf>, Var#145<$pf>, Var#148<$pf>, Var#151<$pf>, Var#154<$pf>, Var#157<$pf>, Var#160<$pf>, Var#163<$pf>, Var#166<$pf>, Var#169<$pf>, Var#172<$pf>, Var#175<$pf>, Var#178<$pf>, Var#181<$pf>, Var#184<$pf>, Var#187<$pf>, Var#190<$pf>, Var#193<$pf>, Var#196<$pf>, Var#199<$pf>, Var#202<$pf>, Var#205<$pf>, Var#208<$pf>, Var#211<$pf>, Var#214<$pf>, Var#217<$pf>, Var#220<$pf>, Var#223<$pf>, Var#226<$pf>, Var#229<$pf>, Var#232<$pf>, Var#235<$pf>, Var#238<$pf>, Var#241<$pf>, Var#244<$pf>, Var#247<$pf>, Var#250<$pf>, Var#253<$pf>, Var#256<$pf>, Var#259<$pf>, Var#262<$pf>, Var#265<$pf>, Var#268<$pf>, Var#271<$pf>, Var#274<$pf>, Var#277<$pf>, Var#280<$pf>, Var#283<$pf>, Var#286<$pf>, Var#289<$pf>, Var#292<$pf>, Var#295<$pf>, Var#298<$pf>, Var#301<$pf>, Var#304<$pf>, Var#307<$pf>, Var#310<$pf>, Var#313<$pf>, Var#316<$pf>, Var#319<$pf>, Var#322<$pf>, Var#325<$pf>, Var#328<$pf>, Var#331<$pf>, Var#334<$pf>, Var#337<$pf>, Var#340<$pf>, Var#343<$pf>, Var#346<$pf>, Var#349<$pf>, Var#352<$pf>, Var#355<$pf>, Var#358<$pf>, Var#361<$pf>, Var#364<$pf>, Var#367<$pf>, Var#370<$pf>, Var#373<$pf>, Var#376<$pf>, Var#379<$pf>, Var#382<$pf>, Var#385<$pf>, Var#388<$pf>, Var#391<$pf>, Var#394<$pf>, Var#397<$pf>, Var#400<$pf>, Var#403<$pf>, Var#406<$pf>, Var#409<$pf>, Var#412<$pf>, Var#415<$pf>, Var#418<$pf>, Var#421<$pf>, Var#424<$pf>, Var#427<$pf>, Var#430<$pf>, Var#433<$pf>, Var#436<$pf>, Var#439<$pf>, Var#442<$pf>, Var#445<$pf>, Var#448<$pf>, Var#451<$pf>, Var#454<$pf>, Var#457<$pf>, Var#460<$pf>, Var#463<$pf>, Var#466<$pf>, Var#469<$pf>, Var#472<$pf>, Var#475<$pf>, Var#478<$pf>, Var#481<$pf>, Var#484<$pf>, Var#487<$pf>, Var#490<$pf>, Var#493<$pf>, Var#496<$pf>, Var#499<$pf>, Var#502<$pf>, Var#505<$pf>, Var#508<$pf>, Var#511<$pf>, Var#514<$pf>, Var#517<$pf>, Var#520<$pf>, Var#523<$pf>, Var#526<$pf>, Var#529<$pf>, Var#532<$pf>, Var#535<$pf>, Var#538<$pf>, Var#541<$pf>, Var#544<$pf>, Var#547<$pf>, Var#550<$pf>, Var#553<$pf>, Var#556<$pf>, Var#559<$pf>, Var#562<$pf>, Var#565<$pf>, Var#568<$pf>, Var#571<$pf>, Var#574<$pf>, Var#577<$pf>, Var#580<$pf>, Var#583<$pf>, Var#586<$pf>, Var#589<$pf>, Var#592<$pf>, Var#595<$pf>, Var#598<$pf>, Var#601<$pf>, Var#604<$pf>, Var#607<$pf>, Var#610<$pf>, Var#613<$pf>, Var#616<$pf>, Var#619<$pf>, Var#622<$pf>, Var#625<$pf>, Var#628<$pf>, Var#631<$pf>, Var#634<$pf>, Var#637<$pf>, Var#640<$pf>, Var#643<$pf>, Var#646<$pf>, Var#649<$pf>, Var#652<$pf>, Var#655<$pf>, Var#658<$pf>, Var#661<$pf>, Var#664<$pf>, Var#667<$pf>, Var#670<$pf>, Var#673<$pf>, Var#676<$pf>, Var#679<$pf>, Var#682<$pf>, Var#685<$pf>, Var#688<$pf>, Var#691<$pf>, Var#694<$pf>, Var#697<$pf>, Var#700<$pf>, Var#703<$pf>, Var#706<$pf>, Var#709<$pf>, Var#712<$pf>, Var#715<$pf>, Var#718<$pf>, Var#721<$pf>, Var#724<$pf>, Var#727<$pf>, Var#730<$pf>, Var#733<$pf>, Var#736<$pf>, Var#739<$pf>, Var#742<$pf>, Var#745<$pf>, Var#748<$pf>, Var#751<$pf>, Var#754<$pf>, Var#757<$pf>, Var#760<$pf>, Var#763<$pf>, Var#766<$pf>, Var#769<$pf>, Var#772<$pf>, Var#775<$pf>, Var#778<$pf>, Var#781<$pf>, Var#784<$pf>, Var#787<$pf>, Var#790<$pf>, Var#793<$pf>, Var#796<$pf>, Var#799<$pf>, Var#802<$pf>, Var#805<$pf>, Var#808<$pf>, Var#811<$pf>, Var#814<$pf>, Var#817<$pf>, Var#820<$pf>, Var#823<$pf>, Var#826<$pf>, Var#829<$pf>, Var#832<$pf>, Var#835<$pf>, Var#838<$pf>, Var#841<$pf>, Var#844<$pf>, Var#847<$pf>)
    Terminal_Return
        expr: Var#849<$pf>

Function TCPDF_STATIC::setPageBoxes(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('page')
        result: Var#1<$page>
    Expr_Param
        declaredType: mixed
        name: LITERAL('type')
        result: Var#2<$type>
    Expr_Param
        declaredType: mixed
        name: LITERAL('llx')
        result: Var#3<$llx>
    Expr_Param
        declaredType: mixed
        name: LITERAL('lly')
        result: Var#4<$lly>
    Expr_Param
        declaredType: mixed
        name: LITERAL('urx')
        result: Var#5<$urx>
    Expr_Param
        declaredType: mixed
        name: LITERAL('ury')
        result: Var#6<$ury>
    Expr_Param
        declaredType: mixed
        name: LITERAL('points')
        defaultVar: Var#7
        result: Var#8<$points>
        defaultBlock: Block#2
    Expr_Param
        declaredType: mixed
        name: LITERAL('k')
        result: Var#9<$k>
    Expr_Param
        declaredType: mixed
        name: LITERAL('pagedim')
        defaultVar: Var#10
        result: Var#11<$pagedim>
        defaultBlock: Block#3
    Expr_ArrayDimFetch
        var: Var#11<$pagedim>
        dim: Var#1<$page>
        result: Var#12
    Expr_Isset
        vars[0]: Var#12
        result: Var#13
    Expr_BooleanNot
        expr: Var#13
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#7

Block#3
    Expr_Array
        result: Var#10

Block#4
    Parent: Block#1
    Var#15<$pagedim> = Phi(Var#11<$pagedim>)
    Var#16<$page> = Phi(Var#1<$page>)
    Expr_Array
        result: Var#17
    Expr_ArrayDimFetch
        var: Var#15<$pagedim>
        dim: Var#16<$page>
        result: Var#18
    Expr_Assign
        var: Var#18
        expr: Var#17
        result: Var#19
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#1
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#20<$type> = Phi(Var#2<$type>)
    Var#21<$points> = Phi(Var#8<$points>)
    Var#22<$llx> = Phi(Var#3<$llx>)
    Var#23<$k> = Phi(Var#9<$k>)
    Var#24<$pagedim> = Phi(Var#15<$pagedim>, Var#11<$pagedim>)
    Var#25<$page> = Phi(Var#16<$page>, Var#1<$page>)
    Var#26<$lly> = Phi(Var#4<$lly>)
    Var#27<$urx> = Phi(Var#5<$urx>)
    Var#28<$ury> = Phi(Var#6<$ury>)
    Expr_StaticPropertyFetch
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('pageboxes')
        result: Var#29
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#20<$type>
        args[1]: Var#29
        result: Var#30
    Expr_BooleanNot
        expr: Var#30
        result: Var#31
    Stmt_JumpIf
        cond: Var#31
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Terminal_Return

Block#8
    Parent: Block#6
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Var#32<$points> = Phi(Var#21<$points>)
    Var#33<$llx> = Phi(Var#22<$llx>)
    Var#34<$k> = Phi(Var#23<$k>)
    Var#35<$pagedim> = Phi(Var#24<$pagedim>)
    Var#36<$page> = Phi(Var#25<$page>)
    Var#37<$type> = Phi(Var#20<$type>)
    Var#38<$lly> = Phi(Var#26<$lly>)
    Var#39<$urx> = Phi(Var#27<$urx>)
    Var#40<$ury> = Phi(Var#28<$ury>)
    Stmt_JumpIf
        cond: Var#32<$points>
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Expr_Assign
        var: Var#41<$k>
        expr: LITERAL(1)
        result: Var#42
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#10
    Parent: Block#11
    Var#43<$llx> = Phi(Var#33<$llx>)
    Var#44<$k> = Phi(Var#41<$k>, Var#34<$k>)
    Var#45<$pagedim> = Phi(Var#35<$pagedim>)
    Var#46<$page> = Phi(Var#36<$page>)
    Var#47<$type> = Phi(Var#37<$type>)
    Var#48<$lly> = Phi(Var#38<$lly>)
    Var#49<$urx> = Phi(Var#39<$urx>)
    Var#50<$ury> = Phi(Var#40<$ury>)
    Expr_BinaryOp_Mul
        left: Var#43<$llx>
        right: Var#44<$k>
        result: Var#51
    Expr_ArrayDimFetch
        var: Var#45<$pagedim>
        dim: Var#46<$page>
        result: Var#52
    Expr_ArrayDimFetch
        var: Var#52
        dim: Var#47<$type>
        result: Var#53
    Expr_ArrayDimFetch
        var: Var#53
        dim: LITERAL('llx')
        result: Var#54
    Expr_Assign
        var: Var#54
        expr: Var#51
        result: Var#55
    Expr_BinaryOp_Mul
        left: Var#48<$lly>
        right: Var#44<$k>
        result: Var#56
    Expr_ArrayDimFetch
        var: Var#45<$pagedim>
        dim: Var#46<$page>
        result: Var#57
    Expr_ArrayDimFetch
        var: Var#57
        dim: Var#47<$type>
        result: Var#58
    Expr_ArrayDimFetch
        var: Var#58
        dim: LITERAL('lly')
        result: Var#59
    Expr_Assign
        var: Var#59
        expr: Var#56
        result: Var#60
    Expr_BinaryOp_Mul
        left: Var#49<$urx>
        right: Var#44<$k>
        result: Var#61
    Expr_ArrayDimFetch
        var: Var#45<$pagedim>
        dim: Var#46<$page>
        result: Var#62
    Expr_ArrayDimFetch
        var: Var#62
        dim: Var#47<$type>
        result: Var#63
    Expr_ArrayDimFetch
        var: Var#63
        dim: LITERAL('urx')
        result: Var#64
    Expr_Assign
        var: Var#64
        expr: Var#61
        result: Var#65
    Expr_BinaryOp_Mul
        left: Var#50<$ury>
        right: Var#44<$k>
        result: Var#66
    Expr_ArrayDimFetch
        var: Var#45<$pagedim>
        dim: Var#46<$page>
        result: Var#67
    Expr_ArrayDimFetch
        var: Var#67
        dim: Var#47<$type>
        result: Var#68
    Expr_ArrayDimFetch
        var: Var#68
        dim: LITERAL('ury')
        result: Var#69
    Expr_Assign
        var: Var#69
        expr: Var#66
        result: Var#70
    Terminal_Return
        expr: Var#45<$pagedim>

Function TCPDF_STATIC::swapPageBoxCoordinates(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('page')
        result: Var#1<$page>
    Expr_Param
        declaredType: mixed
        name: LITERAL('pagedim')
        result: Var#2<$pagedim>
    Expr_StaticPropertyFetch
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('pageboxes')
        result: Var#3
    Iterator_Reset
        var: Var#3
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#9
    Var#4<$pagedim> = Phi(Var#2<$pagedim>, Var#5<$pagedim>)
    Var#6<$page> = Phi(Var#1<$page>, Var#7<$page>)
    Iterator_Valid
        var: Var#3
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#9<$pagedim> = Phi(Var#4<$pagedim>)
    Var#10<$page> = Phi(Var#6<$page>)
    Iterator_Value
        var: Var#3
        result: Var#11
    Expr_Assign
        var: Var#12<$type>
        expr: Var#11
        result: Var#13
    Expr_ArrayDimFetch
        var: Var#9<$pagedim>
        dim: Var#10<$page>
        result: Var#14
    Expr_ArrayDimFetch
        var: Var#14
        dim: Var#12<$type>
        result: Var#15
    Expr_Isset
        vars[0]: Var#15
        result: Var#16
    Stmt_JumpIf
        cond: Var#16
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#17<$pagedim> = Phi(Var#9<$pagedim>)
    Var#18<$page> = Phi(Var#10<$page>)
    Var#19<$type> = Phi(Var#12<$type>)
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#20
    Expr_ArrayDimFetch
        var: Var#20
        dim: Var#19<$type>
        result: Var#21
    Expr_ArrayDimFetch
        var: Var#21
        dim: LITERAL('llx')
        result: Var#22
    Expr_Assign
        var: Var#23<$tmp>
        expr: Var#22
        result: Var#24
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#25
    Expr_ArrayDimFetch
        var: Var#25
        dim: Var#19<$type>
        result: Var#26
    Expr_ArrayDimFetch
        var: Var#26
        dim: LITERAL('lly')
        result: Var#27
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#28
    Expr_ArrayDimFetch
        var: Var#28
        dim: Var#19<$type>
        result: Var#29
    Expr_ArrayDimFetch
        var: Var#29
        dim: LITERAL('llx')
        result: Var#30
    Expr_Assign
        var: Var#30
        expr: Var#27
        result: Var#31
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#32
    Expr_ArrayDimFetch
        var: Var#32
        dim: Var#19<$type>
        result: Var#33
    Expr_ArrayDimFetch
        var: Var#33
        dim: LITERAL('lly')
        result: Var#34
    Expr_Assign
        var: Var#34
        expr: Var#23<$tmp>
        result: Var#35
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#36
    Expr_ArrayDimFetch
        var: Var#36
        dim: Var#19<$type>
        result: Var#37
    Expr_ArrayDimFetch
        var: Var#37
        dim: LITERAL('urx')
        result: Var#38
    Expr_Assign
        var: Var#39<$tmp>
        expr: Var#38
        result: Var#40
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#41
    Expr_ArrayDimFetch
        var: Var#41
        dim: Var#19<$type>
        result: Var#42
    Expr_ArrayDimFetch
        var: Var#42
        dim: LITERAL('ury')
        result: Var#43
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#44
    Expr_ArrayDimFetch
        var: Var#44
        dim: Var#19<$type>
        result: Var#45
    Expr_ArrayDimFetch
        var: Var#45
        dim: LITERAL('urx')
        result: Var#46
    Expr_Assign
        var: Var#46
        expr: Var#43
        result: Var#47
    Expr_ArrayDimFetch
        var: Var#17<$pagedim>
        dim: Var#18<$page>
        result: Var#48
    Expr_ArrayDimFetch
        var: Var#48
        dim: Var#19<$type>
        result: Var#49
    Expr_ArrayDimFetch
        var: Var#49
        dim: LITERAL('ury')
        result: Var#50
    Expr_Assign
        var: Var#50
        expr: Var#39<$tmp>
        result: Var#51
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Var#52<$pagedim> = Phi(Var#4<$pagedim>)
    Terminal_Return
        expr: Var#52<$pagedim>

Block#8
    Parent: Block#5
    Parent: Block#6
    Var#5<$pagedim> = Phi(Var#17<$pagedim>, Var#9<$pagedim>)
    Var#7<$page> = Phi(Var#18<$page>, Var#10<$page>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Stmt_Jump
        target: Block#2

Function TCPDF_STATIC::getPageLayoutMode(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('layout')
        defaultVar: LITERAL('SinglePage')
        result: Var#1<$layout>
        defaultBlock: Block#2
    Stmt_Switch
        cond: Var#1<$layout>
        cases[0]: LITERAL('default')
        cases[1]: LITERAL('single')
        cases[2]: LITERAL('SinglePage')
        cases[3]: LITERAL('continuous')
        cases[4]: LITERAL('OneColumn')
        cases[5]: LITERAL('two')
        cases[6]: LITERAL('TwoColumnLeft')
        cases[7]: LITERAL('TwoColumnRight')
        cases[8]: LITERAL('TwoPageLeft')
        cases[9]: LITERAL('TwoPageRight')
        targets[0]: Block#3
        targets[1]: Block#4
        targets[2]: Block#5
        targets[3]: Block#6
        targets[4]: Block#7
        targets[5]: Block#8
        targets[6]: Block#9
        targets[7]: Block#10
        targets[8]: Block#11
        targets[9]: Block#12
        default: Block#13

Block#2

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#1
    Parent: Block#4
    Expr_Assign
        var: Var#2<$layout_mode>
        expr: LITERAL('SinglePage')
        result: Var#3
    Stmt_Jump
        target: Block#14

Block#6
    Parent: Block#1
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#1
    Parent: Block#6
    Expr_Assign
        var: Var#4<$layout_mode>
        expr: LITERAL('OneColumn')
        result: Var#5
    Stmt_Jump
        target: Block#14

Block#8
    Parent: Block#1
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#1
    Parent: Block#8
    Expr_Assign
        var: Var#6<$layout_mode>
        expr: LITERAL('TwoColumnLeft')
        result: Var#7
    Stmt_Jump
        target: Block#14

Block#10
    Parent: Block#1
    Expr_Assign
        var: Var#8<$layout_mode>
        expr: LITERAL('TwoColumnRight')
        result: Var#9
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#1
    Expr_Assign
        var: Var#10<$layout_mode>
        expr: LITERAL('TwoPageLeft')
        result: Var#11
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#1
    Expr_Assign
        var: Var#12<$layout_mode>
        expr: LITERAL('TwoPageRight')
        result: Var#13
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#1
    Expr_Assign
        var: Var#14<$layout_mode>
        expr: LITERAL('SinglePage')
        result: Var#15
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#15
    Parent: Block#5
    Parent: Block#7
    Parent: Block#9
    Parent: Block#10
    Parent: Block#11
    Parent: Block#12
    Var#16<$layout_mode> = Phi(Var#14<$layout_mode>, Var#2<$layout_mode>, Var#4<$layout_mode>, Var#6<$layout_mode>, Var#8<$layout_mode>, Var#10<$layout_mode>, Var#12<$layout_mode>)
    Terminal_Return
        expr: Var#16<$layout_mode>

Block#15
    Parent: Block#13
    Stmt_Jump
        target: Block#14

Function TCPDF_STATIC::getPageMode(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('mode')
        defaultVar: LITERAL('UseNone')
        result: Var#1<$mode>
        defaultBlock: Block#2
    Stmt_Switch
        cond: Var#1<$mode>
        cases[0]: LITERAL('UseNone')
        cases[1]: LITERAL('UseOutlines')
        cases[2]: LITERAL('UseThumbs')
        cases[3]: LITERAL('FullScreen')
        cases[4]: LITERAL('UseOC')
        cases[5]: LITERAL('')
        targets[0]: Block#3
        targets[1]: Block#4
        targets[2]: Block#5
        targets[3]: Block#6
        targets[4]: Block#7
        targets[5]: Block#8
        default: Block#9

Block#2

Block#3
    Parent: Block#1
    Expr_Assign
        var: Var#2<$page_mode>
        expr: LITERAL('UseNone')
        result: Var#3
    Stmt_Jump
        target: Block#10

Block#4
    Parent: Block#1
    Expr_Assign
        var: Var#4<$page_mode>
        expr: LITERAL('UseOutlines')
        result: Var#5
    Stmt_Jump
        target: Block#10

Block#5
    Parent: Block#1
    Expr_Assign
        var: Var#6<$page_mode>
        expr: LITERAL('UseThumbs')
        result: Var#7
    Stmt_Jump
        target: Block#10

Block#6
    Parent: Block#1
    Expr_Assign
        var: Var#8<$page_mode>
        expr: LITERAL('FullScreen')
        result: Var#9
    Stmt_Jump
        target: Block#10

Block#7
    Parent: Block#1
    Expr_Assign
        var: Var#10<$page_mode>
        expr: LITERAL('UseOC')
        result: Var#11
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#1
    Expr_Assign
        var: Var#12<$page_mode>
        expr: LITERAL('UseAttachments')
        result: Var#13
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#1
    Expr_Assign
        var: Var#14<$page_mode>
        expr: LITERAL('UseNone')
        result: Var#15
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#11
    Parent: Block#3
    Parent: Block#4
    Parent: Block#5
    Parent: Block#6
    Parent: Block#7
    Parent: Block#8
    Var#16<$page_mode> = Phi(Var#14<$page_mode>, Var#2<$page_mode>, Var#4<$page_mode>, Var#6<$page_mode>, Var#8<$page_mode>, Var#10<$page_mode>, Var#12<$page_mode>)
    Terminal_Return
        expr: Var#16<$page_mode>

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#10

Function TCPDF_STATIC::isValidURL(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('url')
        result: Var#1<$url>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Var#2<$url> = Phi(Var#1<$url>)
    Expr_FuncCall
        name: LITERAL('get_headers')
        args[0]: Var#2<$url>
        result: Var#3
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#2
    Expr_Assign
        var: Var#4<$headers>
        expr: Var#3
        result: Var#5
    Expr_ArrayDimFetch
        var: Var#4<$headers>
        dim: LITERAL(0)
        result: Var#6
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#6
        args[1]: LITERAL('200')
        result: Var#7
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#8
    Expr_BinaryOp_NotIdentical
        left: Var#7
        right: Var#8
        result: Var#9
    Terminal_Return
        expr: Var#9

Function TCPDF_STATIC::removeSHY(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('txt')
        defaultVar: LITERAL('')
        result: Var#1<$txt>
        defaultBlock: Block#2
    Expr_Param
        declaredType: mixed
        name: LITERAL('unicode')
        defaultVar: Var#2
        result: Var#3<$unicode>
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([\\xc2]{1}[\\xad]{1})/')
        args[1]: LITERAL('')
        args[2]: Var#1<$txt>
        result: Var#4
    Expr_Assign
        var: Var#5<$txt>
        expr: Var#4
        result: Var#6
    Expr_BooleanNot
        expr: Var#3<$unicode>
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#4
        else: Block#5

Block#2

Block#3
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#2

Block#4
    Parent: Block#1
    Var#8<$txt> = Phi(Var#5<$txt>)
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([\\xad]{1})/')
        args[1]: LITERAL('')
        args[2]: Var#8<$txt>
        result: Var#9
    Expr_Assign
        var: Var#10<$txt>
        expr: Var#9
        result: Var#11
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#1
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#12<$txt> = Phi(Var#10<$txt>, Var#5<$txt>)
    Terminal_Return
        expr: Var#12<$txt>

Function TCPDF_STATIC::getBorderMode(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('brd')
        result: Var#1<$brd>
    Expr_Param
        declaredType: mixed
        name: LITERAL('position')
        defaultVar: LITERAL('start')
        result: Var#2<$position>
        defaultBlock: Block#2
    Expr_Param
        declaredType: mixed
        name: LITERAL('opencell')
        defaultVar: Var#3
        result: Var#4<$opencell>
        defaultBlock: Block#3
    Expr_BooleanNot
        expr: Var#4<$opencell>
        result: Var#5
    Stmt_JumpIf
        cond: Var#5
        if: Block#4
        else: Block#5

Block#2

Block#3
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#3

Block#4
    Parent: Block#1
    Parent: Block#5
    Var#6 = Phi(LITERAL(true), Var#7)
    Var#8<$brd> = Phi(Var#1<$brd>, Var#9<$brd>)
    Var#10<$position> = Phi(Var#2<$position>)
    Stmt_JumpIf
        cond: Var#6
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#1
    Var#9<$brd> = Phi(Var#1<$brd>)
    Expr_Empty
        expr: Var#9<$brd>
        result: Var#11
    Expr_Cast_Bool
        expr: Var#11
        result: Var#7
    Stmt_Jump
        target: Block#4

Block#6
    Parent: Block#4
    Var#12<$brd> = Phi(Var#8<$brd>)
    Terminal_Return
        expr: Var#12<$brd>

Block#7
    Parent: Block#4
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#13<$brd> = Phi(Var#8<$brd>)
    Var#14<$position> = Phi(Var#10<$position>)
    Expr_BinaryOp_Equal
        left: Var#13<$brd>
        right: LITERAL(1)
        result: Var#15
    Stmt_JumpIf
        cond: Var#15
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Expr_Assign
        var: Var#16<$brd>
        expr: LITERAL('LTRB')
        result: Var#17
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#9
    Parent: Block#10
    Var#18<$brd> = Phi(Var#16<$brd>, Var#13<$brd>)
    Var#19<$position> = Phi(Var#14<$position>)
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#18<$brd>
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#21<$brd> = Phi(Var#18<$brd>)
    Expr_Assertion<type(LITERAL('string'))>
        expr: Var#21<$brd>
        result: Var#22<$brd>
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#22<$brd>
        result: Var#23
    Expr_Assign
        var: Var#24<$slen>
        expr: Var#23
        result: Var#25
    Expr_Array
        result: Var#26
    Expr_Assign
        var: Var#27<$newbrd>
        expr: Var#26
        result: Var#28
    Expr_Assign
        var: Var#29<$i>
        expr: LITERAL(0)
        result: Var#30
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#11
    Var#31<$brd> = Phi(Var#18<$brd>)
    Expr_Assertion<not(type(LITERAL('string')))>
        expr: Var#31<$brd>
        result: Var#32<$brd>
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#12
    Parent: Block#19
    Var#33<$i> = Phi(Var#29<$i>, Var#34<$i>)
    Var#35<$slen> = Phi(Var#24<$slen>)
    Var#36<$newbrd> = Phi(Var#27<$newbrd>, Var#37<$newbrd>)
    Var#38<$brd> = Phi(Var#22<$brd>, Var#39<$brd>)
    Var#40<$position> = Phi(Var#19<$position>)
    Expr_BinaryOp_Smaller
        left: Var#33<$i>
        right: Var#35<$slen>
        result: Var#41
    Stmt_JumpIf
        cond: Var#41
        if: Block#16
        else: Block#17

Block#15
    Parent: Block#20
    Parent: Block#13
    Var#42<$brd> = Phi(Var#43<$brd>, Var#32<$brd>)
    Var#44<$position> = Phi(Var#40<$position>, Var#19<$position>)
    Iterator_Reset
        var: Var#42<$brd>
    Stmt_Jump
        target: Block#18

Block#16
    Parent: Block#14
    Var#37<$newbrd> = Phi(Var#36<$newbrd>)
    Var#39<$brd> = Phi(Var#38<$brd>)
    Var#45<$i> = Phi(Var#33<$i>)
    Expr_Array
        keys[0]: LITERAL('cap')
        keys[1]: LITERAL('join')
        values[0]: LITERAL('square')
        values[1]: LITERAL('miter')
        result: Var#46
    Expr_ArrayDimFetch
        var: Var#39<$brd>
        dim: Var#45<$i>
        result: Var#47
    Expr_ArrayDimFetch
        var: Var#37<$newbrd>
        dim: Var#47
        result: Var#48
    Expr_Assign
        var: Var#48
        expr: Var#46
        result: Var#49
    Stmt_Jump
        target: Block#19

Block#17
    Parent: Block#14
    Stmt_Jump
        target: Block#20

Block#18
    Parent: Block#15
    Parent: Block#44
    Var#50<$position> = Phi(Var#44<$position>, Var#51<$position>)
    Var#52<$brd> = Phi(Var#42<$brd>, Var#53<$brd>)
    Iterator_Valid
        var: Var#42<$brd>
        result: Var#54
    Stmt_JumpIf
        cond: Var#54
        if: Block#21
        else: Block#22

Block#19
    Parent: Block#16
    Var#55<$i> = Phi(Var#45<$i>)
    Expr_BinaryOp_Plus
        left: Var#55<$i>
        right: LITERAL(1)
        result: Var#56
    Expr_Assign
        var: Var#34<$i>
        expr: Var#56
        result: Var#57
    Stmt_Jump
        target: Block#14

Block#20
    Parent: Block#17
    Var#58<$newbrd> = Phi(Var#36<$newbrd>)
    Expr_Assign
        var: Var#43<$brd>
        expr: Var#58<$newbrd>
        result: Var#59
    Stmt_Jump
        target: Block#15

Block#21
    Parent: Block#18
    Var#60<$position> = Phi(Var#50<$position>)
    Iterator_Key
        var: Var#42<$brd>
        result: Var#61
    Expr_Assign
        var: Var#62<$border>
        expr: Var#61
        result: Var#63
    Iterator_Value
        var: Var#42<$brd>
        result: Var#64
    Expr_Assign
        var: Var#65<$style>
        expr: Var#64
        result: Var#66
    Stmt_Switch
        cond: Var#60<$position>
        cases[0]: LITERAL('start')
        cases[1]: LITERAL('middle')
        cases[2]: LITERAL('end')
        targets[0]: Block#23
        targets[1]: Block#24
        targets[2]: Block#25
        default: Block#26

Block#22
    Parent: Block#18
    Stmt_Jump
        target: Block#27

Block#23
    Parent: Block#21
    Var#67<$border> = Phi(Var#62<$border>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#67<$border>
        args[1]: LITERAL('B')
        result: Var#68
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#69
    Expr_BinaryOp_NotIdentical
        left: Var#68
        right: Var#69
        result: Var#70
    Stmt_JumpIf
        cond: Var#70
        if: Block#28
        else: Block#29

Block#24
    Parent: Block#21
    Var#71<$border> = Phi(Var#62<$border>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#71<$border>
        args[1]: LITERAL('B')
        result: Var#72
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#73
    Expr_BinaryOp_NotIdentical
        left: Var#72
        right: Var#73
        result: Var#74
    Stmt_JumpIf
        cond: Var#74
        if: Block#30
        else: Block#31

Block#25
    Parent: Block#21
    Var#75<$border> = Phi(Var#62<$border>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#75<$border>
        args[1]: LITERAL('T')
        result: Var#76
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#77
    Expr_BinaryOp_NotIdentical
        left: Var#76
        right: Var#77
        result: Var#78
    Stmt_JumpIf
        cond: Var#78
        if: Block#32
        else: Block#33

Block#26
    Var#79<$position> = Phi()
    Var#80<$brd> = Phi()
    Stmt_Jump
        target: Block#34

Block#27
    Parent: Block#22
    Var#81<$brd> = Phi(Var#52<$brd>)
    Terminal_Return
        expr: Var#81<$brd>

Block#28
    Parent: Block#23
    Var#82<$border> = Phi(Var#67<$border>)
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('B')
        args[1]: LITERAL('')
        args[2]: Var#82<$border>
        result: Var#83
    Expr_Assign
        var: Var#84<$newkey>
        expr: Var#83
        result: Var#85
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#84<$newkey>
        result: Var#86
    Expr_BinaryOp_Greater
        left: Var#86
        right: LITERAL(0)
        result: Var#87
    Stmt_JumpIf
        cond: Var#87
        if: Block#35
        else: Block#36

Block#29
    Parent: Block#23
    Stmt_Jump
        target: Block#37

Block#30
    Parent: Block#24
    Var#88<$border> = Phi(Var#71<$border>)
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('B')
        args[1]: LITERAL('')
        args[2]: Var#88<$border>
        result: Var#89
    Expr_Assign
        var: Var#90<$newkey>
        expr: Var#89
        result: Var#91
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#90<$newkey>
        result: Var#92
    Expr_BinaryOp_Greater
        left: Var#92
        right: LITERAL(0)
        result: Var#93
    Stmt_JumpIf
        cond: Var#93
        if: Block#38
        else: Block#39

Block#31
    Parent: Block#24
    Stmt_Jump
        target: Block#40

Block#32
    Parent: Block#25
    Var#94<$border> = Phi(Var#75<$border>)
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('T')
        args[1]: LITERAL('')
        args[2]: Var#94<$border>
        result: Var#95
    Expr_Assign
        var: Var#96<$newkey>
        expr: Var#95
        result: Var#97
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#96<$newkey>
        result: Var#98
    Expr_BinaryOp_Greater
        left: Var#98
        right: LITERAL(0)
        result: Var#99
    Stmt_JumpIf
        cond: Var#99
        if: Block#41
        else: Block#42

Block#33
    Parent: Block#25
    Stmt_Jump
        target: Block#43

Block#34
    Parent: Block#26
    Parent: Block#37
    Parent: Block#52
    Parent: Block#43
    Var#51<$position> = Phi(Var#79<$position>, Var#100<$position>, Var#101<$position>, Var#102<$position>)
    Var#53<$brd> = Phi(Var#80<$brd>, Var#103<$brd>, Var#104<$brd>, Var#105<$brd>)
    Stmt_Jump
        target: Block#44

Block#35
    Parent: Block#28
    Var#106<$style> = Phi(Var#65<$style>)
    Var#107<$brd> = Phi(Var#52<$brd>)
    Var#108<$newkey> = Phi(Var#84<$newkey>)
    Expr_ArrayDimFetch
        var: Var#107<$brd>
        dim: Var#108<$newkey>
        result: Var#109
    Expr_Assign
        var: Var#109
        expr: Var#106<$style>
        result: Var#110
    Stmt_Jump
        target: Block#45

Block#36
    Parent: Block#28
    Stmt_Jump
        target: Block#45

Block#37
    Parent: Block#45
    Parent: Block#29
    Var#100<$position> = Phi(Var#111<$position>, Var#60<$position>)
    Var#103<$brd> = Phi(Var#112<$brd>, Var#52<$brd>)
    Stmt_Jump
        target: Block#34

Block#38
    Parent: Block#30
    Var#113<$style> = Phi(Var#65<$style>)
    Var#114<$brd> = Phi(Var#52<$brd>)
    Var#115<$newkey> = Phi(Var#90<$newkey>)
    Expr_ArrayDimFetch
        var: Var#114<$brd>
        dim: Var#115<$newkey>
        result: Var#116
    Expr_Assign
        var: Var#116
        expr: Var#113<$style>
        result: Var#117
    Stmt_Jump
        target: Block#46

Block#39
    Parent: Block#30
    Stmt_Jump
        target: Block#46

Block#40
    Parent: Block#46
    Parent: Block#31
    Var#118<$position> = Phi(Var#119<$position>, Var#60<$position>)
    Var#120<$brd> = Phi(Var#121<$brd>, Var#52<$brd>)
    Var#122<$border> = Phi(Var#123<$border>, Var#71<$border>)
    Var#124<$style> = Phi(Var#125<$style>, Var#65<$style>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#122<$border>
        args[1]: LITERAL('T')
        result: Var#126
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#127
    Expr_BinaryOp_NotIdentical
        left: Var#126
        right: Var#127
        result: Var#128
    Stmt_JumpIf
        cond: Var#128
        if: Block#47
        else: Block#48

Block#41
    Parent: Block#32
    Var#129<$style> = Phi(Var#65<$style>)
    Var#130<$brd> = Phi(Var#52<$brd>)
    Var#131<$newkey> = Phi(Var#96<$newkey>)
    Expr_ArrayDimFetch
        var: Var#130<$brd>
        dim: Var#131<$newkey>
        result: Var#132
    Expr_Assign
        var: Var#132
        expr: Var#129<$style>
        result: Var#133
    Stmt_Jump
        target: Block#49

Block#42
    Parent: Block#32
    Stmt_Jump
        target: Block#49

Block#43
    Parent: Block#49
    Parent: Block#33
    Var#102<$position> = Phi(Var#134<$position>, Var#60<$position>)
    Var#105<$brd> = Phi(Var#135<$brd>, Var#52<$brd>)
    Stmt_Jump
        target: Block#34

Block#44
    Parent: Block#34
    Stmt_Jump
        target: Block#18

Block#45
    Parent: Block#35
    Parent: Block#36
    Var#111<$position> = Phi(Var#60<$position>)
    Var#112<$brd> = Phi(Var#107<$brd>, Var#52<$brd>)
    Var#136<$border> = Phi(Var#82<$border>)
    Expr_ArrayDimFetch
        var: Var#112<$brd>
        dim: Var#136<$border>
        result: Var#137
    Terminal_Unset
        exprs[0]: Var#137
    Stmt_Jump
        target: Block#37

Block#46
    Parent: Block#38
    Parent: Block#39
    Var#119<$position> = Phi(Var#60<$position>)
    Var#121<$brd> = Phi(Var#114<$brd>, Var#52<$brd>)
    Var#138<$border> = Phi(Var#88<$border>)
    Var#139<$newkey> = Phi(Var#115<$newkey>, Var#90<$newkey>)
    Var#125<$style> = Phi(Var#113<$style>, Var#65<$style>)
    Expr_ArrayDimFetch
        var: Var#121<$brd>
        dim: Var#138<$border>
        result: Var#140
    Terminal_Unset
        exprs[0]: Var#140
    Expr_Assign
        var: Var#123<$border>
        expr: Var#139<$newkey>
        result: Var#141
    Stmt_Jump
        target: Block#40

Block#47
    Parent: Block#40
    Var#142<$border> = Phi(Var#122<$border>)
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('T')
        args[1]: LITERAL('')
        args[2]: Var#142<$border>
        result: Var#143
    Expr_Assign
        var: Var#144<$newkey>
        expr: Var#143
        result: Var#145
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#144<$newkey>
        result: Var#146
    Expr_BinaryOp_Greater
        left: Var#146
        right: LITERAL(0)
        result: Var#147
    Stmt_JumpIf
        cond: Var#147
        if: Block#50
        else: Block#51

Block#48
    Parent: Block#40
    Stmt_Jump
        target: Block#52

Block#49
    Parent: Block#41
    Parent: Block#42
    Var#134<$position> = Phi(Var#60<$position>)
    Var#135<$brd> = Phi(Var#130<$brd>, Var#52<$brd>)
    Var#148<$border> = Phi(Var#94<$border>)
    Expr_ArrayDimFetch
        var: Var#135<$brd>
        dim: Var#148<$border>
        result: Var#149
    Terminal_Unset
        exprs[0]: Var#149
    Stmt_Jump
        target: Block#43

Block#50
    Parent: Block#47
    Var#150<$style> = Phi(Var#124<$style>)
    Var#151<$brd> = Phi(Var#120<$brd>)
    Var#152<$newkey> = Phi(Var#144<$newkey>)
    Expr_ArrayDimFetch
        var: Var#151<$brd>
        dim: Var#152<$newkey>
        result: Var#153
    Expr_Assign
        var: Var#153
        expr: Var#150<$style>
        result: Var#154
    Stmt_Jump
        target: Block#53

Block#51
    Parent: Block#47
    Stmt_Jump
        target: Block#53

Block#52
    Parent: Block#53
    Parent: Block#48
    Var#101<$position> = Phi(Var#155<$position>, Var#118<$position>)
    Var#104<$brd> = Phi(Var#156<$brd>, Var#120<$brd>)
    Stmt_Jump
        target: Block#34

Block#53
    Parent: Block#50
    Parent: Block#51
    Var#155<$position> = Phi(Var#118<$position>)
    Var#156<$brd> = Phi(Var#151<$brd>, Var#120<$brd>)
    Var#157<$border> = Phi(Var#142<$border>)
    Expr_ArrayDimFetch
        var: Var#156<$brd>
        dim: Var#157<$border>
        result: Var#158
    Terminal_Unset
        exprs[0]: Var#158
    Stmt_Jump
        target: Block#52

Function TCPDF_STATIC::empty_string(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_FuncCall
        name: LITERAL('is_null')
        args[0]: Var#1<$str>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#5
    Var#3 = Phi(LITERAL(true), Var#4)
    Terminal_Return
        expr: Var#3

Block#3
    Parent: Block#1
    Var#5<$str> = Phi(Var#1<$str>)
    Expr_FuncCall
        name: LITERAL('is_string')
        args[0]: Var#5<$str>
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#7<$str> = Phi(Var#5<$str>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#7<$str>
        result: Var#8
    Expr_BinaryOp_Equal
        left: Var#8
        right: LITERAL(0)
        result: Var#9
    Expr_Cast_Bool
        expr: Var#9
        result: Var#10
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#11 = Phi(LITERAL(false), Var#10)
    Expr_Cast_Bool
        expr: Var#11
        result: Var#4
    Stmt_Jump
        target: Block#2

Function TCPDF_STATIC::getObjFilename(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('type')
        defaultVar: LITERAL('tmp')
        result: Var#1<$type>
        defaultBlock: Block#2
    Expr_ConstFetch
        name: LITERAL('K_PATH_CACHE')
        result: Var#2
    Expr_BinaryOp_Concat
        left: LITERAL('__tcpdf_')
        right: Var#1<$type>
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#3
        right: LITERAL('_')
        result: Var#4
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#5
    Expr_FuncCall
        name: LITERAL('uniqid')
        args[0]: LITERAL('')
        args[1]: Var#5
        result: Var#6
    Expr_FuncCall
        name: LITERAL('rand')
        result: Var#7
    Expr_BinaryOp_Concat
        left: Var#6
        right: Var#7
        result: Var#8
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#9
    Expr_FuncCall
        name: LITERAL('microtime')
        args[0]: Var#9
        result: Var#10
    Expr_BinaryOp_Concat
        left: Var#8
        right: Var#10
        result: Var#11
    Expr_FuncCall
        name: LITERAL('md5')
        args[0]: Var#11
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#4
        right: Var#12
        result: Var#13
    Expr_BinaryOp_Concat
        left: Var#13
        right: LITERAL('_')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('tempnam')
        args[0]: Var#2
        args[1]: Var#14
        result: Var#15
    Terminal_Return
        expr: Var#15

Block#2

Function TCPDF_STATIC::_escape(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('s')
        result: Var#1<$s>
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: LITERAL(13)
        result: Var#2
    Expr_Array
        keys[0]: LITERAL(')')
        keys[1]: LITERAL('(')
        keys[2]: LITERAL('\\')
        keys[3]: Var#2
        values[0]: LITERAL('\\)')
        values[1]: LITERAL('\\(')
        values[2]: LITERAL('\\\\')
        values[3]: LITERAL('\\r')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('strtr')
        args[0]: Var#1<$s>
        args[1]: Var#3
        result: Var#4
    Terminal_Return
        expr: Var#4

Function TCPDF_STATIC::_escapeXML(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Array
        keys[0]: LITERAL('' . "\0" . '')
        keys[1]: LITERAL('&')
        keys[2]: LITERAL('<')
        keys[3]: LITERAL('>')
        values[0]: LITERAL('')
        values[1]: LITERAL('&amp;')
        values[2]: LITERAL('&lt;')
        values[3]: LITERAL('&gt;')
        result: Var#2
    Expr_Assign
        var: Var#3<$replaceTable>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('strtr')
        args[0]: Var#1<$str>
        args[1]: Var#3<$replaceTable>
        result: Var#5
    Expr_Assign
        var: Var#6<$str>
        expr: Var#5
        result: Var#7
    Terminal_Return
        expr: Var#6<$str>

Function TCPDF_STATIC::objclone(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('object')
        result: Var#1<$object>
    Expr_InstanceOf
        expr: Var#1<$object>
        class: LITERAL('Imagick')
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('phpversion')
        args[0]: LITERAL('imagick')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('version_compare')
        args[0]: Var#3
        args[1]: LITERAL('3.0.1')
        result: Var#4
    Expr_BinaryOp_NotIdentical
        left: Var#4
        right: LITERAL(1)
        result: Var#5
    Expr_Cast_Bool
        expr: Var#5
        result: Var#6
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#7 = Phi(LITERAL(false), Var#6)
    Var#8<$object> = Phi(Var#1<$object>)
    Stmt_JumpIf
        cond: Var#7
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#9<$object> = Phi(Var#8<$object>)
    Expr_Assertion<type(LITERAL('Imagick'))>
        expr: Var#9<$object>
        result: Var#10<$object>
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Var#11<$object> = Phi(Var#8<$object>)
    Expr_Assertion<not(type(LITERAL('Imagick')))>
        expr: Var#11<$object>
        result: Var#12<$object>
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Var#13<$object> = Phi(Var#10<$object>)
    Expr_MethodCall
        var: Var#13<$object>
        name: LITERAL('clone')
        result: Var#14
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Var#15<$object> = Phi(Var#12<$object>)
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#6
    Terminal_Return
        expr: Var#14

Block#9
    Parent: Block#7
    Var#16<$object> = Phi(Var#15<$object>)
    Expr_Clone
        expr: Var#16<$object>
        result: Var#17
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#9
    Terminal_Return
        expr: Var#17

Function TCPDF_STATIC::sendOutputData(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_Param
        declaredType: mixed
        name: LITERAL('length')
        result: Var#2<$length>
    Var#3<$_SERVER> = Phi()
    Expr_ArrayDimFetch
        var: Var#3<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_ENCODING')
        result: Var#4
    Expr_Isset
        vars[0]: Var#4
        result: Var#5
    Expr_BooleanNot
        expr: Var#5
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Parent: Block#3
    Var#7 = Phi(LITERAL(true), Var#8)
    Var#9<$length> = Phi(Var#2<$length>)
    Var#10<$data> = Phi(Var#1<$data>)
    Stmt_JumpIf
        cond: Var#7
        if: Block#4
        else: Block#5

Block#3
    Parent: Block#1
    Var#11<$_SERVER> = Phi(Var#3<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#11<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_ENCODING')
        result: Var#12
    Expr_Empty
        expr: Var#12
        result: Var#13
    Expr_Cast_Bool
        expr: Var#13
        result: Var#8
    Stmt_Jump
        target: Block#2

Block#4
    Parent: Block#2
    Var#14<$length> = Phi(Var#9<$length>)
    Expr_BinaryOp_Concat
        left: LITERAL('Content-Length: ')
        right: Var#14<$length>
        result: Var#15
    Expr_FuncCall
        name: LITERAL('header')
        args[0]: Var#15
        result: Var#16
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#17<$data> = Phi(Var#10<$data>)
    Terminal_Echo
        expr: Var#17<$data>
    Terminal_Return

Function TCPDF_STATIC::replacePageNumAliases(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('page')
        result: Var#1<$page>
    Expr_Param
        declaredType: mixed
        name: LITERAL('replace')
        result: Var#2<$replace>
    Expr_Param
        declaredType: mixed
        name: LITERAL('diff')
        defaultVar: LITERAL(0)
        result: Var#3<$diff>
        defaultBlock: Block#2
    Iterator_Reset
        var: Var#2<$replace>
    Stmt_Jump
        target: Block#3

Block#2

Block#3
    Parent: Block#1
    Parent: Block#14
    Var#4<$page> = Phi(Var#1<$page>, Var#5<$page>)
    Var#6<$diff> = Phi(Var#3<$diff>, Var#7<$diff>)
    Iterator_Valid
        var: Var#2<$replace>
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Iterator_Value
        var: Var#2<$replace>
        result: Var#9
    Expr_Assign
        var: Var#10<$rep>
        expr: Var#9
        result: Var#11
    Expr_ArrayDimFetch
        var: Var#10<$rep>
        dim: LITERAL(3)
        result: Var#12
    Iterator_Reset
        var: Var#12
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Parent: Block#15
    Var#5<$page> = Phi(Var#4<$page>, Var#13<$page>)
    Var#14<$rep> = Phi(Var#10<$rep>, Var#15<$rep>)
    Var#7<$diff> = Phi(Var#6<$diff>, Var#16<$diff>)
    Iterator_Valid
        var: Var#12
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Var#18<$page> = Phi(Var#4<$page>)
    Var#19<$diff> = Phi(Var#6<$diff>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: Var#18<$page>
        values[1]: Var#19<$diff>
        result: Var#20
    Terminal_Return
        expr: Var#20

Block#8
    Parent: Block#6
    Var#21<$page> = Phi(Var#5<$page>)
    Iterator_Value
        var: Var#12
        result: Var#22
    Expr_Assign
        var: Var#23<$a>
        expr: Var#22
        result: Var#24
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#21<$page>
        args[1]: Var#23<$a>
        result: Var#25
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#26
    Expr_BinaryOp_NotIdentical
        left: Var#25
        right: Var#26
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#10
        else: Block#11

Block#9
    Parent: Block#6
    Stmt_Jump
        target: Block#12

Block#10
    Parent: Block#8
    Var#28<$a> = Phi(Var#23<$a>)
    Var#29<$rep> = Phi(Var#14<$rep>)
    Var#30<$page> = Phi(Var#21<$page>)
    Var#31<$diff> = Phi(Var#7<$diff>)
    Expr_ArrayDimFetch
        var: Var#29<$rep>
        dim: LITERAL(0)
        result: Var#32
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#28<$a>
        args[1]: Var#32
        args[2]: Var#30<$page>
        result: Var#33
    Expr_Assign
        var: Var#34<$page>
        expr: Var#33
        result: Var#35
    Expr_ArrayDimFetch
        var: Var#29<$rep>
        dim: LITERAL(2)
        result: Var#36
    Expr_ArrayDimFetch
        var: Var#29<$rep>
        dim: LITERAL(1)
        result: Var#37
    Expr_BinaryOp_Minus
        left: Var#36
        right: Var#37
        result: Var#38
    Expr_BinaryOp_Plus
        left: Var#31<$diff>
        right: Var#38
        result: Var#39
    Expr_Assign
        var: Var#40<$diff>
        expr: Var#39
        result: Var#41
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#8
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#9
    Stmt_Jump
        target: Block#14

Block#13
    Parent: Block#10
    Parent: Block#11
    Var#13<$page> = Phi(Var#34<$page>, Var#21<$page>)
    Var#15<$rep> = Phi(Var#29<$rep>, Var#14<$rep>)
    Var#16<$diff> = Phi(Var#40<$diff>, Var#7<$diff>)
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#12
    Stmt_Jump
        target: Block#3

Block#15
    Parent: Block#13
    Stmt_Jump
        target: Block#6

Function TCPDF_STATIC::getTimestamp(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('date')
        result: Var#1<$date>
    Expr_ArrayDimFetch
        var: Var#1<$date>
        dim: LITERAL(0)
        result: Var#2
    Expr_BinaryOp_Equal
        left: Var#2
        right: LITERAL('D')
        result: Var#3
    Stmt_JumpIf
        cond: Var#3
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#4<$date> = Phi(Var#1<$date>)
    Expr_ArrayDimFetch
        var: Var#4<$date>
        dim: LITERAL(1)
        result: Var#5
    Expr_BinaryOp_Equal
        left: Var#5
        right: LITERAL(':')
        result: Var#6
    Expr_Cast_Bool
        expr: Var#6
        result: Var#7
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#8 = Phi(LITERAL(false), Var#7)
    Var#9<$date> = Phi(Var#1<$date>, Var#4<$date>)
    Stmt_JumpIf
        cond: Var#8
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#10<$date> = Phi(Var#9<$date>)
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#10<$date>
        args[1]: LITERAL(2)
        result: Var#11
    Expr_Assign
        var: Var#12<$date>
        expr: Var#11
        result: Var#13
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#14<$date> = Phi(Var#12<$date>, Var#9<$date>)
    Expr_FuncCall
        name: LITERAL('strtotime')
        args[0]: Var#14<$date>
        result: Var#15
    Terminal_Return
        expr: Var#15

Function TCPDF_STATIC::getFormattedDate(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('time')
        result: Var#1<$time>
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#1<$time>
        result: Var#2
    Expr_FuncCall
        name: LITERAL('date')
        args[0]: LITERAL('YmdHisO')
        args[1]: Var#2
        result: Var#3
    Expr_BinaryOp_Minus
        left: LITERAL(0)
        right: LITERAL(2)
        result: Var#4
    Expr_FuncCall
        name: LITERAL('substr_replace')
        args[0]: Var#3
        args[1]: LITERAL('\'')
        args[2]: Var#4
        args[3]: LITERAL(0)
        result: Var#5
    Expr_BinaryOp_Concat
        left: Var#5
        right: LITERAL('\'')
        result: Var#6
    Terminal_Return
        expr: Var#6

Function TCPDF_STATIC::_getULONG(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        result: Var#2<$offset>
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#1<$str>
        args[1]: Var#2<$offset>
        args[2]: LITERAL(4)
        result: Var#3
    Expr_FuncCall
        name: LITERAL('unpack')
        args[0]: LITERAL('Ni')
        args[1]: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$v>
        expr: Var#4
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#5<$v>
        dim: LITERAL('i')
        result: Var#7
    Terminal_Return
        expr: Var#7

Function TCPDF_STATIC::_getUSHORT(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        result: Var#2<$offset>
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#1<$str>
        args[1]: Var#2<$offset>
        args[2]: LITERAL(2)
        result: Var#3
    Expr_FuncCall
        name: LITERAL('unpack')
        args[0]: LITERAL('ni')
        args[1]: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$v>
        expr: Var#4
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#5<$v>
        dim: LITERAL('i')
        result: Var#7
    Terminal_Return
        expr: Var#7

Function TCPDF_STATIC::_getSHORT(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        result: Var#2<$offset>
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#1<$str>
        args[1]: Var#2<$offset>
        args[2]: LITERAL(2)
        result: Var#3
    Expr_FuncCall
        name: LITERAL('unpack')
        args[0]: LITERAL('si')
        args[1]: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$v>
        expr: Var#4
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#5<$v>
        dim: LITERAL('i')
        result: Var#7
    Terminal_Return
        expr: Var#7

Function TCPDF_STATIC::_getFWORD(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        result: Var#2<$offset>
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('_getUSHORT')
        args[0]: Var#1<$str>
        args[1]: Var#2<$offset>
        result: Var#3
    Expr_Assign
        var: Var#4<$v>
        expr: Var#3
        result: Var#5
    Expr_BinaryOp_Greater
        left: Var#4<$v>
        right: LITERAL(32767)
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#7<$v> = Phi(Var#4<$v>)
    Expr_BinaryOp_Minus
        left: Var#7<$v>
        right: LITERAL(65536)
        result: Var#8
    Expr_Assign
        var: Var#9<$v>
        expr: Var#8
        result: Var#10
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#11<$v> = Phi(Var#9<$v>, Var#4<$v>)
    Terminal_Return
        expr: Var#11<$v>

Function TCPDF_STATIC::_getUFWORD(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        result: Var#2<$offset>
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('_getUSHORT')
        args[0]: Var#1<$str>
        args[1]: Var#2<$offset>
        result: Var#3
    Expr_Assign
        var: Var#4<$v>
        expr: Var#3
        result: Var#5
    Terminal_Return
        expr: Var#4<$v>

Function TCPDF_STATIC::_getFIXED(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        result: Var#2<$offset>
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('_getFWORD')
        args[0]: Var#1<$str>
        args[1]: Var#2<$offset>
        result: Var#3
    Expr_Assign
        var: Var#4<$m>
        expr: Var#3
        result: Var#5
    Expr_BinaryOp_Plus
        left: Var#2<$offset>
        right: LITERAL(2)
        result: Var#6
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('_getUSHORT')
        args[0]: Var#1<$str>
        args[1]: Var#6
        result: Var#7
    Expr_Assign
        var: Var#8<$f>
        expr: Var#7
        result: Var#9
    Expr_BinaryOp_Concat
        left: LITERAL('')
        right: Var#4<$m>
        result: Var#10
    Expr_BinaryOp_Concat
        left: Var#10
        right: LITERAL('.')
        result: Var#11
    Expr_BinaryOp_Concat
        left: Var#11
        right: Var#8<$f>
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#12
        right: LITERAL('')
        result: Var#13
    Expr_FuncCall
        name: LITERAL('floatval')
        args[0]: Var#13
        result: Var#14
    Expr_Assign
        var: Var#15<$v>
        expr: Var#14
        result: Var#16
    Terminal_Return
        expr: Var#15<$v>

Function TCPDF_STATIC::_getBYTE(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        result: Var#2<$offset>
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#1<$str>
        args[1]: Var#2<$offset>
        args[2]: LITERAL(1)
        result: Var#3
    Expr_FuncCall
        name: LITERAL('unpack')
        args[0]: LITERAL('Ci')
        args[1]: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$v>
        expr: Var#4
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#5<$v>
        dim: LITERAL('i')
        result: Var#7
    Terminal_Return
        expr: Var#7

Function TCPDF_STATIC::rfread(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('handle')
        result: Var#1<$handle>
    Expr_Param
        declaredType: mixed
        name: LITERAL('length')
        result: Var#2<$length>
    Expr_FuncCall
        name: LITERAL('fread')
        args[0]: Var#1<$handle>
        args[1]: Var#2<$length>
        result: Var#3
    Expr_Assign
        var: Var#4<$data>
        expr: Var#3
        result: Var#5
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#6
    Expr_BinaryOp_Identical
        left: Var#4<$data>
        right: Var#6
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#8
    Terminal_Return
        expr: Var#8

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#9<$length> = Phi(Var#2<$length>)
    Var#10<$data> = Phi(Var#4<$data>)
    Var#11<$handle> = Phi(Var#1<$handle>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#10<$data>
        result: Var#12
    Expr_BinaryOp_Minus
        left: Var#9<$length>
        right: Var#12
        result: Var#13
    Expr_Assign
        var: Var#14<$rest>
        expr: Var#13
        result: Var#15
    Expr_BinaryOp_Greater
        left: Var#14<$rest>
        right: LITERAL(0)
        result: Var#16
    Stmt_JumpIf
        cond: Var#16
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#17<$data> = Phi(Var#10<$data>)
    Var#18<$handle> = Phi(Var#11<$handle>)
    Var#19<$rest> = Phi(Var#14<$rest>)
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('rfread')
        args[0]: Var#18<$handle>
        args[1]: Var#19<$rest>
        result: Var#20
    Expr_BinaryOp_Concat
        left: Var#17<$data>
        right: Var#20
        result: Var#21
    Expr_Assign
        var: Var#22<$data>
        expr: Var#21
        result: Var#23
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#24<$data> = Phi(Var#22<$data>, Var#10<$data>)
    Terminal_Return
        expr: Var#24<$data>

Function TCPDF_STATIC::_freadint(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('f')
        result: Var#1<$f>
    Expr_FuncCall
        name: LITERAL('fread')
        args[0]: Var#1<$f>
        args[1]: LITERAL(4)
        result: Var#2
    Expr_FuncCall
        name: LITERAL('unpack')
        args[0]: LITERAL('Ni')
        args[1]: Var#2
        result: Var#3
    Expr_Assign
        var: Var#4<$a>
        expr: Var#3
        result: Var#5
    Expr_ArrayDimFetch
        var: Var#4<$a>
        dim: LITERAL('i')
        result: Var#6
    Terminal_Return
        expr: Var#6

Function TCPDF_STATIC::getRandomSeed(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('seed')
        defaultVar: LITERAL('')
        result: Var#1<$seed>
        defaultBlock: Block#2
    Var#2<$_SERVER> = Phi()
    Expr_FuncCall
        name: LITERAL('microtime')
        result: Var#3
    Expr_BinaryOp_Concat
        left: Var#1<$seed>
        right: Var#3
        result: Var#4
    Expr_Assign
        var: Var#5<$seed>
        expr: Var#4
        result: Var#6
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('openssl_random_pseudo_bytes')
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('PHP_OS')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#8
        args[1]: LITERAL(0)
        args[2]: LITERAL(3)
        result: Var#9
    Expr_FuncCall
        name: LITERAL('strtoupper')
        args[0]: Var#9
        result: Var#10
    Expr_BinaryOp_NotIdentical
        left: Var#10
        right: LITERAL('WIN')
        result: Var#11
    Expr_Cast_Bool
        expr: Var#11
        result: Var#12
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Var#13 = Phi(LITERAL(false), Var#12)
    Var#14<$seed> = Phi(Var#5<$seed>)
    Var#15<$_SERVER> = Phi(Var#2<$_SERVER>)
    Stmt_JumpIf
        cond: Var#13
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#16<$seed> = Phi(Var#14<$seed>)
    Expr_FuncCall
        name: LITERAL('openssl_random_pseudo_bytes')
        args[0]: LITERAL(512)
        result: Var#17
    Expr_BinaryOp_Concat
        left: Var#16<$seed>
        right: Var#17
        result: Var#18
    Expr_Assign
        var: Var#19<$seed>
        expr: Var#18
        result: Var#20
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Expr_Assign
        var: Var#21<$i>
        expr: LITERAL(0)
        result: Var#22
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Parent: Block#15
    Var#23<$seed> = Phi(Var#19<$seed>, Var#24<$seed>)
    Var#25<$_SERVER> = Phi(Var#15<$_SERVER>, Var#26<$_SERVER>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#27
    Expr_FuncCall
        name: LITERAL('uniqid')
        args[0]: LITERAL('')
        args[1]: Var#27
        result: Var#28
    Expr_BinaryOp_Concat
        left: Var#23<$seed>
        right: Var#28
        result: Var#29
    Expr_Assign
        var: Var#30<$seed>
        expr: Var#29
        result: Var#31
    Expr_FuncCall
        name: LITERAL('rand')
        result: Var#32
    Expr_BinaryOp_Concat
        left: Var#30<$seed>
        right: Var#32
        result: Var#33
    Expr_Assign
        var: Var#34<$seed>
        expr: Var#33
        result: Var#35
    Expr_BinaryOp_Concat
        left: Var#34<$seed>
        right: LITERAL('/home/snoarlax/Documents/ProjectPartII/php-cfg-master/transformtocfg.php')
        result: Var#36
    Expr_Assign
        var: Var#37<$seed>
        expr: Var#36
        result: Var#38
    Expr_ArrayDimFetch
        var: Var#25<$_SERVER>
        dim: LITERAL('REMOTE_ADDR')
        result: Var#39
    Expr_Isset
        vars[0]: Var#39
        result: Var#40
    Stmt_JumpIf
        cond: Var#40
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#6
    Parent: Block#14
    Var#41<$i> = Phi(Var#21<$i>, Var#42<$i>)
    Var#24<$seed> = Phi(Var#14<$seed>, Var#43<$seed>)
    Var#26<$_SERVER> = Phi(Var#15<$_SERVER>)
    Expr_BinaryOp_Smaller
        left: Var#41<$i>
        right: LITERAL(23)
        result: Var#44
    Stmt_JumpIf
        cond: Var#44
        if: Block#11
        else: Block#12

Block#9
    Parent: Block#7
    Var#45<$seed> = Phi(Var#37<$seed>)
    Var#46<$_SERVER> = Phi(Var#25<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#46<$_SERVER>
        dim: LITERAL('REMOTE_ADDR')
        result: Var#47
    Expr_BinaryOp_Concat
        left: Var#45<$seed>
        right: Var#47
        result: Var#48
    Expr_Assign
        var: Var#49<$seed>
        expr: Var#48
        result: Var#50
    Stmt_Jump
        target: Block#13

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#13

Block#11
    Parent: Block#8
    Var#51<$seed> = Phi(Var#24<$seed>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#52
    Expr_FuncCall
        name: LITERAL('uniqid')
        args[0]: LITERAL('')
        args[1]: Var#52
        result: Var#53
    Expr_BinaryOp_Concat
        left: Var#51<$seed>
        right: Var#53
        result: Var#54
    Expr_Assign
        var: Var#43<$seed>
        expr: Var#54
        result: Var#55
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#8
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#9
    Parent: Block#10
    Var#56<$_SERVER> = Phi(Var#46<$_SERVER>, Var#25<$_SERVER>)
    Var#57<$seed> = Phi(Var#49<$seed>, Var#37<$seed>)
    Expr_ArrayDimFetch
        var: Var#56<$_SERVER>
        dim: LITERAL('HTTP_USER_AGENT')
        result: Var#58
    Expr_Isset
        vars[0]: Var#58
        result: Var#59
    Stmt_JumpIf
        cond: Var#59
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#11
    Var#60<$i> = Phi(Var#41<$i>)
    Expr_BinaryOp_Plus
        left: Var#60<$i>
        right: LITERAL(1)
        result: Var#61
    Expr_Assign
        var: Var#42<$i>
        expr: Var#61
        result: Var#62
    Stmt_Jump
        target: Block#8

Block#15
    Parent: Block#12
    Stmt_Jump
        target: Block#7

Block#16
    Parent: Block#13
    Var#63<$seed> = Phi(Var#57<$seed>)
    Var#64<$_SERVER> = Phi(Var#56<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#64<$_SERVER>
        dim: LITERAL('HTTP_USER_AGENT')
        result: Var#65
    Expr_BinaryOp_Concat
        left: Var#63<$seed>
        right: Var#65
        result: Var#66
    Expr_Assign
        var: Var#67<$seed>
        expr: Var#66
        result: Var#68
    Stmt_Jump
        target: Block#18

Block#17
    Parent: Block#13
    Stmt_Jump
        target: Block#18

Block#18
    Parent: Block#16
    Parent: Block#17
    Var#69<$_SERVER> = Phi(Var#64<$_SERVER>, Var#56<$_SERVER>)
    Var#70<$seed> = Phi(Var#67<$seed>, Var#57<$seed>)
    Expr_ArrayDimFetch
        var: Var#69<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT')
        result: Var#71
    Expr_Isset
        vars[0]: Var#71
        result: Var#72
    Stmt_JumpIf
        cond: Var#72
        if: Block#19
        else: Block#20

Block#19
    Parent: Block#18
    Var#73<$seed> = Phi(Var#70<$seed>)
    Var#74<$_SERVER> = Phi(Var#69<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#74<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT')
        result: Var#75
    Expr_BinaryOp_Concat
        left: Var#73<$seed>
        right: Var#75
        result: Var#76
    Expr_Assign
        var: Var#77<$seed>
        expr: Var#76
        result: Var#78
    Stmt_Jump
        target: Block#21

Block#20
    Parent: Block#18
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#19
    Parent: Block#20
    Var#79<$_SERVER> = Phi(Var#74<$_SERVER>, Var#69<$_SERVER>)
    Var#80<$seed> = Phi(Var#77<$seed>, Var#70<$seed>)
    Expr_ArrayDimFetch
        var: Var#79<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_ENCODING')
        result: Var#81
    Expr_Isset
        vars[0]: Var#81
        result: Var#82
    Stmt_JumpIf
        cond: Var#82
        if: Block#22
        else: Block#23

Block#22
    Parent: Block#21
    Var#83<$seed> = Phi(Var#80<$seed>)
    Var#84<$_SERVER> = Phi(Var#79<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#84<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_ENCODING')
        result: Var#85
    Expr_BinaryOp_Concat
        left: Var#83<$seed>
        right: Var#85
        result: Var#86
    Expr_Assign
        var: Var#87<$seed>
        expr: Var#86
        result: Var#88
    Stmt_Jump
        target: Block#24

Block#23
    Parent: Block#21
    Stmt_Jump
        target: Block#24

Block#24
    Parent: Block#22
    Parent: Block#23
    Var#89<$_SERVER> = Phi(Var#84<$_SERVER>, Var#79<$_SERVER>)
    Var#90<$seed> = Phi(Var#87<$seed>, Var#80<$seed>)
    Expr_ArrayDimFetch
        var: Var#89<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_LANGUAGE')
        result: Var#91
    Expr_Isset
        vars[0]: Var#91
        result: Var#92
    Stmt_JumpIf
        cond: Var#92
        if: Block#25
        else: Block#26

Block#25
    Parent: Block#24
    Var#93<$seed> = Phi(Var#90<$seed>)
    Var#94<$_SERVER> = Phi(Var#89<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#94<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_LANGUAGE')
        result: Var#95
    Expr_BinaryOp_Concat
        left: Var#93<$seed>
        right: Var#95
        result: Var#96
    Expr_Assign
        var: Var#97<$seed>
        expr: Var#96
        result: Var#98
    Stmt_Jump
        target: Block#27

Block#26
    Parent: Block#24
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#25
    Parent: Block#26
    Var#99<$_SERVER> = Phi(Var#94<$_SERVER>, Var#89<$_SERVER>)
    Var#100<$seed> = Phi(Var#97<$seed>, Var#90<$seed>)
    Expr_ArrayDimFetch
        var: Var#99<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_CHARSET')
        result: Var#101
    Expr_Isset
        vars[0]: Var#101
        result: Var#102
    Stmt_JumpIf
        cond: Var#102
        if: Block#28
        else: Block#29

Block#28
    Parent: Block#27
    Var#103<$seed> = Phi(Var#100<$seed>)
    Var#104<$_SERVER> = Phi(Var#99<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#104<$_SERVER>
        dim: LITERAL('HTTP_ACCEPT_CHARSET')
        result: Var#105
    Expr_BinaryOp_Concat
        left: Var#103<$seed>
        right: Var#105
        result: Var#106
    Expr_Assign
        var: Var#107<$seed>
        expr: Var#106
        result: Var#108
    Stmt_Jump
        target: Block#30

Block#29
    Parent: Block#27
    Stmt_Jump
        target: Block#30

Block#30
    Parent: Block#28
    Parent: Block#29
    Var#109<$seed> = Phi(Var#107<$seed>, Var#100<$seed>)
    Expr_FuncCall
        name: LITERAL('rand')
        result: Var#110
    Expr_BinaryOp_Concat
        left: Var#109<$seed>
        right: Var#110
        result: Var#111
    Expr_Assign
        var: Var#112<$seed>
        expr: Var#111
        result: Var#113
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#114
    Expr_FuncCall
        name: LITERAL('uniqid')
        args[0]: LITERAL('')
        args[1]: Var#114
        result: Var#115
    Expr_BinaryOp_Concat
        left: Var#112<$seed>
        right: Var#115
        result: Var#116
    Expr_Assign
        var: Var#117<$seed>
        expr: Var#116
        result: Var#118
    Expr_FuncCall
        name: LITERAL('microtime')
        result: Var#119
    Expr_BinaryOp_Concat
        left: Var#117<$seed>
        right: Var#119
        result: Var#120
    Expr_Assign
        var: Var#121<$seed>
        expr: Var#120
        result: Var#122
    Terminal_Return
        expr: Var#121<$seed>

Function TCPDF_STATIC::_md5_16(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('str')
        result: Var#1<$str>
    Expr_FuncCall
        name: LITERAL('md5')
        args[0]: Var#1<$str>
        result: Var#2
    Expr_FuncCall
        name: LITERAL('pack')
        args[0]: LITERAL('H*')
        args[1]: Var#2
        result: Var#3
    Terminal_Return
        expr: Var#3

Function TCPDF_STATIC::_AES(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('key')
        result: Var#1<$key>
    Expr_Param
        declaredType: mixed
        name: LITERAL('text')
        result: Var#2<$text>
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#2<$text>
        result: Var#3
    Expr_BinaryOp_Mod
        left: Var#3
        right: LITERAL(16)
        result: Var#4
    Expr_BinaryOp_Minus
        left: LITERAL(16)
        right: Var#4
        result: Var#5
    Expr_Assign
        var: Var#6<$padding>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: Var#6<$padding>
        result: Var#8
    Expr_FuncCall
        name: LITERAL('str_repeat')
        args[0]: Var#8
        args[1]: Var#6<$padding>
        result: Var#9
    Expr_BinaryOp_Concat
        left: Var#2<$text>
        right: Var#9
        result: Var#10
    Expr_Assign
        var: Var#11<$text>
        expr: Var#10
        result: Var#12
    Expr_ConstFetch
        name: LITERAL('MCRYPT_RIJNDAEL_128')
        result: Var#13
    Expr_ConstFetch
        name: LITERAL('MCRYPT_MODE_CBC')
        result: Var#14
    Expr_FuncCall
        name: LITERAL('mcrypt_get_iv_size')
        args[0]: Var#13
        args[1]: Var#14
        result: Var#15
    Expr_ConstFetch
        name: LITERAL('MCRYPT_RAND')
        result: Var#16
    Expr_FuncCall
        name: LITERAL('mcrypt_create_iv')
        args[0]: Var#15
        args[1]: Var#16
        result: Var#17
    Expr_Assign
        var: Var#18<$iv>
        expr: Var#17
        result: Var#19
    Expr_ConstFetch
        name: LITERAL('MCRYPT_RIJNDAEL_128')
        result: Var#20
    Expr_ConstFetch
        name: LITERAL('MCRYPT_MODE_CBC')
        result: Var#21
    Expr_FuncCall
        name: LITERAL('mcrypt_encrypt')
        args[0]: Var#20
        args[1]: Var#1<$key>
        args[2]: Var#11<$text>
        args[3]: Var#21
        args[4]: Var#18<$iv>
        result: Var#22
    Expr_Assign
        var: Var#23<$text>
        expr: Var#22
        result: Var#24
    Expr_BinaryOp_Concat
        left: Var#18<$iv>
        right: Var#23<$text>
        result: Var#25
    Expr_Assign
        var: Var#26<$text>
        expr: Var#25
        result: Var#27
    Terminal_Return
        expr: Var#26<$text>

Function TCPDF_STATIC::_RC4(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('key')
        result: Var#1<$key>
    Expr_Param
        declaredType: mixed
        name: LITERAL('text')
        result: Var#2<$text>
    Expr_Param
        declaredType: mixed
        name: LITERAL('last_enc_key')
        result: Var#3<$last_enc_key>
    Expr_Param
        declaredType: mixed
        name: LITERAL('last_enc_key_c')
        result: Var#4<$last_enc_key_c>
    Var#5<$out> = Phi()
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('mcrypt_encrypt')
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Parent: Block#7
    Var#7 = Phi(LITERAL(false), Var#8)
    Var#9<$out> = Phi(Var#5<$out>, Var#10<$out>)
    Var#11<$last_enc_key> = Phi(Var#3<$last_enc_key>)
    Var#12<$key> = Phi(Var#1<$key>, Var#13<$key>)
    Var#14<$last_enc_key_c> = Phi(Var#4<$last_enc_key_c>)
    Var#15<$text> = Phi(Var#2<$text>, Var#16<$text>)
    Stmt_JumpIf
        cond: Var#7
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Var#13<$key> = Phi(Var#1<$key>)
    Var#16<$text> = Phi(Var#2<$text>)
    Expr_ConstFetch
        name: LITERAL('MCRYPT_ARCFOUR')
        result: Var#17
    Expr_ConstFetch
        name: LITERAL('MCRYPT_MODE_STREAM')
        result: Var#18
    Expr_FuncCall
        name: LITERAL('mcrypt_encrypt')
        args[0]: Var#17
        args[1]: Var#13<$key>
        args[2]: Var#16<$text>
        args[3]: Var#18
        args[4]: LITERAL('')
        result: Var#19
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#20<$out> = Phi(Var#9<$out>)
    Terminal_Return
        expr: Var#20<$out>

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Expr_Assign
        var: Var#10<$out>
        expr: Var#19
        result: Var#21
    Expr_Cast_Bool
        expr: Var#21
        result: Var#8
    Stmt_Jump
        target: Block#3

Block#8
    Parent: Block#6
    Var#22<$last_enc_key> = Phi(Var#11<$last_enc_key>)
    Var#23<$key> = Phi(Var#12<$key>)
    Var#24<$last_enc_key_c> = Phi(Var#14<$last_enc_key_c>)
    Var#25<$text> = Phi(Var#15<$text>)
    Expr_BinaryOp_NotEqual
        left: Var#22<$last_enc_key>
        right: Var#23<$key>
        result: Var#26
    Stmt_JumpIf
        cond: Var#26
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#27<$key> = Phi(Var#23<$key>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#27<$key>
        result: Var#28
    Expr_BinaryOp_Div
        left: LITERAL(256)
        right: Var#28
        result: Var#29
    Expr_BinaryOp_Plus
        left: Var#29
        right: LITERAL(1)
        result: Var#30
    Expr_FuncCall
        name: LITERAL('str_repeat')
        args[0]: Var#27<$key>
        args[1]: Var#30
        result: Var#31
    Expr_Assign
        var: Var#32<$k>
        expr: Var#31
        result: Var#33
    Expr_FuncCall
        name: LITERAL('range')
        args[0]: LITERAL(0)
        args[1]: LITERAL(255)
        result: Var#34
    Expr_Assign
        var: Var#35<$rc4>
        expr: Var#34
        result: Var#36
    Expr_Assign
        var: Var#37<$j>
        expr: LITERAL(0)
        result: Var#38
    Expr_Assign
        var: Var#39<$i>
        expr: LITERAL(0)
        result: Var#40
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#8
    Var#41<$last_enc_key_c> = Phi(Var#24<$last_enc_key_c>)
    Expr_Assign
        var: Var#42<$rc4>
        expr: Var#41<$last_enc_key_c>
        result: Var#43
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#9
    Parent: Block#16
    Var#44<$i> = Phi(Var#39<$i>, Var#45<$i>)
    Var#46<$rc4> = Phi(Var#35<$rc4>, Var#47<$rc4>)
    Var#48<$j> = Phi(Var#37<$j>, Var#49<$j>)
    Var#50<$k> = Phi(Var#32<$k>, Var#51<$k>)
    Var#52<$key> = Phi(Var#27<$key>)
    Var#53<$text> = Phi(Var#25<$text>)
    Expr_BinaryOp_Smaller
        left: Var#44<$i>
        right: LITERAL(256)
        result: Var#54
    Stmt_JumpIf
        cond: Var#54
        if: Block#13
        else: Block#14

Block#12
    Parent: Block#17
    Parent: Block#10
    Var#55<$text> = Phi(Var#53<$text>, Var#25<$text>)
    Var#56<$rc4> = Phi(Var#57<$rc4>, Var#42<$rc4>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#55<$text>
        result: Var#58
    Expr_Assign
        var: Var#59<$len>
        expr: Var#58
        result: Var#60
    Expr_Assign
        var: Var#61<$a>
        expr: LITERAL(0)
        result: Var#62
    Expr_Assign
        var: Var#63<$b>
        expr: LITERAL(0)
        result: Var#64
    Expr_Assign
        var: Var#65<$out>
        expr: LITERAL('')
        result: Var#66
    Expr_Assign
        var: Var#67<$i>
        expr: LITERAL(0)
        result: Var#68
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#11
    Var#47<$rc4> = Phi(Var#46<$rc4>)
    Var#69<$i> = Phi(Var#44<$i>)
    Var#70<$j> = Phi(Var#48<$j>)
    Var#51<$k> = Phi(Var#50<$k>)
    Expr_ArrayDimFetch
        var: Var#47<$rc4>
        dim: Var#69<$i>
        result: Var#71
    Expr_Assign
        var: Var#72<$t>
        expr: Var#71
        result: Var#73
    Expr_BinaryOp_Plus
        left: Var#70<$j>
        right: Var#72<$t>
        result: Var#74
    Expr_ArrayDimFetch
        var: Var#51<$k>
        dim: Var#69<$i>
        result: Var#75
    Expr_FuncCall
        name: LITERAL('ord')
        args[0]: Var#75
        result: Var#76
    Expr_BinaryOp_Plus
        left: Var#74
        right: Var#76
        result: Var#77
    Expr_BinaryOp_Mod
        left: Var#77
        right: LITERAL(256)
        result: Var#78
    Expr_Assign
        var: Var#49<$j>
        expr: Var#78
        result: Var#79
    Expr_ArrayDimFetch
        var: Var#47<$rc4>
        dim: Var#49<$j>
        result: Var#80
    Expr_ArrayDimFetch
        var: Var#47<$rc4>
        dim: Var#69<$i>
        result: Var#81
    Expr_Assign
        var: Var#81
        expr: Var#80
        result: Var#82
    Expr_ArrayDimFetch
        var: Var#47<$rc4>
        dim: Var#49<$j>
        result: Var#83
    Expr_Assign
        var: Var#83
        expr: Var#72<$t>
        result: Var#84
    Stmt_Jump
        target: Block#16

Block#14
    Parent: Block#11
    Stmt_Jump
        target: Block#17

Block#15
    Parent: Block#12
    Parent: Block#20
    Var#85<$i> = Phi(Var#67<$i>, Var#86<$i>)
    Var#87<$len> = Phi(Var#59<$len>)
    Var#88<$a> = Phi(Var#61<$a>, Var#89<$a>)
    Var#90<$rc4> = Phi(Var#56<$rc4>, Var#91<$rc4>)
    Var#92<$b> = Phi(Var#63<$b>, Var#93<$b>)
    Var#94<$out> = Phi(Var#65<$out>, Var#95<$out>)
    Var#96<$text> = Phi(Var#55<$text>, Var#97<$text>)
    Expr_BinaryOp_Smaller
        left: Var#85<$i>
        right: Var#87<$len>
        result: Var#98
    Stmt_JumpIf
        cond: Var#98
        if: Block#18
        else: Block#19

Block#16
    Parent: Block#13
    Var#99<$i> = Phi(Var#69<$i>)
    Expr_BinaryOp_Plus
        left: Var#99<$i>
        right: LITERAL(1)
        result: Var#100
    Expr_Assign
        var: Var#45<$i>
        expr: Var#100
        result: Var#101
    Stmt_Jump
        target: Block#11

Block#17
    Parent: Block#14
    Var#102<$key> = Phi(Var#52<$key>)
    Var#57<$rc4> = Phi(Var#46<$rc4>)
    Expr_Assign
        var: Var#103<$last_enc_key>
        expr: Var#102<$key>
        result: Var#104
    Expr_Assign
        var: Var#105<$last_enc_key_c>
        expr: Var#57<$rc4>
        result: Var#106
    Stmt_Jump
        target: Block#12

Block#18
    Parent: Block#15
    Var#107<$a> = Phi(Var#88<$a>)
    Var#91<$rc4> = Phi(Var#90<$rc4>)
    Var#108<$b> = Phi(Var#92<$b>)
    Var#109<$out> = Phi(Var#94<$out>)
    Var#97<$text> = Phi(Var#96<$text>)
    Var#110<$i> = Phi(Var#85<$i>)
    Expr_BinaryOp_Plus
        left: Var#107<$a>
        right: LITERAL(1)
        result: Var#111
    Expr_BinaryOp_Mod
        left: Var#111
        right: LITERAL(256)
        result: Var#112
    Expr_Assign
        var: Var#89<$a>
        expr: Var#112
        result: Var#113
    Expr_ArrayDimFetch
        var: Var#91<$rc4>
        dim: Var#89<$a>
        result: Var#114
    Expr_Assign
        var: Var#115<$t>
        expr: Var#114
        result: Var#116
    Expr_BinaryOp_Plus
        left: Var#108<$b>
        right: Var#115<$t>
        result: Var#117
    Expr_BinaryOp_Mod
        left: Var#117
        right: LITERAL(256)
        result: Var#118
    Expr_Assign
        var: Var#93<$b>
        expr: Var#118
        result: Var#119
    Expr_ArrayDimFetch
        var: Var#91<$rc4>
        dim: Var#93<$b>
        result: Var#120
    Expr_ArrayDimFetch
        var: Var#91<$rc4>
        dim: Var#89<$a>
        result: Var#121
    Expr_Assign
        var: Var#121
        expr: Var#120
        result: Var#122
    Expr_ArrayDimFetch
        var: Var#91<$rc4>
        dim: Var#93<$b>
        result: Var#123
    Expr_Assign
        var: Var#123
        expr: Var#115<$t>
        result: Var#124
    Expr_ArrayDimFetch
        var: Var#91<$rc4>
        dim: Var#89<$a>
        result: Var#125
    Expr_ArrayDimFetch
        var: Var#91<$rc4>
        dim: Var#93<$b>
        result: Var#126
    Expr_BinaryOp_Plus
        left: Var#125
        right: Var#126
        result: Var#127
    Expr_BinaryOp_Mod
        left: Var#127
        right: LITERAL(256)
        result: Var#128
    Expr_ArrayDimFetch
        var: Var#91<$rc4>
        dim: Var#128
        result: Var#129
    Expr_Assign
        var: Var#130<$k>
        expr: Var#129
        result: Var#131
    Expr_ArrayDimFetch
        var: Var#97<$text>
        dim: Var#110<$i>
        result: Var#132
    Expr_FuncCall
        name: LITERAL('ord')
        args[0]: Var#132
        result: Var#133
    Expr_BinaryOp_BitwiseXor
        left: Var#133
        right: Var#130<$k>
        result: Var#134
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: Var#134
        result: Var#135
    Expr_BinaryOp_Concat
        left: Var#109<$out>
        right: Var#135
        result: Var#136
    Expr_Assign
        var: Var#95<$out>
        expr: Var#136
        result: Var#137
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#15
    Stmt_Jump
        target: Block#21

Block#20
    Parent: Block#18
    Var#138<$i> = Phi(Var#110<$i>)
    Expr_BinaryOp_Plus
        left: Var#138<$i>
        right: LITERAL(1)
        result: Var#139
    Expr_Assign
        var: Var#86<$i>
        expr: Var#139
        result: Var#140
    Stmt_Jump
        target: Block#15

Block#21
    Parent: Block#19
    Var#141<$out> = Phi(Var#94<$out>)
    Terminal_Return
        expr: Var#141<$out>

Function TCPDF_STATIC::getUserPermissionCode(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('permissions')
        result: Var#1<$permissions>
    Expr_Param
        declaredType: mixed
        name: LITERAL('mode')
        defaultVar: LITERAL(0)
        result: Var#2<$mode>
        defaultBlock: Block#2
    Expr_Array
        keys[0]: LITERAL('owner')
        keys[1]: LITERAL('print')
        keys[2]: LITERAL('modify')
        keys[3]: LITERAL('copy')
        keys[4]: LITERAL('annot-forms')
        keys[5]: LITERAL('fill-forms')
        keys[6]: LITERAL('extract')
        keys[7]: LITERAL('assemble')
        keys[8]: LITERAL('print-high')
        values[0]: LITERAL(2)
        values[1]: LITERAL(4)
        values[2]: LITERAL(8)
        values[3]: LITERAL(16)
        values[4]: LITERAL(32)
        values[5]: LITERAL(256)
        values[6]: LITERAL(512)
        values[7]: LITERAL(1024)
        values[8]: LITERAL(2048)
        result: Var#3
    Expr_Assign
        var: Var#4<$options>
        expr: Var#3
        result: Var#5
    Expr_Assign
        var: Var#6<$protection>
        expr: LITERAL(2147422012)
        result: Var#7
    Iterator_Reset
        var: Var#1<$permissions>
    Stmt_Jump
        target: Block#3

Block#2

Block#3
    Parent: Block#1
    Parent: Block#14
    Var#8<$options> = Phi(Var#4<$options>, Var#9<$options>)
    Var#10<$mode> = Phi(Var#2<$mode>, Var#11<$mode>)
    Var#12<$protection> = Phi(Var#6<$protection>, Var#13<$protection>)
    Iterator_Valid
        var: Var#1<$permissions>
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#15<$options> = Phi(Var#8<$options>)
    Iterator_Value
        var: Var#1<$permissions>
        result: Var#16
    Expr_Assign
        var: Var#17<$permission>
        expr: Var#16
        result: Var#18
    Expr_ArrayDimFetch
        var: Var#15<$options>
        dim: Var#17<$permission>
        result: Var#19
    Expr_Isset
        vars[0]: Var#19
        result: Var#20
    Stmt_JumpIf
        cond: Var#20
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#4
    Var#21<$mode> = Phi(Var#10<$mode>)
    Expr_BinaryOp_Greater
        left: Var#21<$mode>
        right: LITERAL(0)
        result: Var#22
    Stmt_JumpIf
        cond: Var#22
        if: Block#9
        else: Block#10

Block#7
    Parent: Block#4
    Stmt_Jump
        target: Block#11

Block#8
    Parent: Block#5
    Var#23<$protection> = Phi(Var#12<$protection>)
    Terminal_Return
        expr: Var#23<$protection>

Block#9
    Parent: Block#6
    Parent: Block#10
    Var#24 = Phi(LITERAL(true), Var#25)
    Var#26<$options> = Phi(Var#15<$options>, Var#27<$options>)
    Var#28<$mode> = Phi(Var#21<$mode>)
    Var#29<$permission> = Phi(Var#17<$permission>, Var#30<$permission>)
    Var#31<$protection> = Phi(Var#12<$protection>)
    Stmt_JumpIf
        cond: Var#24
        if: Block#12
        else: Block#13

Block#10
    Parent: Block#6
    Var#27<$options> = Phi(Var#15<$options>)
    Var#30<$permission> = Phi(Var#17<$permission>)
    Expr_ArrayDimFetch
        var: Var#27<$options>
        dim: Var#30<$permission>
        result: Var#32
    Expr_BinaryOp_SmallerOrEqual
        left: Var#32
        right: LITERAL(32)
        result: Var#33
    Expr_Cast_Bool
        expr: Var#33
        result: Var#25
    Stmt_Jump
        target: Block#9

Block#11
    Parent: Block#17
    Parent: Block#7
    Var#9<$options> = Phi(Var#34<$options>, Var#15<$options>)
    Var#11<$mode> = Phi(Var#35<$mode>, Var#10<$mode>)
    Var#13<$protection> = Phi(Var#36<$protection>, Var#12<$protection>)
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#9
    Var#37<$options> = Phi(Var#26<$options>)
    Var#38<$permission> = Phi(Var#29<$permission>)
    Expr_ArrayDimFetch
        var: Var#37<$options>
        dim: Var#38<$permission>
        result: Var#39
    Expr_BinaryOp_Equal
        left: Var#39
        right: LITERAL(2)
        result: Var#40
    Stmt_JumpIf
        cond: Var#40
        if: Block#15
        else: Block#16

Block#13
    Parent: Block#9
    Stmt_Jump
        target: Block#17

Block#14
    Parent: Block#11
    Stmt_Jump
        target: Block#3

Block#15
    Parent: Block#12
    Var#41<$protection> = Phi(Var#31<$protection>)
    Var#42<$options> = Phi(Var#37<$options>)
    Var#43<$permission> = Phi(Var#38<$permission>)
    Expr_ArrayDimFetch
        var: Var#42<$options>
        dim: Var#43<$permission>
        result: Var#44
    Expr_BinaryOp_Plus
        left: Var#41<$protection>
        right: Var#44
        result: Var#45
    Expr_Assign
        var: Var#46<$protection>
        expr: Var#45
        result: Var#47
    Stmt_Jump
        target: Block#18

Block#16
    Parent: Block#12
    Var#48<$protection> = Phi(Var#31<$protection>)
    Var#49<$options> = Phi(Var#37<$options>)
    Var#50<$permission> = Phi(Var#38<$permission>)
    Expr_ArrayDimFetch
        var: Var#49<$options>
        dim: Var#50<$permission>
        result: Var#51
    Expr_BinaryOp_Minus
        left: Var#48<$protection>
        right: Var#51
        result: Var#52
    Expr_Assign
        var: Var#53<$protection>
        expr: Var#52
        result: Var#54
    Stmt_Jump
        target: Block#18

Block#17
    Parent: Block#18
    Parent: Block#13
    Var#34<$options> = Phi(Var#55<$options>, Var#26<$options>)
    Var#35<$mode> = Phi(Var#56<$mode>, Var#28<$mode>)
    Var#36<$protection> = Phi(Var#57<$protection>, Var#31<$protection>)
    Stmt_Jump
        target: Block#11

Block#18
    Parent: Block#15
    Parent: Block#16
    Var#55<$options> = Phi(Var#42<$options>, Var#49<$options>)
    Var#56<$mode> = Phi(Var#28<$mode>)
    Var#57<$protection> = Phi(Var#46<$protection>, Var#53<$protection>)
    Stmt_Jump
        target: Block#17

Function TCPDF_STATIC::convertHexStringToString(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('bs')
        result: Var#1<$bs>
    Expr_Assign
        var: Var#2<$string>
        expr: LITERAL('')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#1<$bs>
        result: Var#4
    Expr_Assign
        var: Var#5<$bslength>
        expr: Var#4
        result: Var#6
    Expr_BinaryOp_Mod
        left: Var#5<$bslength>
        right: LITERAL(2)
        result: Var#7
    Expr_BinaryOp_NotEqual
        left: Var#7
        right: LITERAL(0)
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#9<$bs> = Phi(Var#1<$bs>)
    Var#10<$bslength> = Phi(Var#5<$bslength>)
    Expr_BinaryOp_Concat
        left: Var#9<$bs>
        right: LITERAL('0')
        result: Var#11
    Expr_Assign
        var: Var#12<$bs>
        expr: Var#11
        result: Var#13
    Expr_BinaryOp_Plus
        left: Var#10<$bslength>
        right: LITERAL(1)
        result: Var#14
    Expr_Assign
        var: Var#15<$bslength>
        expr: Var#14
        result: Var#16
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#17<$bslength> = Phi(Var#15<$bslength>, Var#5<$bslength>)
    Var#18<$string> = Phi(Var#2<$string>)
    Var#19<$bs> = Phi(Var#12<$bs>, Var#1<$bs>)
    Expr_Assign
        var: Var#20<$i>
        expr: LITERAL(0)
        result: Var#21
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Parent: Block#8
    Var#22<$i> = Phi(Var#20<$i>, Var#23<$i>)
    Var#24<$bslength> = Phi(Var#17<$bslength>)
    Var#25<$string> = Phi(Var#18<$string>, Var#26<$string>)
    Var#27<$bs> = Phi(Var#19<$bs>, Var#28<$bs>)
    Expr_BinaryOp_Smaller
        left: Var#22<$i>
        right: Var#24<$bslength>
        result: Var#29
    Stmt_JumpIf
        cond: Var#29
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#30<$string> = Phi(Var#25<$string>)
    Var#28<$bs> = Phi(Var#27<$bs>)
    Var#31<$i> = Phi(Var#22<$i>)
    Expr_ArrayDimFetch
        var: Var#28<$bs>
        dim: Var#31<$i>
        result: Var#32
    Expr_BinaryOp_Plus
        left: Var#31<$i>
        right: LITERAL(1)
        result: Var#33
    Expr_ArrayDimFetch
        var: Var#28<$bs>
        dim: Var#33
        result: Var#34
    Expr_BinaryOp_Concat
        left: Var#32
        right: Var#34
        result: Var#35
    Expr_FuncCall
        name: LITERAL('hexdec')
        args[0]: Var#35
        result: Var#36
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: Var#36
        result: Var#37
    Expr_BinaryOp_Concat
        left: Var#30<$string>
        right: Var#37
        result: Var#38
    Expr_Assign
        var: Var#26<$string>
        expr: Var#38
        result: Var#39
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#9

Block#8
    Parent: Block#6
    Var#40<$i> = Phi(Var#31<$i>)
    Expr_BinaryOp_Plus
        left: Var#40<$i>
        right: LITERAL(2)
        result: Var#41
    Expr_Assign
        var: Var#23<$i>
        expr: Var#41
        result: Var#42
    Stmt_Jump
        target: Block#5

Block#9
    Parent: Block#7
    Var#43<$string> = Phi(Var#25<$string>)
    Terminal_Return
        expr: Var#43<$string>

Function TCPDF_STATIC::convertStringToHexString(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('s')
        result: Var#1<$s>
    Expr_Assign
        var: Var#2<$bs>
        expr: LITERAL('')
        result: Var#3
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#4
    Expr_ConstFetch
        name: LITERAL('PREG_SPLIT_NO_EMPTY')
        result: Var#5
    Expr_FuncCall
        name: LITERAL('preg_split')
        args[0]: LITERAL('//')
        args[1]: Var#1<$s>
        args[2]: Var#4
        args[3]: Var#5
        result: Var#6
    Expr_Assign
        var: Var#7<$chars>
        expr: Var#6
        result: Var#8
    Iterator_Reset
        var: Var#7<$chars>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#5
    Var#9<$bs> = Phi(Var#2<$bs>, Var#10<$bs>)
    Iterator_Valid
        var: Var#7<$chars>
        result: Var#11
    Stmt_JumpIf
        cond: Var#11
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#12<$bs> = Phi(Var#9<$bs>)
    Iterator_Value
        var: Var#7<$chars>
        result: Var#13
    Expr_Assign
        var: Var#14<$c>
        expr: Var#13
        result: Var#15
    Expr_FuncCall
        name: LITERAL('ord')
        args[0]: Var#14<$c>
        result: Var#16
    Expr_FuncCall
        name: LITERAL('dechex')
        args[0]: Var#16
        result: Var#17
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%02s')
        args[1]: Var#17
        result: Var#18
    Expr_BinaryOp_Concat
        left: Var#12<$bs>
        right: Var#18
        result: Var#19
    Expr_Assign
        var: Var#10<$bs>
        expr: Var#19
        result: Var#20
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#2

Block#6
    Parent: Block#4
    Var#21<$bs> = Phi(Var#9<$bs>)
    Terminal_Return
        expr: Var#21<$bs>

Function TCPDF_STATIC::getEncPermissionsString(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('protection')
        result: Var#1<$protection>
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%032b')
        args[1]: Var#1<$protection>
        result: Var#2
    Expr_Assign
        var: Var#3<$binprot>
        expr: Var#2
        result: Var#4
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#3<$binprot>
        args[1]: LITERAL(24)
        args[2]: LITERAL(8)
        result: Var#5
    Expr_FuncCall
        name: LITERAL('bindec')
        args[0]: Var#5
        result: Var#6
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: Var#6
        result: Var#7
    Expr_Assign
        var: Var#8<$str>
        expr: Var#7
        result: Var#9
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#3<$binprot>
        args[1]: LITERAL(16)
        args[2]: LITERAL(8)
        result: Var#10
    Expr_FuncCall
        name: LITERAL('bindec')
        args[0]: Var#10
        result: Var#11
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: Var#11
        result: Var#12
    Expr_BinaryOp_Concat
        left: Var#8<$str>
        right: Var#12
        result: Var#13
    Expr_Assign
        var: Var#14<$str>
        expr: Var#13
        result: Var#15
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#3<$binprot>
        args[1]: LITERAL(8)
        args[2]: LITERAL(8)
        result: Var#16
    Expr_FuncCall
        name: LITERAL('bindec')
        args[0]: Var#16
        result: Var#17
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: Var#17
        result: Var#18
    Expr_BinaryOp_Concat
        left: Var#14<$str>
        right: Var#18
        result: Var#19
    Expr_Assign
        var: Var#20<$str>
        expr: Var#19
        result: Var#21
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#3<$binprot>
        args[1]: LITERAL(0)
        args[2]: LITERAL(8)
        result: Var#22
    Expr_FuncCall
        name: LITERAL('bindec')
        args[0]: Var#22
        result: Var#23
    Expr_FuncCall
        name: LITERAL('chr')
        args[0]: Var#23
        result: Var#24
    Expr_BinaryOp_Concat
        left: Var#20<$str>
        right: Var#24
        result: Var#25
    Expr_Assign
        var: Var#26<$str>
        expr: Var#25
        result: Var#27
    Terminal_Return
        expr: Var#26<$str>

Function TCPDF_STATIC::encodeNameObject(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('name')
        result: Var#1<$name>
    Expr_Assign
        var: Var#2<$escname>
        expr: LITERAL('')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#1<$name>
        result: Var#4
    Expr_Assign
        var: Var#5<$length>
        expr: Var#4
        result: Var#6
    Expr_Assign
        var: Var#7<$i>
        expr: LITERAL(0)
        result: Var#8
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#9
    Var#9<$i> = Phi(Var#7<$i>, Var#10<$i>)
    Var#11<$length> = Phi(Var#5<$length>, Var#12<$length>)
    Var#13<$name> = Phi(Var#1<$name>, Var#14<$name>)
    Var#15<$escname> = Phi(Var#2<$escname>, Var#16<$escname>)
    Expr_BinaryOp_Smaller
        left: Var#9<$i>
        right: Var#11<$length>
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#18<$name> = Phi(Var#13<$name>)
    Var#19<$i> = Phi(Var#9<$i>)
    Expr_ArrayDimFetch
        var: Var#18<$name>
        dim: Var#19<$i>
        result: Var#20
    Expr_Assign
        var: Var#21<$chr>
        expr: Var#20
        result: Var#22
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/[0-9a-zA-Z#_=-]/')
        args[1]: Var#21<$chr>
        result: Var#23
    Expr_BinaryOp_Equal
        left: Var#23
        right: LITERAL(1)
        result: Var#24
    Stmt_JumpIf
        cond: Var#24
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#25<$escname> = Phi(Var#15<$escname>)
    Var#26<$chr> = Phi(Var#21<$chr>)
    Expr_BinaryOp_Concat
        left: Var#25<$escname>
        right: Var#26<$chr>
        result: Var#27
    Expr_Assign
        var: Var#28<$escname>
        expr: Var#27
        result: Var#29
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Var#30<$escname> = Phi(Var#15<$escname>)
    Var#31<$chr> = Phi(Var#21<$chr>)
    Expr_FuncCall
        name: LITERAL('ord')
        args[0]: Var#31<$chr>
        result: Var#32
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('#%02X')
        args[1]: Var#32
        result: Var#33
    Expr_BinaryOp_Concat
        left: Var#30<$escname>
        right: Var#33
        result: Var#34
    Expr_Assign
        var: Var#35<$escname>
        expr: Var#34
        result: Var#36
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Var#37<$escname> = Phi(Var#15<$escname>)
    Terminal_Return
        expr: Var#37<$escname>

Block#8
    Parent: Block#5
    Parent: Block#6
    Var#12<$length> = Phi(Var#11<$length>)
    Var#14<$name> = Phi(Var#18<$name>)
    Var#16<$escname> = Phi(Var#28<$escname>, Var#35<$escname>)
    Var#38<$i> = Phi(Var#19<$i>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Var#39<$i> = Phi(Var#38<$i>)
    Expr_BinaryOp_Plus
        left: Var#39<$i>
        right: LITERAL(1)
        result: Var#40
    Expr_Assign
        var: Var#10<$i>
        expr: Var#40
        result: Var#41
    Stmt_Jump
        target: Block#2

Function TCPDF_STATIC::getAnnotOptFromJSProp(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('prop')
        result: Var#1<$prop>
    Expr_Param
        declaredType: mixed
        name: LITERAL('spot_colors')
        result: Var#2<$spot_colors>
    Expr_Param
        declaredType: mixed
        name: LITERAL('rtl')
        defaultVar: Var#3
        result: Var#4<$rtl>
        defaultBlock: Block#2
    Var#5<$ff> = Phi()
    Expr_ArrayDimFetch
        var: Var#1<$prop>
        dim: LITERAL('aopt')
        result: Var#6
    Expr_Isset
        vars[0]: Var#6
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#3

Block#3
    Parent: Block#1
    Var#8<$prop> = Phi(Var#1<$prop>)
    Expr_ArrayDimFetch
        var: Var#8<$prop>
        dim: LITERAL('aopt')
        result: Var#9
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#9
        result: Var#10
    Expr_Cast_Bool
        expr: Var#10
        result: Var#11
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Var#12 = Phi(LITERAL(false), Var#11)
    Var#13<$prop> = Phi(Var#1<$prop>, Var#8<$prop>)
    Var#14<$rtl> = Phi(Var#4<$rtl>)
    Var#15<$spot_colors> = Phi(Var#2<$spot_colors>)
    Var#16<$ff> = Phi(Var#5<$ff>)
    Stmt_JumpIf
        cond: Var#12
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#17<$prop> = Phi(Var#13<$prop>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#9
        result: Var#9
    Expr_ArrayDimFetch
        var: Var#17<$prop>
        dim: LITERAL('aopt')
        result: Var#18
    Terminal_Return
        expr: Var#18

Block#6
    Parent: Block#4
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#9
        result: Var#9
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#6
    Var#19<$prop> = Phi(Var#13<$prop>)
    Var#20<$rtl> = Phi(Var#14<$rtl>)
    Var#21<$spot_colors> = Phi(Var#15<$spot_colors>)
    Var#22<$ff> = Phi(Var#16<$ff>)
    Expr_Array
        result: Var#23
    Expr_Assign
        var: Var#24<$opt>
        expr: Var#23
        result: Var#25
    Expr_ArrayDimFetch
        var: Var#19<$prop>
        dim: LITERAL('alignment')
        result: Var#26
    Expr_Isset
        vars[0]: Var#26
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#28<$prop> = Phi(Var#19<$prop>)
    Expr_ArrayDimFetch
        var: Var#28<$prop>
        dim: LITERAL('alignment')
        result: Var#29
    Stmt_Switch
        cond: Var#29
        cases[0]: LITERAL('left')
        cases[1]: LITERAL('center')
        cases[2]: LITERAL('right')
        targets[0]: Block#10
        targets[1]: Block#11
        targets[2]: Block#12
        default: Block#13

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#14

Block#10
    Parent: Block#8
    Var#30<$opt> = Phi(Var#24<$opt>)
    Expr_ArrayDimFetch
        var: Var#30<$opt>
        dim: LITERAL('q')
        result: Var#31
    Expr_Assign
        var: Var#31
        expr: LITERAL(0)
        result: Var#32
    Stmt_Jump
        target: Block#15

Block#11
    Parent: Block#8
    Var#33<$opt> = Phi(Var#24<$opt>)
    Expr_ArrayDimFetch
        var: Var#33<$opt>
        dim: LITERAL('q')
        result: Var#34
    Expr_Assign
        var: Var#34
        expr: LITERAL(1)
        result: Var#35
    Stmt_Jump
        target: Block#15

Block#12
    Parent: Block#8
    Var#36<$opt> = Phi(Var#24<$opt>)
    Expr_ArrayDimFetch
        var: Var#36<$opt>
        dim: LITERAL('q')
        result: Var#37
    Expr_Assign
        var: Var#37
        expr: LITERAL(2)
        result: Var#38
    Stmt_Jump
        target: Block#15

Block#13
    Parent: Block#8
    Var#39<$rtl> = Phi(Var#20<$rtl>)
    Stmt_JumpIf
        cond: Var#39<$rtl>
        if: Block#16
        else: Block#17

Block#14
    Parent: Block#15
    Parent: Block#9
    Var#40<$prop> = Phi(Var#41<$prop>, Var#19<$prop>)
    Var#42<$opt> = Phi(Var#43<$opt>, Var#24<$opt>)
    Var#44<$spot_colors> = Phi(Var#45<$spot_colors>, Var#21<$spot_colors>)
    Var#46<$ff> = Phi(Var#47<$ff>, Var#22<$ff>)
    Expr_ArrayDimFetch
        var: Var#40<$prop>
        dim: LITERAL('lineWidth')
        result: Var#48
    Expr_Isset
        vars[0]: Var#48
        result: Var#49
    Stmt_JumpIf
        cond: Var#49
        if: Block#18
        else: Block#19

Block#15
    Parent: Block#10
    Parent: Block#11
    Parent: Block#12
    Parent: Block#20
    Var#41<$prop> = Phi(Var#50<$prop>, Var#28<$prop>, Var#51<$prop>)
    Var#43<$opt> = Phi(Var#52<$opt>, Var#30<$opt>, Var#33<$opt>, Var#36<$opt>, Var#53<$opt>)
    Var#45<$spot_colors> = Phi(Var#54<$spot_colors>, Var#21<$spot_colors>, Var#55<$spot_colors>)
    Var#47<$ff> = Phi(Var#56<$ff>, Var#22<$ff>, Var#57<$ff>)
    Stmt_Jump
        target: Block#14

Block#16
    Parent: Block#13
    Expr_Assign
        var: Var#58
        expr: LITERAL(2)
        result: Var#59
    Stmt_Jump
        target: Block#20

Block#17
    Parent: Block#13
    Expr_Assign
        var: Var#60
        expr: LITERAL(0)
        result: Var#61
    Stmt_Jump
        target: Block#20

Block#18
    Parent: Block#14
    Var#62<$prop> = Phi(Var#40<$prop>)
    Expr_ArrayDimFetch
        var: Var#62<$prop>
        dim: LITERAL('lineWidth')
        result: Var#63
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#63
        result: Var#64
    Expr_Assign
        var: Var#65<$linewidth>
        expr: Var#64
        result: Var#66
    Stmt_Jump
        target: Block#21

Block#19
    Parent: Block#14
    Expr_Assign
        var: Var#67<$linewidth>
        expr: LITERAL(1)
        result: Var#68
    Stmt_Jump
        target: Block#21

Block#20
    Parent: Block#16
    Parent: Block#17
    Var#69 = Phi(Var#58, Var#60)
    Var#53<$opt> = Phi(Var#24<$opt>)
    Var#51<$prop> = Phi(Var#28<$prop>)
    Var#55<$spot_colors> = Phi(Var#21<$spot_colors>)
    Var#57<$ff> = Phi(Var#22<$ff>)
    Expr_ArrayDimFetch
        var: Var#53<$opt>
        dim: LITERAL('q')
        result: Var#70
    Expr_Assign
        var: Var#70
        expr: Var#69
        result: Var#71
    Stmt_Jump
        target: Block#15

Block#21
    Parent: Block#18
    Parent: Block#19
    Var#72<$prop> = Phi(Var#62<$prop>, Var#40<$prop>)
    Var#73<$linewidth> = Phi(Var#65<$linewidth>, Var#67<$linewidth>)
    Var#74<$opt> = Phi(Var#42<$opt>)
    Var#75<$spot_colors> = Phi(Var#44<$spot_colors>)
    Var#76<$ff> = Phi(Var#46<$ff>)
    Expr_ArrayDimFetch
        var: Var#72<$prop>
        dim: LITERAL('borderStyle')
        result: Var#77
    Expr_Isset
        vars[0]: Var#77
        result: Var#78
    Stmt_JumpIf
        cond: Var#78
        if: Block#22
        else: Block#23

Block#22
    Parent: Block#21
    Var#79<$prop> = Phi(Var#72<$prop>)
    Expr_ArrayDimFetch
        var: Var#79<$prop>
        dim: LITERAL('borderStyle')
        result: Var#80
    Stmt_Switch
        cond: Var#80
        cases[0]: LITERAL('border.d')
        cases[1]: LITERAL('dashed')
        cases[2]: LITERAL('border.b')
        cases[3]: LITERAL('beveled')
        cases[4]: LITERAL('border.i')
        cases[5]: LITERAL('inset')
        cases[6]: LITERAL('border.u')
        cases[7]: LITERAL('underline')
        cases[8]: LITERAL('border.s')
        cases[9]: LITERAL('solid')
        targets[0]: Block#24
        targets[1]: Block#25
        targets[2]: Block#26
        targets[3]: Block#27
        targets[4]: Block#28
        targets[5]: Block#29
        targets[6]: Block#30
        targets[7]: Block#31
        targets[8]: Block#32
        targets[9]: Block#33
        default: Block#34

Block#23
    Parent: Block#21
    Stmt_Jump
        target: Block#35

Block#24
    Parent: Block#22
    Stmt_Jump
        target: Block#25

Block#25
    Parent: Block#22
    Parent: Block#24
    Var#81<$linewidth> = Phi(Var#73<$linewidth>)
    Var#82<$opt> = Phi(Var#74<$opt>)
    Var#83<$prop> = Phi(Var#79<$prop>)
    Var#84<$spot_colors> = Phi(Var#75<$spot_colors>)
    Var#85<$ff> = Phi(Var#76<$ff>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(3)
        values[1]: LITERAL(2)
        result: Var#86
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        keys[3]: NULL
        values[0]: LITERAL(0)
        values[1]: LITERAL(0)
        values[2]: Var#81<$linewidth>
        values[3]: Var#86
        result: Var#87
    Expr_ArrayDimFetch
        var: Var#82<$opt>
        dim: LITERAL('border')
        result: Var#88
    Expr_Assign
        var: Var#88
        expr: Var#87
        result: Var#89
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(3)
        values[1]: LITERAL(2)
        result: Var#90
    Expr_Array
        keys[0]: LITERAL('w')
        keys[1]: LITERAL('s')
        keys[2]: LITERAL('d')
        values[0]: Var#81<$linewidth>
        values[1]: LITERAL('D')
        values[2]: Var#90
        result: Var#91
    Expr_ArrayDimFetch
        var: Var#82<$opt>
        dim: LITERAL('bs')
        result: Var#92
    Expr_Assign
        var: Var#92
        expr: Var#91
        result: Var#93
    Stmt_Jump
        target: Block#36

Block#26
    Parent: Block#22
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#22
    Parent: Block#26
    Var#94<$linewidth> = Phi(Var#73<$linewidth>)
    Var#95<$opt> = Phi(Var#74<$opt>)
    Var#96<$prop> = Phi(Var#79<$prop>)
    Var#97<$spot_colors> = Phi(Var#75<$spot_colors>)
    Var#98<$ff> = Phi(Var#76<$ff>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        values[0]: LITERAL(0)
        values[1]: LITERAL(0)
        values[2]: Var#94<$linewidth>
        result: Var#99
    Expr_ArrayDimFetch
        var: Var#95<$opt>
        dim: LITERAL('border')
        result: Var#100
    Expr_Assign
        var: Var#100
        expr: Var#99
        result: Var#101
    Expr_Array
        keys[0]: LITERAL('w')
        keys[1]: LITERAL('s')
        values[0]: Var#94<$linewidth>
        values[1]: LITERAL('B')
        result: Var#102
    Expr_ArrayDimFetch
        var: Var#95<$opt>
        dim: LITERAL('bs')
        result: Var#103
    Expr_Assign
        var: Var#103
        expr: Var#102
        result: Var#104
    Stmt_Jump
        target: Block#36

Block#28
    Parent: Block#22
    Stmt_Jump
        target: Block#29

Block#29
    Parent: Block#22
    Parent: Block#28
    Var#105<$linewidth> = Phi(Var#73<$linewidth>)
    Var#106<$opt> = Phi(Var#74<$opt>)
    Var#107<$prop> = Phi(Var#79<$prop>)
    Var#108<$spot_colors> = Phi(Var#75<$spot_colors>)
    Var#109<$ff> = Phi(Var#76<$ff>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        values[0]: LITERAL(0)
        values[1]: LITERAL(0)
        values[2]: Var#105<$linewidth>
        result: Var#110
    Expr_ArrayDimFetch
        var: Var#106<$opt>
        dim: LITERAL('border')
        result: Var#111
    Expr_Assign
        var: Var#111
        expr: Var#110
        result: Var#112
    Expr_Array
        keys[0]: LITERAL('w')
        keys[1]: LITERAL('s')
        values[0]: Var#105<$linewidth>
        values[1]: LITERAL('I')
        result: Var#113
    Expr_ArrayDimFetch
        var: Var#106<$opt>
        dim: LITERAL('bs')
        result: Var#114
    Expr_Assign
        var: Var#114
        expr: Var#113
        result: Var#115
    Stmt_Jump
        target: Block#36

Block#30
    Parent: Block#22
    Stmt_Jump
        target: Block#31

Block#31
    Parent: Block#22
    Parent: Block#30
    Var#116<$linewidth> = Phi(Var#73<$linewidth>)
    Var#117<$opt> = Phi(Var#74<$opt>)
    Var#118<$prop> = Phi(Var#79<$prop>)
    Var#119<$spot_colors> = Phi(Var#75<$spot_colors>)
    Var#120<$ff> = Phi(Var#76<$ff>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        values[0]: LITERAL(0)
        values[1]: LITERAL(0)
        values[2]: Var#116<$linewidth>
        result: Var#121
    Expr_ArrayDimFetch
        var: Var#117<$opt>
        dim: LITERAL('border')
        result: Var#122
    Expr_Assign
        var: Var#122
        expr: Var#121
        result: Var#123
    Expr_Array
        keys[0]: LITERAL('w')
        keys[1]: LITERAL('s')
        values[0]: Var#116<$linewidth>
        values[1]: LITERAL('U')
        result: Var#124
    Expr_ArrayDimFetch
        var: Var#117<$opt>
        dim: LITERAL('bs')
        result: Var#125
    Expr_Assign
        var: Var#125
        expr: Var#124
        result: Var#126
    Stmt_Jump
        target: Block#36

Block#32
    Parent: Block#22
    Stmt_Jump
        target: Block#33

Block#33
    Parent: Block#22
    Parent: Block#32
    Var#127<$linewidth> = Phi(Var#73<$linewidth>)
    Var#128<$opt> = Phi(Var#74<$opt>)
    Var#129<$prop> = Phi(Var#79<$prop>)
    Var#130<$spot_colors> = Phi(Var#75<$spot_colors>)
    Var#131<$ff> = Phi(Var#76<$ff>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        values[0]: LITERAL(0)
        values[1]: LITERAL(0)
        values[2]: Var#127<$linewidth>
        result: Var#132
    Expr_ArrayDimFetch
        var: Var#128<$opt>
        dim: LITERAL('border')
        result: Var#133
    Expr_Assign
        var: Var#133
        expr: Var#132
        result: Var#134
    Expr_Array
        keys[0]: LITERAL('w')
        keys[1]: LITERAL('s')
        values[0]: Var#127<$linewidth>
        values[1]: LITERAL('S')
        result: Var#135
    Expr_ArrayDimFetch
        var: Var#128<$opt>
        dim: LITERAL('bs')
        result: Var#136
    Expr_Assign
        var: Var#136
        expr: Var#135
        result: Var#137
    Stmt_Jump
        target: Block#36

Block#34
    Parent: Block#22
    Stmt_Jump
        target: Block#36

Block#35
    Parent: Block#36
    Parent: Block#23
    Var#138<$prop> = Phi(Var#139<$prop>, Var#72<$prop>)
    Var#140<$opt> = Phi(Var#141<$opt>, Var#74<$opt>)
    Var#142<$spot_colors> = Phi(Var#143<$spot_colors>, Var#75<$spot_colors>)
    Var#144<$ff> = Phi(Var#145<$ff>, Var#76<$ff>)
    Expr_ArrayDimFetch
        var: Var#138<$prop>
        dim: LITERAL('border')
        result: Var#146
    Expr_Isset
        vars[0]: Var#146
        result: Var#147
    Stmt_JumpIf
        cond: Var#147
        if: Block#37
        else: Block#38

Block#36
    Parent: Block#25
    Parent: Block#27
    Parent: Block#29
    Parent: Block#31
    Parent: Block#33
    Parent: Block#34
    Var#139<$prop> = Phi(Var#148<$prop>, Var#83<$prop>, Var#96<$prop>, Var#107<$prop>, Var#118<$prop>, Var#129<$prop>, Var#79<$prop>)
    Var#141<$opt> = Phi(Var#149<$opt>, Var#82<$opt>, Var#95<$opt>, Var#106<$opt>, Var#117<$opt>, Var#128<$opt>, Var#74<$opt>)
    Var#143<$spot_colors> = Phi(Var#150<$spot_colors>, Var#84<$spot_colors>, Var#97<$spot_colors>, Var#108<$spot_colors>, Var#119<$spot_colors>, Var#130<$spot_colors>, Var#75<$spot_colors>)
    Var#145<$ff> = Phi(Var#151<$ff>, Var#85<$ff>, Var#98<$ff>, Var#109<$ff>, Var#120<$ff>, Var#131<$ff>, Var#76<$ff>)
    Stmt_Jump
        target: Block#35

Block#37
    Parent: Block#35
    Var#152<$prop> = Phi(Var#138<$prop>)
    Expr_ArrayDimFetch
        var: Var#152<$prop>
        dim: LITERAL('border')
        result: Var#153
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#153
        result: Var#154
    Expr_Cast_Bool
        expr: Var#154
        result: Var#155
    Stmt_Jump
        target: Block#38

Block#38
    Parent: Block#35
    Parent: Block#37
    Var#156 = Phi(LITERAL(false), Var#155)
    Var#157<$prop> = Phi(Var#138<$prop>, Var#152<$prop>)
    Var#158<$opt> = Phi(Var#140<$opt>)
    Var#159<$spot_colors> = Phi(Var#142<$spot_colors>)
    Var#160<$ff> = Phi(Var#144<$ff>)
    Stmt_JumpIf
        cond: Var#156
        if: Block#39
        else: Block#40

Block#39
    Parent: Block#38
    Var#161<$prop> = Phi(Var#157<$prop>)
    Var#162<$opt> = Phi(Var#158<$opt>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#153
        result: Var#153
    Expr_ArrayDimFetch
        var: Var#161<$prop>
        dim: LITERAL('border')
        result: Var#163
    Expr_ArrayDimFetch
        var: Var#162<$opt>
        dim: LITERAL('border')
        result: Var#164
    Expr_Assign
        var: Var#164
        expr: Var#163
        result: Var#165
    Stmt_Jump
        target: Block#41

Block#40
    Parent: Block#38
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#153
        result: Var#153
    Stmt_Jump
        target: Block#41

Block#41
    Parent: Block#39
    Parent: Block#40
    Var#166<$opt> = Phi(Var#162<$opt>, Var#158<$opt>)
    Var#167<$prop> = Phi(Var#161<$prop>, Var#157<$prop>)
    Var#168<$spot_colors> = Phi(Var#159<$spot_colors>)
    Var#169<$ff> = Phi(Var#160<$ff>)
    Expr_ArrayDimFetch
        var: Var#166<$opt>
        dim: LITERAL('mk')
        result: Var#170
    Expr_Isset
        vars[0]: Var#170
        result: Var#171
    Expr_BooleanNot
        expr: Var#171
        result: Var#172
    Stmt_JumpIf
        cond: Var#172
        if: Block#42
        else: Block#43

Block#42
    Parent: Block#41
    Var#173<$opt> = Phi(Var#166<$opt>)
    Expr_Array
        result: Var#174
    Expr_ArrayDimFetch
        var: Var#173<$opt>
        dim: LITERAL('mk')
        result: Var#175
    Expr_Assign
        var: Var#175
        expr: Var#174
        result: Var#176
    Stmt_Jump
        target: Block#44

Block#43
    Parent: Block#41
    Stmt_Jump
        target: Block#44

Block#44
    Parent: Block#42
    Parent: Block#43
    Var#177<$opt> = Phi(Var#173<$opt>, Var#166<$opt>)
    Var#178<$prop> = Phi(Var#167<$prop>)
    Var#179<$spot_colors> = Phi(Var#168<$spot_colors>)
    Var#180<$ff> = Phi(Var#169<$ff>)
    Expr_ArrayDimFetch
        var: Var#177<$opt>
        dim: LITERAL('mk')
        result: Var#181
    Expr_ArrayDimFetch
        var: Var#181
        dim: LITERAL('if')
        result: Var#182
    Expr_Isset
        vars[0]: Var#182
        result: Var#183
    Expr_BooleanNot
        expr: Var#183
        result: Var#184
    Stmt_JumpIf
        cond: Var#184
        if: Block#45
        else: Block#46

Block#45
    Parent: Block#44
    Var#185<$opt> = Phi(Var#177<$opt>)
    Expr_Array
        result: Var#186
    Expr_ArrayDimFetch
        var: Var#185<$opt>
        dim: LITERAL('mk')
        result: Var#187
    Expr_ArrayDimFetch
        var: Var#187
        dim: LITERAL('if')
        result: Var#188
    Expr_Assign
        var: Var#188
        expr: Var#186
        result: Var#189
    Stmt_Jump
        target: Block#47

Block#46
    Parent: Block#44
    Stmt_Jump
        target: Block#47

Block#47
    Parent: Block#45
    Parent: Block#46
    Var#190<$opt> = Phi(Var#185<$opt>, Var#177<$opt>)
    Var#191<$prop> = Phi(Var#178<$prop>)
    Var#192<$spot_colors> = Phi(Var#179<$spot_colors>)
    Var#193<$ff> = Phi(Var#180<$ff>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: LITERAL(0.5)
        values[1]: LITERAL(0.5)
        result: Var#194
    Expr_ArrayDimFetch
        var: Var#190<$opt>
        dim: LITERAL('mk')
        result: Var#195
    Expr_ArrayDimFetch
        var: Var#195
        dim: LITERAL('if')
        result: Var#196
    Expr_ArrayDimFetch
        var: Var#196
        dim: LITERAL('a')
        result: Var#197
    Expr_Assign
        var: Var#197
        expr: Var#194
        result: Var#198
    Expr_ArrayDimFetch
        var: Var#191<$prop>
        dim: LITERAL('buttonAlignX')
        result: Var#199
    Expr_Isset
        vars[0]: Var#199
        result: Var#200
    Stmt_JumpIf
        cond: Var#200
        if: Block#48
        else: Block#49

Block#48
    Parent: Block#47
    Var#201<$prop> = Phi(Var#191<$prop>)
    Var#202<$opt> = Phi(Var#190<$opt>)
    Expr_ArrayDimFetch
        var: Var#201<$prop>
        dim: LITERAL('buttonAlignX')
        result: Var#203
    Expr_ArrayDimFetch
        var: Var#202<$opt>
        dim: LITERAL('mk')
        result: Var#204
    Expr_ArrayDimFetch
        var: Var#204
        dim: LITERAL('if')
        result: Var#205
    Expr_ArrayDimFetch
        var: Var#205
        dim: LITERAL('a')
        result: Var#206
    Expr_ArrayDimFetch
        var: Var#206
        dim: LITERAL(0)
        result: Var#207
    Expr_Assign
        var: Var#207
        expr: Var#203
        result: Var#208
    Stmt_Jump
        target: Block#50

Block#49
    Parent: Block#47
    Stmt_Jump
        target: Block#50

Block#50
    Parent: Block#48
    Parent: Block#49
    Var#209<$prop> = Phi(Var#201<$prop>, Var#191<$prop>)
    Var#210<$opt> = Phi(Var#202<$opt>, Var#190<$opt>)
    Var#211<$spot_colors> = Phi(Var#192<$spot_colors>)
    Var#212<$ff> = Phi(Var#193<$ff>)
    Expr_ArrayDimFetch
        var: Var#209<$prop>
        dim: LITERAL('buttonAlignY')
        result: Var#213
    Expr_Isset
        vars[0]: Var#213
        result: Var#214
    Stmt_JumpIf
        cond: Var#214
        if: Block#51
        else: Block#52

Block#51
    Parent: Block#50
    Var#215<$prop> = Phi(Var#209<$prop>)
    Var#216<$opt> = Phi(Var#210<$opt>)
    Expr_ArrayDimFetch
        var: Var#215<$prop>
        dim: LITERAL('buttonAlignY')
        result: Var#217
    Expr_ArrayDimFetch
        var: Var#216<$opt>
        dim: LITERAL('mk')
        result: Var#218
    Expr_ArrayDimFetch
        var: Var#218
        dim: LITERAL('if')
        result: Var#219
    Expr_ArrayDimFetch
        var: Var#219
        dim: LITERAL('a')
        result: Var#220
    Expr_ArrayDimFetch
        var: Var#220
        dim: LITERAL(1)
        result: Var#221
    Expr_Assign
        var: Var#221
        expr: Var#217
        result: Var#222
    Stmt_Jump
        target: Block#53

Block#52
    Parent: Block#50
    Stmt_Jump
        target: Block#53

Block#53
    Parent: Block#51
    Parent: Block#52
    Var#223<$prop> = Phi(Var#215<$prop>, Var#209<$prop>)
    Var#224<$opt> = Phi(Var#216<$opt>, Var#210<$opt>)
    Var#225<$spot_colors> = Phi(Var#211<$spot_colors>)
    Var#226<$ff> = Phi(Var#212<$ff>)
    Expr_ArrayDimFetch
        var: Var#223<$prop>
        dim: LITERAL('buttonFitBounds')
        result: Var#227
    Expr_Isset
        vars[0]: Var#227
        result: Var#228
    Stmt_JumpIf
        cond: Var#228
        if: Block#54
        else: Block#55

Block#54
    Parent: Block#53
    Var#229<$prop> = Phi(Var#223<$prop>)
    Expr_ArrayDimFetch
        var: Var#229<$prop>
        dim: LITERAL('buttonFitBounds')
        result: Var#230
    Expr_BinaryOp_Equal
        left: Var#230
        right: LITERAL('true')
        result: Var#231
    Expr_Cast_Bool
        expr: Var#231
        result: Var#232
    Stmt_Jump
        target: Block#55

Block#55
    Parent: Block#53
    Parent: Block#54
    Var#233 = Phi(LITERAL(false), Var#232)
    Var#234<$opt> = Phi(Var#224<$opt>)
    Var#235<$prop> = Phi(Var#223<$prop>, Var#229<$prop>)
    Var#236<$spot_colors> = Phi(Var#225<$spot_colors>)
    Var#237<$ff> = Phi(Var#226<$ff>)
    Stmt_JumpIf
        cond: Var#233
        if: Block#56
        else: Block#57

Block#56
    Parent: Block#55
    Var#238<$opt> = Phi(Var#234<$opt>)
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#239
    Expr_ArrayDimFetch
        var: Var#238<$opt>
        dim: LITERAL('mk')
        result: Var#240
    Expr_ArrayDimFetch
        var: Var#240
        dim: LITERAL('if')
        result: Var#241
    Expr_ArrayDimFetch
        var: Var#241
        dim: LITERAL('fb')
        result: Var#242
    Expr_Assign
        var: Var#242
        expr: Var#239
        result: Var#243
    Stmt_Jump
        target: Block#58

Block#57
    Parent: Block#55
    Stmt_Jump
        target: Block#58

Block#58
    Parent: Block#56
    Parent: Block#57
    Var#244<$prop> = Phi(Var#235<$prop>)
    Var#245<$opt> = Phi(Var#238<$opt>, Var#234<$opt>)
    Var#246<$spot_colors> = Phi(Var#236<$spot_colors>)
    Var#247<$ff> = Phi(Var#237<$ff>)
    Expr_ArrayDimFetch
        var: Var#244<$prop>
        dim: LITERAL('buttonScaleHow')
        result: Var#248
    Expr_Isset
        vars[0]: Var#248
        result: Var#249
    Stmt_JumpIf
        cond: Var#249
        if: Block#59
        else: Block#60

Block#59
    Parent: Block#58
    Var#250<$prop> = Phi(Var#244<$prop>)
    Expr_ArrayDimFetch
        var: Var#250<$prop>
        dim: LITERAL('buttonScaleHow')
        result: Var#251
    Stmt_Switch
        cond: Var#251
        cases[0]: LITERAL('scaleHow.proportional')
        cases[1]: LITERAL('scaleHow.anamorphic')
        targets[0]: Block#61
        targets[1]: Block#62
        default: Block#63

Block#60
    Parent: Block#58
    Stmt_Jump
        target: Block#64

Block#61
    Parent: Block#59
    Var#252<$opt> = Phi(Var#245<$opt>)
    Expr_ArrayDimFetch
        var: Var#252<$opt>
        dim: LITERAL('mk')
        result: Var#253
    Expr_ArrayDimFetch
        var: Var#253
        dim: LITERAL('if')
        result: Var#254
    Expr_ArrayDimFetch
        var: Var#254
        dim: LITERAL('s')
        result: Var#255
    Expr_Assign
        var: Var#255
        expr: LITERAL('P')
        result: Var#256
    Stmt_Jump
        target: Block#65

Block#62
    Parent: Block#59
    Var#257<$opt> = Phi(Var#245<$opt>)
    Expr_ArrayDimFetch
        var: Var#257<$opt>
        dim: LITERAL('mk')
        result: Var#258
    Expr_ArrayDimFetch
        var: Var#258
        dim: LITERAL('if')
        result: Var#259
    Expr_ArrayDimFetch
        var: Var#259
        dim: LITERAL('s')
        result: Var#260
    Expr_Assign
        var: Var#260
        expr: LITERAL('A')
        result: Var#261
    Stmt_Jump
        target: Block#65

Block#63
    Var#262<$prop> = Phi()
    Var#263<$opt> = Phi()
    Var#264<$spot_colors> = Phi()
    Var#265<$ff> = Phi()
    Stmt_Jump
        target: Block#65

Block#64
    Parent: Block#65
    Parent: Block#60
    Var#266<$prop> = Phi(Var#267<$prop>, Var#244<$prop>)
    Var#268<$opt> = Phi(Var#269<$opt>, Var#245<$opt>)
    Var#270<$spot_colors> = Phi(Var#271<$spot_colors>, Var#246<$spot_colors>)
    Var#272<$ff> = Phi(Var#273<$ff>, Var#247<$ff>)
    Expr_ArrayDimFetch
        var: Var#266<$prop>
        dim: LITERAL('buttonScaleWhen')
        result: Var#274
    Expr_Isset
        vars[0]: Var#274
        result: Var#275
    Stmt_JumpIf
        cond: Var#275
        if: Block#66
        else: Block#67

Block#65
    Parent: Block#63
    Parent: Block#61
    Parent: Block#62
    Var#267<$prop> = Phi(Var#262<$prop>, Var#250<$prop>)
    Var#269<$opt> = Phi(Var#263<$opt>, Var#252<$opt>, Var#257<$opt>)
    Var#271<$spot_colors> = Phi(Var#264<$spot_colors>, Var#246<$spot_colors>)
    Var#273<$ff> = Phi(Var#265<$ff>, Var#247<$ff>)
    Stmt_Jump
        target: Block#64

Block#66
    Parent: Block#64
    Var#276<$prop> = Phi(Var#266<$prop>)
    Expr_ArrayDimFetch
        var: Var#276<$prop>
        dim: LITERAL('buttonScaleWhen')
        result: Var#277
    Stmt_Switch
        cond: Var#277
        cases[0]: LITERAL('scaleWhen.always')
        cases[1]: LITERAL('scaleWhen.never')
        cases[2]: LITERAL('scaleWhen.tooBig')
        cases[3]: LITERAL('scaleWhen.tooSmall')
        targets[0]: Block#68
        targets[1]: Block#69
        targets[2]: Block#70
        targets[3]: Block#71
        default: Block#72

Block#67
    Parent: Block#64
    Stmt_Jump
        target: Block#73

Block#68
    Parent: Block#66
    Var#278<$opt> = Phi(Var#268<$opt>)
    Expr_ArrayDimFetch
        var: Var#278<$opt>
        dim: LITERAL('mk')
        result: Var#279
    Expr_ArrayDimFetch
        var: Var#279
        dim: LITERAL('if')
        result: Var#280
    Expr_ArrayDimFetch
        var: Var#280
        dim: LITERAL('sw')
        result: Var#281
    Expr_Assign
        var: Var#281
        expr: LITERAL('A')
        result: Var#282
    Stmt_Jump
        target: Block#74

Block#69
    Parent: Block#66
    Var#283<$opt> = Phi(Var#268<$opt>)
    Expr_ArrayDimFetch
        var: Var#283<$opt>
        dim: LITERAL('mk')
        result: Var#284
    Expr_ArrayDimFetch
        var: Var#284
        dim: LITERAL('if')
        result: Var#285
    Expr_ArrayDimFetch
        var: Var#285
        dim: LITERAL('sw')
        result: Var#286
    Expr_Assign
        var: Var#286
        expr: LITERAL('N')
        result: Var#287
    Stmt_Jump
        target: Block#74

Block#70
    Parent: Block#66
    Var#288<$opt> = Phi(Var#268<$opt>)
    Expr_ArrayDimFetch
        var: Var#288<$opt>
        dim: LITERAL('mk')
        result: Var#289
    Expr_ArrayDimFetch
        var: Var#289
        dim: LITERAL('if')
        result: Var#290
    Expr_ArrayDimFetch
        var: Var#290
        dim: LITERAL('sw')
        result: Var#291
    Expr_Assign
        var: Var#291
        expr: LITERAL('B')
        result: Var#292
    Stmt_Jump
        target: Block#74

Block#71
    Parent: Block#66
    Var#293<$opt> = Phi(Var#268<$opt>)
    Expr_ArrayDimFetch
        var: Var#293<$opt>
        dim: LITERAL('mk')
        result: Var#294
    Expr_ArrayDimFetch
        var: Var#294
        dim: LITERAL('if')
        result: Var#295
    Expr_ArrayDimFetch
        var: Var#295
        dim: LITERAL('sw')
        result: Var#296
    Expr_Assign
        var: Var#296
        expr: LITERAL('S')
        result: Var#297
    Stmt_Jump
        target: Block#74

Block#72
    Var#298<$prop> = Phi()
    Var#299<$opt> = Phi()
    Var#300<$spot_colors> = Phi()
    Var#301<$ff> = Phi()
    Stmt_Jump
        target: Block#74

Block#73
    Parent: Block#74
    Parent: Block#67
    Var#302<$prop> = Phi(Var#303<$prop>, Var#266<$prop>)
    Var#304<$opt> = Phi(Var#305<$opt>, Var#268<$opt>)
    Var#306<$spot_colors> = Phi(Var#307<$spot_colors>, Var#270<$spot_colors>)
    Var#308<$ff> = Phi(Var#309<$ff>, Var#272<$ff>)
    Expr_ArrayDimFetch
        var: Var#302<$prop>
        dim: LITERAL('buttonPosition')
        result: Var#310
    Expr_Isset
        vars[0]: Var#310
        result: Var#311
    Stmt_JumpIf
        cond: Var#311
        if: Block#75
        else: Block#76

Block#74
    Parent: Block#72
    Parent: Block#68
    Parent: Block#69
    Parent: Block#70
    Parent: Block#71
    Var#303<$prop> = Phi(Var#298<$prop>, Var#276<$prop>)
    Var#305<$opt> = Phi(Var#299<$opt>, Var#278<$opt>, Var#283<$opt>, Var#288<$opt>, Var#293<$opt>)
    Var#307<$spot_colors> = Phi(Var#300<$spot_colors>, Var#270<$spot_colors>)
    Var#309<$ff> = Phi(Var#301<$ff>, Var#272<$ff>)
    Stmt_Jump
        target: Block#73

Block#75
    Parent: Block#73
    Var#312<$prop> = Phi(Var#302<$prop>)
    Expr_ArrayDimFetch
        var: Var#312<$prop>
        dim: LITERAL('buttonPosition')
        result: Var#313
    Stmt_Switch
        cond: Var#313
        cases[0]: LITERAL(0)
        cases[1]: LITERAL('position.textOnly')
        cases[2]: LITERAL(1)
        cases[3]: LITERAL('position.iconOnly')
        cases[4]: LITERAL(2)
        cases[5]: LITERAL('position.iconTextV')
        cases[6]: LITERAL(3)
        cases[7]: LITERAL('position.textIconV')
        cases[8]: LITERAL(4)
        cases[9]: LITERAL('position.iconTextH')
        cases[10]: LITERAL(5)
        cases[11]: LITERAL('position.textIconH')
        cases[12]: LITERAL(6)
        cases[13]: LITERAL('position.overlay')
        targets[0]: Block#77
        targets[1]: Block#78
        targets[2]: Block#79
        targets[3]: Block#80
        targets[4]: Block#81
        targets[5]: Block#82
        targets[6]: Block#83
        targets[7]: Block#84
        targets[8]: Block#85
        targets[9]: Block#86
        targets[10]: Block#87
        targets[11]: Block#88
        targets[12]: Block#89
        targets[13]: Block#90
        default: Block#91

Block#76
    Parent: Block#73
    Stmt_Jump
        target: Block#92

Block#77
    Parent: Block#75
    Stmt_Jump
        target: Block#78

Block#78
    Parent: Block#75
    Parent: Block#77
    Var#314<$opt> = Phi(Var#304<$opt>)
    Var#315<$prop> = Phi(Var#312<$prop>)
    Var#316<$spot_colors> = Phi(Var#306<$spot_colors>)
    Var#317<$ff> = Phi(Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#314<$opt>
        dim: LITERAL('mk')
        result: Var#318
    Expr_ArrayDimFetch
        var: Var#318
        dim: LITERAL('tp')
        result: Var#319
    Expr_Assign
        var: Var#319
        expr: LITERAL(0)
        result: Var#320
    Stmt_Jump
        target: Block#93

Block#79
    Parent: Block#75
    Stmt_Jump
        target: Block#80

Block#80
    Parent: Block#75
    Parent: Block#79
    Var#321<$opt> = Phi(Var#304<$opt>)
    Var#322<$prop> = Phi(Var#312<$prop>)
    Var#323<$spot_colors> = Phi(Var#306<$spot_colors>)
    Var#324<$ff> = Phi(Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#321<$opt>
        dim: LITERAL('mk')
        result: Var#325
    Expr_ArrayDimFetch
        var: Var#325
        dim: LITERAL('tp')
        result: Var#326
    Expr_Assign
        var: Var#326
        expr: LITERAL(1)
        result: Var#327
    Stmt_Jump
        target: Block#93

Block#81
    Parent: Block#75
    Stmt_Jump
        target: Block#82

Block#82
    Parent: Block#75
    Parent: Block#81
    Var#328<$opt> = Phi(Var#304<$opt>)
    Var#329<$prop> = Phi(Var#312<$prop>)
    Var#330<$spot_colors> = Phi(Var#306<$spot_colors>)
    Var#331<$ff> = Phi(Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#328<$opt>
        dim: LITERAL('mk')
        result: Var#332
    Expr_ArrayDimFetch
        var: Var#332
        dim: LITERAL('tp')
        result: Var#333
    Expr_Assign
        var: Var#333
        expr: LITERAL(2)
        result: Var#334
    Stmt_Jump
        target: Block#93

Block#83
    Parent: Block#75
    Stmt_Jump
        target: Block#84

Block#84
    Parent: Block#75
    Parent: Block#83
    Var#335<$opt> = Phi(Var#304<$opt>)
    Var#336<$prop> = Phi(Var#312<$prop>)
    Var#337<$spot_colors> = Phi(Var#306<$spot_colors>)
    Var#338<$ff> = Phi(Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#335<$opt>
        dim: LITERAL('mk')
        result: Var#339
    Expr_ArrayDimFetch
        var: Var#339
        dim: LITERAL('tp')
        result: Var#340
    Expr_Assign
        var: Var#340
        expr: LITERAL(3)
        result: Var#341
    Stmt_Jump
        target: Block#93

Block#85
    Parent: Block#75
    Stmt_Jump
        target: Block#86

Block#86
    Parent: Block#75
    Parent: Block#85
    Var#342<$opt> = Phi(Var#304<$opt>)
    Var#343<$prop> = Phi(Var#312<$prop>)
    Var#344<$spot_colors> = Phi(Var#306<$spot_colors>)
    Var#345<$ff> = Phi(Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#342<$opt>
        dim: LITERAL('mk')
        result: Var#346
    Expr_ArrayDimFetch
        var: Var#346
        dim: LITERAL('tp')
        result: Var#347
    Expr_Assign
        var: Var#347
        expr: LITERAL(4)
        result: Var#348
    Stmt_Jump
        target: Block#93

Block#87
    Parent: Block#75
    Stmt_Jump
        target: Block#88

Block#88
    Parent: Block#75
    Parent: Block#87
    Var#349<$opt> = Phi(Var#304<$opt>)
    Var#350<$prop> = Phi(Var#312<$prop>)
    Var#351<$spot_colors> = Phi(Var#306<$spot_colors>)
    Var#352<$ff> = Phi(Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#349<$opt>
        dim: LITERAL('mk')
        result: Var#353
    Expr_ArrayDimFetch
        var: Var#353
        dim: LITERAL('tp')
        result: Var#354
    Expr_Assign
        var: Var#354
        expr: LITERAL(5)
        result: Var#355
    Stmt_Jump
        target: Block#93

Block#89
    Parent: Block#75
    Stmt_Jump
        target: Block#90

Block#90
    Parent: Block#75
    Parent: Block#89
    Var#356<$opt> = Phi(Var#304<$opt>)
    Var#357<$prop> = Phi(Var#312<$prop>)
    Var#358<$spot_colors> = Phi(Var#306<$spot_colors>)
    Var#359<$ff> = Phi(Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#356<$opt>
        dim: LITERAL('mk')
        result: Var#360
    Expr_ArrayDimFetch
        var: Var#360
        dim: LITERAL('tp')
        result: Var#361
    Expr_Assign
        var: Var#361
        expr: LITERAL(6)
        result: Var#362
    Stmt_Jump
        target: Block#93

Block#91
    Var#363<$prop> = Phi()
    Var#364<$opt> = Phi()
    Var#365<$spot_colors> = Phi()
    Var#366<$ff> = Phi()
    Stmt_Jump
        target: Block#93

Block#92
    Parent: Block#93
    Parent: Block#76
    Var#367<$prop> = Phi(Var#368<$prop>, Var#302<$prop>)
    Var#369<$opt> = Phi(Var#370<$opt>, Var#304<$opt>)
    Var#371<$spot_colors> = Phi(Var#372<$spot_colors>, Var#306<$spot_colors>)
    Var#373<$ff> = Phi(Var#374<$ff>, Var#308<$ff>)
    Expr_ArrayDimFetch
        var: Var#367<$prop>
        dim: LITERAL('fillColor')
        result: Var#375
    Expr_Isset
        vars[0]: Var#375
        result: Var#376
    Stmt_JumpIf
        cond: Var#376
        if: Block#94
        else: Block#95

Block#93
    Parent: Block#91
    Parent: Block#78
    Parent: Block#80
    Parent: Block#82
    Parent: Block#84
    Parent: Block#86
    Parent: Block#88
    Parent: Block#90
    Var#368<$prop> = Phi(Var#363<$prop>, Var#315<$prop>, Var#322<$prop>, Var#329<$prop>, Var#336<$prop>, Var#343<$prop>, Var#350<$prop>, Var#357<$prop>)
    Var#370<$opt> = Phi(Var#364<$opt>, Var#314<$opt>, Var#321<$opt>, Var#328<$opt>, Var#335<$opt>, Var#342<$opt>, Var#349<$opt>, Var#356<$opt>)
    Var#372<$spot_colors> = Phi(Var#365<$spot_colors>, Var#316<$spot_colors>, Var#323<$spot_colors>, Var#330<$spot_colors>, Var#337<$spot_colors>, Var#344<$spot_colors>, Var#351<$spot_colors>, Var#358<$spot_colors>)
    Var#374<$ff> = Phi(Var#366<$ff>, Var#317<$ff>, Var#324<$ff>, Var#331<$ff>, Var#338<$ff>, Var#345<$ff>, Var#352<$ff>, Var#359<$ff>)
    Stmt_Jump
        target: Block#92

Block#94
    Parent: Block#92
    Var#377<$prop> = Phi(Var#367<$prop>)
    Expr_ArrayDimFetch
        var: Var#377<$prop>
        dim: LITERAL('fillColor')
        result: Var#378
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#378
        result: Var#379
    Stmt_JumpIf
        cond: Var#379
        if: Block#96
        else: Block#97

Block#95
    Parent: Block#92
    Stmt_Jump
        target: Block#98

Block#96
    Parent: Block#94
    Var#380<$prop> = Phi(Var#377<$prop>)
    Var#381<$opt> = Phi(Var#369<$opt>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#378
        result: Var#378
    Expr_ArrayDimFetch
        var: Var#380<$prop>
        dim: LITERAL('fillColor')
        result: Var#382
    Expr_ArrayDimFetch
        var: Var#381<$opt>
        dim: LITERAL('mk')
        result: Var#383
    Expr_ArrayDimFetch
        var: Var#383
        dim: LITERAL('bg')
        result: Var#384
    Expr_Assign
        var: Var#384
        expr: Var#382
        result: Var#385
    Stmt_Jump
        target: Block#99

Block#97
    Parent: Block#94
    Var#386<$prop> = Phi(Var#377<$prop>)
    Var#387<$spot_colors> = Phi(Var#371<$spot_colors>)
    Var#388<$opt> = Phi(Var#369<$opt>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#378
        result: Var#378
    Expr_ArrayDimFetch
        var: Var#386<$prop>
        dim: LITERAL('fillColor')
        result: Var#389
    Expr_StaticCall
        class: LITERAL('TCPDF_COLORS')
        name: LITERAL('convertHTMLColorToDec')
        args[0]: Var#389
        args[1]: Var#387<$spot_colors>
        result: Var#390
    Expr_ArrayDimFetch
        var: Var#388<$opt>
        dim: LITERAL('mk')
        result: Var#391
    Expr_ArrayDimFetch
        var: Var#391
        dim: LITERAL('bg')
        result: Var#392
    Expr_Assign
        var: Var#392
        expr: Var#390
        result: Var#393
    Stmt_Jump
        target: Block#99

Block#98
    Parent: Block#99
    Parent: Block#95
    Var#394<$prop> = Phi(Var#395<$prop>, Var#367<$prop>)
    Var#396<$opt> = Phi(Var#397<$opt>, Var#369<$opt>)
    Var#398<$spot_colors> = Phi(Var#399<$spot_colors>, Var#371<$spot_colors>)
    Var#400<$ff> = Phi(Var#401<$ff>, Var#373<$ff>)
    Expr_ArrayDimFetch
        var: Var#394<$prop>
        dim: LITERAL('strokeColor')
        result: Var#402
    Expr_Isset
        vars[0]: Var#402
        result: Var#403
    Stmt_JumpIf
        cond: Var#403
        if: Block#100
        else: Block#101

Block#99
    Parent: Block#96
    Parent: Block#97
    Var#395<$prop> = Phi(Var#380<$prop>, Var#386<$prop>)
    Var#397<$opt> = Phi(Var#381<$opt>, Var#388<$opt>)
    Var#399<$spot_colors> = Phi(Var#371<$spot_colors>, Var#387<$spot_colors>)
    Var#401<$ff> = Phi(Var#373<$ff>)
    Stmt_Jump
        target: Block#98

Block#100
    Parent: Block#98
    Var#404<$prop> = Phi(Var#394<$prop>)
    Expr_ArrayDimFetch
        var: Var#404<$prop>
        dim: LITERAL('strokeColor')
        result: Var#405
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#405
        result: Var#406
    Stmt_JumpIf
        cond: Var#406
        if: Block#102
        else: Block#103

Block#101
    Parent: Block#98
    Stmt_Jump
        target: Block#104

Block#102
    Parent: Block#100
    Var#407<$prop> = Phi(Var#404<$prop>)
    Var#408<$opt> = Phi(Var#396<$opt>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#405
        result: Var#405
    Expr_ArrayDimFetch
        var: Var#407<$prop>
        dim: LITERAL('strokeColor')
        result: Var#409
    Expr_ArrayDimFetch
        var: Var#408<$opt>
        dim: LITERAL('mk')
        result: Var#410
    Expr_ArrayDimFetch
        var: Var#410
        dim: LITERAL('bc')
        result: Var#411
    Expr_Assign
        var: Var#411
        expr: Var#409
        result: Var#412
    Stmt_Jump
        target: Block#105

Block#103
    Parent: Block#100
    Var#413<$prop> = Phi(Var#404<$prop>)
    Var#414<$spot_colors> = Phi(Var#398<$spot_colors>)
    Var#415<$opt> = Phi(Var#396<$opt>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#405
        result: Var#405
    Expr_ArrayDimFetch
        var: Var#413<$prop>
        dim: LITERAL('strokeColor')
        result: Var#416
    Expr_StaticCall
        class: LITERAL('TCPDF_COLORS')
        name: LITERAL('convertHTMLColorToDec')
        args[0]: Var#416
        args[1]: Var#414<$spot_colors>
        result: Var#417
    Expr_ArrayDimFetch
        var: Var#415<$opt>
        dim: LITERAL('mk')
        result: Var#418
    Expr_ArrayDimFetch
        var: Var#418
        dim: LITERAL('bc')
        result: Var#419
    Expr_Assign
        var: Var#419
        expr: Var#417
        result: Var#420
    Stmt_Jump
        target: Block#105

Block#104
    Parent: Block#105
    Parent: Block#101
    Var#421<$prop> = Phi(Var#422<$prop>, Var#394<$prop>)
    Var#423<$opt> = Phi(Var#424<$opt>, Var#396<$opt>)
    Var#425<$ff> = Phi(Var#426<$ff>, Var#400<$ff>)
    Expr_ArrayDimFetch
        var: Var#421<$prop>
        dim: LITERAL('rotation')
        result: Var#427
    Expr_Isset
        vars[0]: Var#427
        result: Var#428
    Stmt_JumpIf
        cond: Var#428
        if: Block#106
        else: Block#107

Block#105
    Parent: Block#102
    Parent: Block#103
    Var#422<$prop> = Phi(Var#407<$prop>, Var#413<$prop>)
    Var#424<$opt> = Phi(Var#408<$opt>, Var#415<$opt>)
    Var#426<$ff> = Phi(Var#400<$ff>)
    Stmt_Jump
        target: Block#104

Block#106
    Parent: Block#104
    Var#429<$prop> = Phi(Var#421<$prop>)
    Var#430<$opt> = Phi(Var#423<$opt>)
    Expr_ArrayDimFetch
        var: Var#429<$prop>
        dim: LITERAL('rotation')
        result: Var#431
    Expr_ArrayDimFetch
        var: Var#430<$opt>
        dim: LITERAL('mk')
        result: Var#432
    Expr_ArrayDimFetch
        var: Var#432
        dim: LITERAL('r')
        result: Var#433
    Expr_Assign
        var: Var#433
        expr: Var#431
        result: Var#434
    Stmt_Jump
        target: Block#108

Block#107
    Parent: Block#104
    Stmt_Jump
        target: Block#108

Block#108
    Parent: Block#106
    Parent: Block#107
    Var#435<$prop> = Phi(Var#429<$prop>, Var#421<$prop>)
    Var#436<$opt> = Phi(Var#430<$opt>, Var#423<$opt>)
    Var#437<$ff> = Phi(Var#425<$ff>)
    Expr_ArrayDimFetch
        var: Var#435<$prop>
        dim: LITERAL('charLimit')
        result: Var#438
    Expr_Isset
        vars[0]: Var#438
        result: Var#439
    Stmt_JumpIf
        cond: Var#439
        if: Block#109
        else: Block#110

Block#109
    Parent: Block#108
    Var#440<$prop> = Phi(Var#435<$prop>)
    Var#441<$opt> = Phi(Var#436<$opt>)
    Expr_ArrayDimFetch
        var: Var#440<$prop>
        dim: LITERAL('charLimit')
        result: Var#442
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#442
        result: Var#443
    Expr_ArrayDimFetch
        var: Var#441<$opt>
        dim: LITERAL('maxlen')
        result: Var#444
    Expr_Assign
        var: Var#444
        expr: Var#443
        result: Var#445
    Stmt_Jump
        target: Block#111

Block#110
    Parent: Block#108
    Stmt_Jump
        target: Block#111

Block#111
    Parent: Block#109
    Parent: Block#110
    Var#446<$ff> = Phi(Var#437<$ff>)
    Var#447<$prop> = Phi(Var#440<$prop>, Var#435<$prop>)
    Var#448<$opt> = Phi(Var#441<$opt>, Var#436<$opt>)
    Expr_Isset
        vars[0]: Var#446<$ff>
        result: Var#449
    Expr_BooleanNot
        expr: Var#449
        result: Var#450
    Stmt_JumpIf
        cond: Var#450
        if: Block#112
        else: Block#113

Block#112
    Parent: Block#111
    Expr_Assign
        var: Var#451<$ff>
        expr: LITERAL(0)
        result: Var#452
    Stmt_Jump
        target: Block#114

Block#113
    Parent: Block#111
    Stmt_Jump
        target: Block#114

Block#114
    Parent: Block#112
    Parent: Block#113
    Var#453<$prop> = Phi(Var#447<$prop>)
    Var#454<$ff> = Phi(Var#451<$ff>, Var#446<$ff>)
    Var#455<$opt> = Phi(Var#448<$opt>)
    Expr_ArrayDimFetch
        var: Var#453<$prop>
        dim: LITERAL('readonly')
        result: Var#456
    Expr_Isset
        vars[0]: Var#456
        result: Var#457
    Stmt_JumpIf
        cond: Var#457
        if: Block#115
        else: Block#116

Block#115
    Parent: Block#114
    Var#458<$prop> = Phi(Var#453<$prop>)
    Expr_ArrayDimFetch
        var: Var#458<$prop>
        dim: LITERAL('readonly')
        result: Var#459
    Expr_BinaryOp_Equal
        left: Var#459
        right: LITERAL('true')
        result: Var#460
    Expr_Cast_Bool
        expr: Var#460
        result: Var#461
    Stmt_Jump
        target: Block#116

Block#116
    Parent: Block#114
    Parent: Block#115
    Var#462 = Phi(LITERAL(false), Var#461)
    Var#463<$ff> = Phi(Var#454<$ff>)
    Var#464<$prop> = Phi(Var#453<$prop>, Var#458<$prop>)
    Var#465<$opt> = Phi(Var#455<$opt>)
    Stmt_JumpIf
        cond: Var#462
        if: Block#117
        else: Block#118

Block#117
    Parent: Block#116
    Var#466<$ff> = Phi(Var#463<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(0)
        result: Var#467
    Expr_BinaryOp_Plus
        left: Var#466<$ff>
        right: Var#467
        result: Var#468
    Expr_Assign
        var: Var#469<$ff>
        expr: Var#468
        result: Var#470
    Stmt_Jump
        target: Block#119

Block#118
    Parent: Block#116
    Stmt_Jump
        target: Block#119

Block#119
    Parent: Block#117
    Parent: Block#118
    Var#471<$prop> = Phi(Var#464<$prop>)
    Var#472<$ff> = Phi(Var#469<$ff>, Var#463<$ff>)
    Var#473<$opt> = Phi(Var#465<$opt>)
    Expr_ArrayDimFetch
        var: Var#471<$prop>
        dim: LITERAL('required')
        result: Var#474
    Expr_Isset
        vars[0]: Var#474
        result: Var#475
    Stmt_JumpIf
        cond: Var#475
        if: Block#120
        else: Block#121

Block#120
    Parent: Block#119
    Var#476<$prop> = Phi(Var#471<$prop>)
    Expr_ArrayDimFetch
        var: Var#476<$prop>
        dim: LITERAL('required')
        result: Var#477
    Expr_BinaryOp_Equal
        left: Var#477
        right: LITERAL('true')
        result: Var#478
    Expr_Cast_Bool
        expr: Var#478
        result: Var#479
    Stmt_Jump
        target: Block#121

Block#121
    Parent: Block#119
    Parent: Block#120
    Var#480 = Phi(LITERAL(false), Var#479)
    Var#481<$ff> = Phi(Var#472<$ff>)
    Var#482<$prop> = Phi(Var#471<$prop>, Var#476<$prop>)
    Var#483<$opt> = Phi(Var#473<$opt>)
    Stmt_JumpIf
        cond: Var#480
        if: Block#122
        else: Block#123

Block#122
    Parent: Block#121
    Var#484<$ff> = Phi(Var#481<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(1)
        result: Var#485
    Expr_BinaryOp_Plus
        left: Var#484<$ff>
        right: Var#485
        result: Var#486
    Expr_Assign
        var: Var#487<$ff>
        expr: Var#486
        result: Var#488
    Stmt_Jump
        target: Block#124

Block#123
    Parent: Block#121
    Stmt_Jump
        target: Block#124

Block#124
    Parent: Block#122
    Parent: Block#123
    Var#489<$prop> = Phi(Var#482<$prop>)
    Var#490<$ff> = Phi(Var#487<$ff>, Var#481<$ff>)
    Var#491<$opt> = Phi(Var#483<$opt>)
    Expr_ArrayDimFetch
        var: Var#489<$prop>
        dim: LITERAL('multiline')
        result: Var#492
    Expr_Isset
        vars[0]: Var#492
        result: Var#493
    Stmt_JumpIf
        cond: Var#493
        if: Block#125
        else: Block#126

Block#125
    Parent: Block#124
    Var#494<$prop> = Phi(Var#489<$prop>)
    Expr_ArrayDimFetch
        var: Var#494<$prop>
        dim: LITERAL('multiline')
        result: Var#495
    Expr_BinaryOp_Equal
        left: Var#495
        right: LITERAL('true')
        result: Var#496
    Expr_Cast_Bool
        expr: Var#496
        result: Var#497
    Stmt_Jump
        target: Block#126

Block#126
    Parent: Block#124
    Parent: Block#125
    Var#498 = Phi(LITERAL(false), Var#497)
    Var#499<$ff> = Phi(Var#490<$ff>)
    Var#500<$prop> = Phi(Var#489<$prop>, Var#494<$prop>)
    Var#501<$opt> = Phi(Var#491<$opt>)
    Stmt_JumpIf
        cond: Var#498
        if: Block#127
        else: Block#128

Block#127
    Parent: Block#126
    Var#502<$ff> = Phi(Var#499<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(12)
        result: Var#503
    Expr_BinaryOp_Plus
        left: Var#502<$ff>
        right: Var#503
        result: Var#504
    Expr_Assign
        var: Var#505<$ff>
        expr: Var#504
        result: Var#506
    Stmt_Jump
        target: Block#129

Block#128
    Parent: Block#126
    Stmt_Jump
        target: Block#129

Block#129
    Parent: Block#127
    Parent: Block#128
    Var#507<$prop> = Phi(Var#500<$prop>)
    Var#508<$ff> = Phi(Var#505<$ff>, Var#499<$ff>)
    Var#509<$opt> = Phi(Var#501<$opt>)
    Expr_ArrayDimFetch
        var: Var#507<$prop>
        dim: LITERAL('password')
        result: Var#510
    Expr_Isset
        vars[0]: Var#510
        result: Var#511
    Stmt_JumpIf
        cond: Var#511
        if: Block#130
        else: Block#131

Block#130
    Parent: Block#129
    Var#512<$prop> = Phi(Var#507<$prop>)
    Expr_ArrayDimFetch
        var: Var#512<$prop>
        dim: LITERAL('password')
        result: Var#513
    Expr_BinaryOp_Equal
        left: Var#513
        right: LITERAL('true')
        result: Var#514
    Expr_Cast_Bool
        expr: Var#514
        result: Var#515
    Stmt_Jump
        target: Block#131

Block#131
    Parent: Block#129
    Parent: Block#130
    Var#516 = Phi(LITERAL(false), Var#515)
    Var#517<$ff> = Phi(Var#508<$ff>)
    Var#518<$prop> = Phi(Var#507<$prop>, Var#512<$prop>)
    Var#519<$opt> = Phi(Var#509<$opt>)
    Stmt_JumpIf
        cond: Var#516
        if: Block#132
        else: Block#133

Block#132
    Parent: Block#131
    Var#520<$ff> = Phi(Var#517<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(13)
        result: Var#521
    Expr_BinaryOp_Plus
        left: Var#520<$ff>
        right: Var#521
        result: Var#522
    Expr_Assign
        var: Var#523<$ff>
        expr: Var#522
        result: Var#524
    Stmt_Jump
        target: Block#134

Block#133
    Parent: Block#131
    Stmt_Jump
        target: Block#134

Block#134
    Parent: Block#132
    Parent: Block#133
    Var#525<$prop> = Phi(Var#518<$prop>)
    Var#526<$ff> = Phi(Var#523<$ff>, Var#517<$ff>)
    Var#527<$opt> = Phi(Var#519<$opt>)
    Expr_ArrayDimFetch
        var: Var#525<$prop>
        dim: LITERAL('NoToggleToOff')
        result: Var#528
    Expr_Isset
        vars[0]: Var#528
        result: Var#529
    Stmt_JumpIf
        cond: Var#529
        if: Block#135
        else: Block#136

Block#135
    Parent: Block#134
    Var#530<$prop> = Phi(Var#525<$prop>)
    Expr_ArrayDimFetch
        var: Var#530<$prop>
        dim: LITERAL('NoToggleToOff')
        result: Var#531
    Expr_BinaryOp_Equal
        left: Var#531
        right: LITERAL('true')
        result: Var#532
    Expr_Cast_Bool
        expr: Var#532
        result: Var#533
    Stmt_Jump
        target: Block#136

Block#136
    Parent: Block#134
    Parent: Block#135
    Var#534 = Phi(LITERAL(false), Var#533)
    Var#535<$ff> = Phi(Var#526<$ff>)
    Var#536<$prop> = Phi(Var#525<$prop>, Var#530<$prop>)
    Var#537<$opt> = Phi(Var#527<$opt>)
    Stmt_JumpIf
        cond: Var#534
        if: Block#137
        else: Block#138

Block#137
    Parent: Block#136
    Var#538<$ff> = Phi(Var#535<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(14)
        result: Var#539
    Expr_BinaryOp_Plus
        left: Var#538<$ff>
        right: Var#539
        result: Var#540
    Expr_Assign
        var: Var#541<$ff>
        expr: Var#540
        result: Var#542
    Stmt_Jump
        target: Block#139

Block#138
    Parent: Block#136
    Stmt_Jump
        target: Block#139

Block#139
    Parent: Block#137
    Parent: Block#138
    Var#543<$prop> = Phi(Var#536<$prop>)
    Var#544<$ff> = Phi(Var#541<$ff>, Var#535<$ff>)
    Var#545<$opt> = Phi(Var#537<$opt>)
    Expr_ArrayDimFetch
        var: Var#543<$prop>
        dim: LITERAL('Radio')
        result: Var#546
    Expr_Isset
        vars[0]: Var#546
        result: Var#547
    Stmt_JumpIf
        cond: Var#547
        if: Block#140
        else: Block#141

Block#140
    Parent: Block#139
    Var#548<$prop> = Phi(Var#543<$prop>)
    Expr_ArrayDimFetch
        var: Var#548<$prop>
        dim: LITERAL('Radio')
        result: Var#549
    Expr_BinaryOp_Equal
        left: Var#549
        right: LITERAL('true')
        result: Var#550
    Expr_Cast_Bool
        expr: Var#550
        result: Var#551
    Stmt_Jump
        target: Block#141

Block#141
    Parent: Block#139
    Parent: Block#140
    Var#552 = Phi(LITERAL(false), Var#551)
    Var#553<$ff> = Phi(Var#544<$ff>)
    Var#554<$prop> = Phi(Var#543<$prop>, Var#548<$prop>)
    Var#555<$opt> = Phi(Var#545<$opt>)
    Stmt_JumpIf
        cond: Var#552
        if: Block#142
        else: Block#143

Block#142
    Parent: Block#141
    Var#556<$ff> = Phi(Var#553<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(15)
        result: Var#557
    Expr_BinaryOp_Plus
        left: Var#556<$ff>
        right: Var#557
        result: Var#558
    Expr_Assign
        var: Var#559<$ff>
        expr: Var#558
        result: Var#560
    Stmt_Jump
        target: Block#144

Block#143
    Parent: Block#141
    Stmt_Jump
        target: Block#144

Block#144
    Parent: Block#142
    Parent: Block#143
    Var#561<$prop> = Phi(Var#554<$prop>)
    Var#562<$ff> = Phi(Var#559<$ff>, Var#553<$ff>)
    Var#563<$opt> = Phi(Var#555<$opt>)
    Expr_ArrayDimFetch
        var: Var#561<$prop>
        dim: LITERAL('Pushbutton')
        result: Var#564
    Expr_Isset
        vars[0]: Var#564
        result: Var#565
    Stmt_JumpIf
        cond: Var#565
        if: Block#145
        else: Block#146

Block#145
    Parent: Block#144
    Var#566<$prop> = Phi(Var#561<$prop>)
    Expr_ArrayDimFetch
        var: Var#566<$prop>
        dim: LITERAL('Pushbutton')
        result: Var#567
    Expr_BinaryOp_Equal
        left: Var#567
        right: LITERAL('true')
        result: Var#568
    Expr_Cast_Bool
        expr: Var#568
        result: Var#569
    Stmt_Jump
        target: Block#146

Block#146
    Parent: Block#144
    Parent: Block#145
    Var#570 = Phi(LITERAL(false), Var#569)
    Var#571<$ff> = Phi(Var#562<$ff>)
    Var#572<$prop> = Phi(Var#561<$prop>, Var#566<$prop>)
    Var#573<$opt> = Phi(Var#563<$opt>)
    Stmt_JumpIf
        cond: Var#570
        if: Block#147
        else: Block#148

Block#147
    Parent: Block#146
    Var#574<$ff> = Phi(Var#571<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(16)
        result: Var#575
    Expr_BinaryOp_Plus
        left: Var#574<$ff>
        right: Var#575
        result: Var#576
    Expr_Assign
        var: Var#577<$ff>
        expr: Var#576
        result: Var#578
    Stmt_Jump
        target: Block#149

Block#148
    Parent: Block#146
    Stmt_Jump
        target: Block#149

Block#149
    Parent: Block#147
    Parent: Block#148
    Var#579<$prop> = Phi(Var#572<$prop>)
    Var#580<$ff> = Phi(Var#577<$ff>, Var#571<$ff>)
    Var#581<$opt> = Phi(Var#573<$opt>)
    Expr_ArrayDimFetch
        var: Var#579<$prop>
        dim: LITERAL('Combo')
        result: Var#582
    Expr_Isset
        vars[0]: Var#582
        result: Var#583
    Stmt_JumpIf
        cond: Var#583
        if: Block#150
        else: Block#151

Block#150
    Parent: Block#149
    Var#584<$prop> = Phi(Var#579<$prop>)
    Expr_ArrayDimFetch
        var: Var#584<$prop>
        dim: LITERAL('Combo')
        result: Var#585
    Expr_BinaryOp_Equal
        left: Var#585
        right: LITERAL('true')
        result: Var#586
    Expr_Cast_Bool
        expr: Var#586
        result: Var#587
    Stmt_Jump
        target: Block#151

Block#151
    Parent: Block#149
    Parent: Block#150
    Var#588 = Phi(LITERAL(false), Var#587)
    Var#589<$ff> = Phi(Var#580<$ff>)
    Var#590<$prop> = Phi(Var#579<$prop>, Var#584<$prop>)
    Var#591<$opt> = Phi(Var#581<$opt>)
    Stmt_JumpIf
        cond: Var#588
        if: Block#152
        else: Block#153

Block#152
    Parent: Block#151
    Var#592<$ff> = Phi(Var#589<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(17)
        result: Var#593
    Expr_BinaryOp_Plus
        left: Var#592<$ff>
        right: Var#593
        result: Var#594
    Expr_Assign
        var: Var#595<$ff>
        expr: Var#594
        result: Var#596
    Stmt_Jump
        target: Block#154

Block#153
    Parent: Block#151
    Stmt_Jump
        target: Block#154

Block#154
    Parent: Block#152
    Parent: Block#153
    Var#597<$prop> = Phi(Var#590<$prop>)
    Var#598<$ff> = Phi(Var#595<$ff>, Var#589<$ff>)
    Var#599<$opt> = Phi(Var#591<$opt>)
    Expr_ArrayDimFetch
        var: Var#597<$prop>
        dim: LITERAL('editable')
        result: Var#600
    Expr_Isset
        vars[0]: Var#600
        result: Var#601
    Stmt_JumpIf
        cond: Var#601
        if: Block#155
        else: Block#156

Block#155
    Parent: Block#154
    Var#602<$prop> = Phi(Var#597<$prop>)
    Expr_ArrayDimFetch
        var: Var#602<$prop>
        dim: LITERAL('editable')
        result: Var#603
    Expr_BinaryOp_Equal
        left: Var#603
        right: LITERAL('true')
        result: Var#604
    Expr_Cast_Bool
        expr: Var#604
        result: Var#605
    Stmt_Jump
        target: Block#156

Block#156
    Parent: Block#154
    Parent: Block#155
    Var#606 = Phi(LITERAL(false), Var#605)
    Var#607<$ff> = Phi(Var#598<$ff>)
    Var#608<$prop> = Phi(Var#597<$prop>, Var#602<$prop>)
    Var#609<$opt> = Phi(Var#599<$opt>)
    Stmt_JumpIf
        cond: Var#606
        if: Block#157
        else: Block#158

Block#157
    Parent: Block#156
    Var#610<$ff> = Phi(Var#607<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(18)
        result: Var#611
    Expr_BinaryOp_Plus
        left: Var#610<$ff>
        right: Var#611
        result: Var#612
    Expr_Assign
        var: Var#613<$ff>
        expr: Var#612
        result: Var#614
    Stmt_Jump
        target: Block#159

Block#158
    Parent: Block#156
    Stmt_Jump
        target: Block#159

Block#159
    Parent: Block#157
    Parent: Block#158
    Var#615<$prop> = Phi(Var#608<$prop>)
    Var#616<$ff> = Phi(Var#613<$ff>, Var#607<$ff>)
    Var#617<$opt> = Phi(Var#609<$opt>)
    Expr_ArrayDimFetch
        var: Var#615<$prop>
        dim: LITERAL('Sort')
        result: Var#618
    Expr_Isset
        vars[0]: Var#618
        result: Var#619
    Stmt_JumpIf
        cond: Var#619
        if: Block#160
        else: Block#161

Block#160
    Parent: Block#159
    Var#620<$prop> = Phi(Var#615<$prop>)
    Expr_ArrayDimFetch
        var: Var#620<$prop>
        dim: LITERAL('Sort')
        result: Var#621
    Expr_BinaryOp_Equal
        left: Var#621
        right: LITERAL('true')
        result: Var#622
    Expr_Cast_Bool
        expr: Var#622
        result: Var#623
    Stmt_Jump
        target: Block#161

Block#161
    Parent: Block#159
    Parent: Block#160
    Var#624 = Phi(LITERAL(false), Var#623)
    Var#625<$ff> = Phi(Var#616<$ff>)
    Var#626<$prop> = Phi(Var#615<$prop>, Var#620<$prop>)
    Var#627<$opt> = Phi(Var#617<$opt>)
    Stmt_JumpIf
        cond: Var#624
        if: Block#162
        else: Block#163

Block#162
    Parent: Block#161
    Var#628<$ff> = Phi(Var#625<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(19)
        result: Var#629
    Expr_BinaryOp_Plus
        left: Var#628<$ff>
        right: Var#629
        result: Var#630
    Expr_Assign
        var: Var#631<$ff>
        expr: Var#630
        result: Var#632
    Stmt_Jump
        target: Block#164

Block#163
    Parent: Block#161
    Stmt_Jump
        target: Block#164

Block#164
    Parent: Block#162
    Parent: Block#163
    Var#633<$prop> = Phi(Var#626<$prop>)
    Var#634<$ff> = Phi(Var#631<$ff>, Var#625<$ff>)
    Var#635<$opt> = Phi(Var#627<$opt>)
    Expr_ArrayDimFetch
        var: Var#633<$prop>
        dim: LITERAL('fileSelect')
        result: Var#636
    Expr_Isset
        vars[0]: Var#636
        result: Var#637
    Stmt_JumpIf
        cond: Var#637
        if: Block#165
        else: Block#166

Block#165
    Parent: Block#164
    Var#638<$prop> = Phi(Var#633<$prop>)
    Expr_ArrayDimFetch
        var: Var#638<$prop>
        dim: LITERAL('fileSelect')
        result: Var#639
    Expr_BinaryOp_Equal
        left: Var#639
        right: LITERAL('true')
        result: Var#640
    Expr_Cast_Bool
        expr: Var#640
        result: Var#641
    Stmt_Jump
        target: Block#166

Block#166
    Parent: Block#164
    Parent: Block#165
    Var#642 = Phi(LITERAL(false), Var#641)
    Var#643<$ff> = Phi(Var#634<$ff>)
    Var#644<$prop> = Phi(Var#633<$prop>, Var#638<$prop>)
    Var#645<$opt> = Phi(Var#635<$opt>)
    Stmt_JumpIf
        cond: Var#642
        if: Block#167
        else: Block#168

Block#167
    Parent: Block#166
    Var#646<$ff> = Phi(Var#643<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(20)
        result: Var#647
    Expr_BinaryOp_Plus
        left: Var#646<$ff>
        right: Var#647
        result: Var#648
    Expr_Assign
        var: Var#649<$ff>
        expr: Var#648
        result: Var#650
    Stmt_Jump
        target: Block#169

Block#168
    Parent: Block#166
    Stmt_Jump
        target: Block#169

Block#169
    Parent: Block#167
    Parent: Block#168
    Var#651<$prop> = Phi(Var#644<$prop>)
    Var#652<$ff> = Phi(Var#649<$ff>, Var#643<$ff>)
    Var#653<$opt> = Phi(Var#645<$opt>)
    Expr_ArrayDimFetch
        var: Var#651<$prop>
        dim: LITERAL('multipleSelection')
        result: Var#654
    Expr_Isset
        vars[0]: Var#654
        result: Var#655
    Stmt_JumpIf
        cond: Var#655
        if: Block#170
        else: Block#171

Block#170
    Parent: Block#169
    Var#656<$prop> = Phi(Var#651<$prop>)
    Expr_ArrayDimFetch
        var: Var#656<$prop>
        dim: LITERAL('multipleSelection')
        result: Var#657
    Expr_BinaryOp_Equal
        left: Var#657
        right: LITERAL('true')
        result: Var#658
    Expr_Cast_Bool
        expr: Var#658
        result: Var#659
    Stmt_Jump
        target: Block#171

Block#171
    Parent: Block#169
    Parent: Block#170
    Var#660 = Phi(LITERAL(false), Var#659)
    Var#661<$ff> = Phi(Var#652<$ff>)
    Var#662<$prop> = Phi(Var#651<$prop>, Var#656<$prop>)
    Var#663<$opt> = Phi(Var#653<$opt>)
    Stmt_JumpIf
        cond: Var#660
        if: Block#172
        else: Block#173

Block#172
    Parent: Block#171
    Var#664<$ff> = Phi(Var#661<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(21)
        result: Var#665
    Expr_BinaryOp_Plus
        left: Var#664<$ff>
        right: Var#665
        result: Var#666
    Expr_Assign
        var: Var#667<$ff>
        expr: Var#666
        result: Var#668
    Stmt_Jump
        target: Block#174

Block#173
    Parent: Block#171
    Stmt_Jump
        target: Block#174

Block#174
    Parent: Block#172
    Parent: Block#173
    Var#669<$prop> = Phi(Var#662<$prop>)
    Var#670<$ff> = Phi(Var#667<$ff>, Var#661<$ff>)
    Var#671<$opt> = Phi(Var#663<$opt>)
    Expr_ArrayDimFetch
        var: Var#669<$prop>
        dim: LITERAL('doNotSpellCheck')
        result: Var#672
    Expr_Isset
        vars[0]: Var#672
        result: Var#673
    Stmt_JumpIf
        cond: Var#673
        if: Block#175
        else: Block#176

Block#175
    Parent: Block#174
    Var#674<$prop> = Phi(Var#669<$prop>)
    Expr_ArrayDimFetch
        var: Var#674<$prop>
        dim: LITERAL('doNotSpellCheck')
        result: Var#675
    Expr_BinaryOp_Equal
        left: Var#675
        right: LITERAL('true')
        result: Var#676
    Expr_Cast_Bool
        expr: Var#676
        result: Var#677
    Stmt_Jump
        target: Block#176

Block#176
    Parent: Block#174
    Parent: Block#175
    Var#678 = Phi(LITERAL(false), Var#677)
    Var#679<$ff> = Phi(Var#670<$ff>)
    Var#680<$prop> = Phi(Var#669<$prop>, Var#674<$prop>)
    Var#681<$opt> = Phi(Var#671<$opt>)
    Stmt_JumpIf
        cond: Var#678
        if: Block#177
        else: Block#178

Block#177
    Parent: Block#176
    Var#682<$ff> = Phi(Var#679<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(22)
        result: Var#683
    Expr_BinaryOp_Plus
        left: Var#682<$ff>
        right: Var#683
        result: Var#684
    Expr_Assign
        var: Var#685<$ff>
        expr: Var#684
        result: Var#686
    Stmt_Jump
        target: Block#179

Block#178
    Parent: Block#176
    Stmt_Jump
        target: Block#179

Block#179
    Parent: Block#177
    Parent: Block#178
    Var#687<$prop> = Phi(Var#680<$prop>)
    Var#688<$ff> = Phi(Var#685<$ff>, Var#679<$ff>)
    Var#689<$opt> = Phi(Var#681<$opt>)
    Expr_ArrayDimFetch
        var: Var#687<$prop>
        dim: LITERAL('doNotScroll')
        result: Var#690
    Expr_Isset
        vars[0]: Var#690
        result: Var#691
    Stmt_JumpIf
        cond: Var#691
        if: Block#180
        else: Block#181

Block#180
    Parent: Block#179
    Var#692<$prop> = Phi(Var#687<$prop>)
    Expr_ArrayDimFetch
        var: Var#692<$prop>
        dim: LITERAL('doNotScroll')
        result: Var#693
    Expr_BinaryOp_Equal
        left: Var#693
        right: LITERAL('true')
        result: Var#694
    Expr_Cast_Bool
        expr: Var#694
        result: Var#695
    Stmt_Jump
        target: Block#181

Block#181
    Parent: Block#179
    Parent: Block#180
    Var#696 = Phi(LITERAL(false), Var#695)
    Var#697<$ff> = Phi(Var#688<$ff>)
    Var#698<$prop> = Phi(Var#687<$prop>, Var#692<$prop>)
    Var#699<$opt> = Phi(Var#689<$opt>)
    Stmt_JumpIf
        cond: Var#696
        if: Block#182
        else: Block#183

Block#182
    Parent: Block#181
    Var#700<$ff> = Phi(Var#697<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(23)
        result: Var#701
    Expr_BinaryOp_Plus
        left: Var#700<$ff>
        right: Var#701
        result: Var#702
    Expr_Assign
        var: Var#703<$ff>
        expr: Var#702
        result: Var#704
    Stmt_Jump
        target: Block#184

Block#183
    Parent: Block#181
    Stmt_Jump
        target: Block#184

Block#184
    Parent: Block#182
    Parent: Block#183
    Var#705<$prop> = Phi(Var#698<$prop>)
    Var#706<$ff> = Phi(Var#703<$ff>, Var#697<$ff>)
    Var#707<$opt> = Phi(Var#699<$opt>)
    Expr_ArrayDimFetch
        var: Var#705<$prop>
        dim: LITERAL('comb')
        result: Var#708
    Expr_Isset
        vars[0]: Var#708
        result: Var#709
    Stmt_JumpIf
        cond: Var#709
        if: Block#185
        else: Block#186

Block#185
    Parent: Block#184
    Var#710<$prop> = Phi(Var#705<$prop>)
    Expr_ArrayDimFetch
        var: Var#710<$prop>
        dim: LITERAL('comb')
        result: Var#711
    Expr_BinaryOp_Equal
        left: Var#711
        right: LITERAL('true')
        result: Var#712
    Expr_Cast_Bool
        expr: Var#712
        result: Var#713
    Stmt_Jump
        target: Block#186

Block#186
    Parent: Block#184
    Parent: Block#185
    Var#714 = Phi(LITERAL(false), Var#713)
    Var#715<$ff> = Phi(Var#706<$ff>)
    Var#716<$prop> = Phi(Var#705<$prop>, Var#710<$prop>)
    Var#717<$opt> = Phi(Var#707<$opt>)
    Stmt_JumpIf
        cond: Var#714
        if: Block#187
        else: Block#188

Block#187
    Parent: Block#186
    Var#718<$ff> = Phi(Var#715<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(24)
        result: Var#719
    Expr_BinaryOp_Plus
        left: Var#718<$ff>
        right: Var#719
        result: Var#720
    Expr_Assign
        var: Var#721<$ff>
        expr: Var#720
        result: Var#722
    Stmt_Jump
        target: Block#189

Block#188
    Parent: Block#186
    Stmt_Jump
        target: Block#189

Block#189
    Parent: Block#187
    Parent: Block#188
    Var#723<$prop> = Phi(Var#716<$prop>)
    Var#724<$ff> = Phi(Var#721<$ff>, Var#715<$ff>)
    Var#725<$opt> = Phi(Var#717<$opt>)
    Expr_ArrayDimFetch
        var: Var#723<$prop>
        dim: LITERAL('radiosInUnison')
        result: Var#726
    Expr_Isset
        vars[0]: Var#726
        result: Var#727
    Stmt_JumpIf
        cond: Var#727
        if: Block#190
        else: Block#191

Block#190
    Parent: Block#189
    Var#728<$prop> = Phi(Var#723<$prop>)
    Expr_ArrayDimFetch
        var: Var#728<$prop>
        dim: LITERAL('radiosInUnison')
        result: Var#729
    Expr_BinaryOp_Equal
        left: Var#729
        right: LITERAL('true')
        result: Var#730
    Expr_Cast_Bool
        expr: Var#730
        result: Var#731
    Stmt_Jump
        target: Block#191

Block#191
    Parent: Block#189
    Parent: Block#190
    Var#732 = Phi(LITERAL(false), Var#731)
    Var#733<$ff> = Phi(Var#724<$ff>)
    Var#734<$prop> = Phi(Var#723<$prop>, Var#728<$prop>)
    Var#735<$opt> = Phi(Var#725<$opt>)
    Stmt_JumpIf
        cond: Var#732
        if: Block#192
        else: Block#193

Block#192
    Parent: Block#191
    Var#736<$ff> = Phi(Var#733<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(25)
        result: Var#737
    Expr_BinaryOp_Plus
        left: Var#736<$ff>
        right: Var#737
        result: Var#738
    Expr_Assign
        var: Var#739<$ff>
        expr: Var#738
        result: Var#740
    Stmt_Jump
        target: Block#194

Block#193
    Parent: Block#191
    Stmt_Jump
        target: Block#194

Block#194
    Parent: Block#192
    Parent: Block#193
    Var#741<$prop> = Phi(Var#734<$prop>)
    Var#742<$ff> = Phi(Var#739<$ff>, Var#733<$ff>)
    Var#743<$opt> = Phi(Var#735<$opt>)
    Expr_ArrayDimFetch
        var: Var#741<$prop>
        dim: LITERAL('richText')
        result: Var#744
    Expr_Isset
        vars[0]: Var#744
        result: Var#745
    Stmt_JumpIf
        cond: Var#745
        if: Block#195
        else: Block#196

Block#195
    Parent: Block#194
    Var#746<$prop> = Phi(Var#741<$prop>)
    Expr_ArrayDimFetch
        var: Var#746<$prop>
        dim: LITERAL('richText')
        result: Var#747
    Expr_BinaryOp_Equal
        left: Var#747
        right: LITERAL('true')
        result: Var#748
    Expr_Cast_Bool
        expr: Var#748
        result: Var#749
    Stmt_Jump
        target: Block#196

Block#196
    Parent: Block#194
    Parent: Block#195
    Var#750 = Phi(LITERAL(false), Var#749)
    Var#751<$ff> = Phi(Var#742<$ff>)
    Var#752<$prop> = Phi(Var#741<$prop>, Var#746<$prop>)
    Var#753<$opt> = Phi(Var#743<$opt>)
    Stmt_JumpIf
        cond: Var#750
        if: Block#197
        else: Block#198

Block#197
    Parent: Block#196
    Var#754<$ff> = Phi(Var#751<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(25)
        result: Var#755
    Expr_BinaryOp_Plus
        left: Var#754<$ff>
        right: Var#755
        result: Var#756
    Expr_Assign
        var: Var#757<$ff>
        expr: Var#756
        result: Var#758
    Stmt_Jump
        target: Block#199

Block#198
    Parent: Block#196
    Stmt_Jump
        target: Block#199

Block#199
    Parent: Block#197
    Parent: Block#198
    Var#759<$prop> = Phi(Var#752<$prop>)
    Var#760<$ff> = Phi(Var#757<$ff>, Var#751<$ff>)
    Var#761<$opt> = Phi(Var#753<$opt>)
    Expr_ArrayDimFetch
        var: Var#759<$prop>
        dim: LITERAL('commitOnSelChange')
        result: Var#762
    Expr_Isset
        vars[0]: Var#762
        result: Var#763
    Stmt_JumpIf
        cond: Var#763
        if: Block#200
        else: Block#201

Block#200
    Parent: Block#199
    Var#764<$prop> = Phi(Var#759<$prop>)
    Expr_ArrayDimFetch
        var: Var#764<$prop>
        dim: LITERAL('commitOnSelChange')
        result: Var#765
    Expr_BinaryOp_Equal
        left: Var#765
        right: LITERAL('true')
        result: Var#766
    Expr_Cast_Bool
        expr: Var#766
        result: Var#767
    Stmt_Jump
        target: Block#201

Block#201
    Parent: Block#199
    Parent: Block#200
    Var#768 = Phi(LITERAL(false), Var#767)
    Var#769<$ff> = Phi(Var#760<$ff>)
    Var#770<$opt> = Phi(Var#761<$opt>)
    Var#771<$prop> = Phi(Var#759<$prop>, Var#764<$prop>)
    Stmt_JumpIf
        cond: Var#768
        if: Block#202
        else: Block#203

Block#202
    Parent: Block#201
    Var#772<$ff> = Phi(Var#769<$ff>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(26)
        result: Var#773
    Expr_BinaryOp_Plus
        left: Var#772<$ff>
        right: Var#773
        result: Var#774
    Expr_Assign
        var: Var#775<$ff>
        expr: Var#774
        result: Var#776
    Stmt_Jump
        target: Block#204

Block#203
    Parent: Block#201
    Stmt_Jump
        target: Block#204

Block#204
    Parent: Block#202
    Parent: Block#203
    Var#777<$ff> = Phi(Var#775<$ff>, Var#769<$ff>)
    Var#778<$opt> = Phi(Var#770<$opt>)
    Var#779<$prop> = Phi(Var#771<$prop>)
    Expr_ArrayDimFetch
        var: Var#778<$opt>
        dim: LITERAL('ff')
        result: Var#780
    Expr_Assign
        var: Var#780
        expr: Var#777<$ff>
        result: Var#781
    Expr_ArrayDimFetch
        var: Var#779<$prop>
        dim: LITERAL('defaultValue')
        result: Var#782
    Expr_Isset
        vars[0]: Var#782
        result: Var#783
    Stmt_JumpIf
        cond: Var#783
        if: Block#205
        else: Block#206

Block#205
    Parent: Block#204
    Var#784<$prop> = Phi(Var#779<$prop>)
    Var#785<$opt> = Phi(Var#778<$opt>)
    Expr_ArrayDimFetch
        var: Var#784<$prop>
        dim: LITERAL('defaultValue')
        result: Var#786
    Expr_ArrayDimFetch
        var: Var#785<$opt>
        dim: LITERAL('dv')
        result: Var#787
    Expr_Assign
        var: Var#787
        expr: Var#786
        result: Var#788
    Stmt_Jump
        target: Block#207

Block#206
    Parent: Block#204
    Stmt_Jump
        target: Block#207

Block#207
    Parent: Block#205
    Parent: Block#206
    Var#789<$prop> = Phi(Var#784<$prop>, Var#779<$prop>)
    Var#790<$opt> = Phi(Var#785<$opt>, Var#778<$opt>)
    Expr_Assign
        var: Var#791<$f>
        expr: LITERAL(4)
        result: Var#792
    Expr_ArrayDimFetch
        var: Var#789<$prop>
        dim: LITERAL('readonly')
        result: Var#793
    Expr_Isset
        vars[0]: Var#793
        result: Var#794
    Stmt_JumpIf
        cond: Var#794
        if: Block#208
        else: Block#209

Block#208
    Parent: Block#207
    Var#795<$prop> = Phi(Var#789<$prop>)
    Expr_ArrayDimFetch
        var: Var#795<$prop>
        dim: LITERAL('readonly')
        result: Var#796
    Expr_BinaryOp_Equal
        left: Var#796
        right: LITERAL('true')
        result: Var#797
    Expr_Cast_Bool
        expr: Var#797
        result: Var#798
    Stmt_Jump
        target: Block#209

Block#209
    Parent: Block#207
    Parent: Block#208
    Var#799 = Phi(LITERAL(false), Var#798)
    Var#800<$f> = Phi(Var#791<$f>)
    Var#801<$prop> = Phi(Var#789<$prop>, Var#795<$prop>)
    Var#802<$opt> = Phi(Var#790<$opt>)
    Stmt_JumpIf
        cond: Var#799
        if: Block#210
        else: Block#211

Block#210
    Parent: Block#209
    Var#803<$f> = Phi(Var#800<$f>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(6)
        result: Var#804
    Expr_BinaryOp_Plus
        left: Var#803<$f>
        right: Var#804
        result: Var#805
    Expr_Assign
        var: Var#806<$f>
        expr: Var#805
        result: Var#807
    Stmt_Jump
        target: Block#212

Block#211
    Parent: Block#209
    Stmt_Jump
        target: Block#212

Block#212
    Parent: Block#210
    Parent: Block#211
    Var#808<$prop> = Phi(Var#801<$prop>)
    Var#809<$f> = Phi(Var#806<$f>, Var#800<$f>)
    Var#810<$opt> = Phi(Var#802<$opt>)
    Expr_ArrayDimFetch
        var: Var#808<$prop>
        dim: LITERAL('display')
        result: Var#811
    Expr_Isset
        vars[0]: Var#811
        result: Var#812
    Stmt_JumpIf
        cond: Var#812
        if: Block#213
        else: Block#214

Block#213
    Parent: Block#212
    Var#813<$prop> = Phi(Var#808<$prop>)
    Expr_ArrayDimFetch
        var: Var#813<$prop>
        dim: LITERAL('display')
        result: Var#814
    Expr_BinaryOp_Equal
        left: Var#814
        right: LITERAL('display.visible')
        result: Var#815
    Stmt_JumpIf
        cond: Var#815
        if: Block#215
        else: Block#216

Block#214
    Parent: Block#212
    Stmt_Jump
        target: Block#217

Block#215
    Parent: Block#213
    Stmt_Jump
        target: Block#218

Block#216
    Parent: Block#213
    Var#816<$prop> = Phi(Var#813<$prop>)
    Expr_ArrayDimFetch
        var: Var#816<$prop>
        dim: LITERAL('display')
        result: Var#817
    Expr_BinaryOp_Equal
        left: Var#817
        right: LITERAL('display.hidden')
        result: Var#818
    Stmt_JumpIf
        cond: Var#818
        if: Block#219
        else: Block#220

Block#217
    Parent: Block#218
    Parent: Block#214
    Var#819<$f> = Phi(Var#820<$f>, Var#809<$f>)
    Var#821<$opt> = Phi(Var#822<$opt>, Var#810<$opt>)
    Var#823<$prop> = Phi(Var#824<$prop>, Var#808<$prop>)
    Expr_ArrayDimFetch
        var: Var#821<$opt>
        dim: LITERAL('f')
        result: Var#825
    Expr_Assign
        var: Var#825
        expr: Var#819<$f>
        result: Var#826
    Expr_ArrayDimFetch
        var: Var#823<$prop>
        dim: LITERAL('currentValueIndices')
        result: Var#827
    Expr_Isset
        vars[0]: Var#827
        result: Var#828
    Stmt_JumpIf
        cond: Var#828
        if: Block#221
        else: Block#222

Block#218
    Parent: Block#215
    Parent: Block#219
    Parent: Block#223
    Parent: Block#227
    Parent: Block#228
    Var#820<$f> = Phi(Var#809<$f>, Var#829<$f>, Var#830<$f>, Var#831<$f>)
    Var#822<$opt> = Phi(Var#810<$opt>)
    Var#824<$prop> = Phi(Var#813<$prop>, Var#816<$prop>, Var#832<$prop>, Var#833<$prop>)
    Stmt_Jump
        target: Block#217

Block#219
    Parent: Block#216
    Var#834<$f> = Phi(Var#809<$f>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(1)
        result: Var#835
    Expr_BinaryOp_Plus
        left: Var#834<$f>
        right: Var#835
        result: Var#836
    Expr_Assign
        var: Var#829<$f>
        expr: Var#836
        result: Var#837
    Stmt_Jump
        target: Block#218

Block#220
    Parent: Block#216
    Var#832<$prop> = Phi(Var#816<$prop>)
    Expr_ArrayDimFetch
        var: Var#832<$prop>
        dim: LITERAL('display')
        result: Var#838
    Expr_BinaryOp_Equal
        left: Var#838
        right: LITERAL('display.noPrint')
        result: Var#839
    Stmt_JumpIf
        cond: Var#839
        if: Block#223
        else: Block#224

Block#221
    Parent: Block#217
    Var#840<$prop> = Phi(Var#823<$prop>)
    Expr_ArrayDimFetch
        var: Var#840<$prop>
        dim: LITERAL('currentValueIndices')
        result: Var#841
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#841
        result: Var#842
    Expr_Cast_Bool
        expr: Var#842
        result: Var#843
    Stmt_Jump
        target: Block#222

Block#222
    Parent: Block#217
    Parent: Block#221
    Var#844 = Phi(LITERAL(false), Var#843)
    Var#845<$prop> = Phi(Var#823<$prop>, Var#840<$prop>)
    Var#846<$opt> = Phi(Var#821<$opt>)
    Stmt_JumpIf
        cond: Var#844
        if: Block#225
        else: Block#226

Block#223
    Parent: Block#220
    Var#847<$f> = Phi(Var#809<$f>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(2)
        result: Var#848
    Expr_BinaryOp_Minus
        left: Var#847<$f>
        right: Var#848
        result: Var#849
    Expr_Assign
        var: Var#830<$f>
        expr: Var#849
        result: Var#850
    Stmt_Jump
        target: Block#218

Block#224
    Parent: Block#220
    Var#833<$prop> = Phi(Var#832<$prop>)
    Expr_ArrayDimFetch
        var: Var#833<$prop>
        dim: LITERAL('display')
        result: Var#851
    Expr_BinaryOp_Equal
        left: Var#851
        right: LITERAL('display.noView')
        result: Var#852
    Stmt_JumpIf
        cond: Var#852
        if: Block#227
        else: Block#228

Block#225
    Parent: Block#222
    Var#853<$prop> = Phi(Var#845<$prop>)
    Var#854<$opt> = Phi(Var#846<$opt>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#841
        result: Var#841
    Expr_ArrayDimFetch
        var: Var#853<$prop>
        dim: LITERAL('currentValueIndices')
        result: Var#855
    Expr_ArrayDimFetch
        var: Var#854<$opt>
        dim: LITERAL('i')
        result: Var#856
    Expr_Assign
        var: Var#856
        expr: Var#855
        result: Var#857
    Stmt_Jump
        target: Block#229

Block#226
    Parent: Block#222
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#841
        result: Var#841
    Stmt_Jump
        target: Block#229

Block#227
    Parent: Block#224
    Var#858<$f> = Phi(Var#809<$f>)
    Expr_BinaryOp_ShiftLeft
        left: LITERAL(1)
        right: LITERAL(5)
        result: Var#859
    Expr_BinaryOp_Plus
        left: Var#858<$f>
        right: Var#859
        result: Var#860
    Expr_Assign
        var: Var#831<$f>
        expr: Var#860
        result: Var#861
    Stmt_Jump
        target: Block#218

Block#228
    Parent: Block#224
    Stmt_Jump
        target: Block#218

Block#229
    Parent: Block#225
    Parent: Block#226
    Var#862<$prop> = Phi(Var#853<$prop>, Var#845<$prop>)
    Var#863<$opt> = Phi(Var#854<$opt>, Var#846<$opt>)
    Expr_ArrayDimFetch
        var: Var#862<$prop>
        dim: LITERAL('value')
        result: Var#864
    Expr_Isset
        vars[0]: Var#864
        result: Var#865
    Stmt_JumpIf
        cond: Var#865
        if: Block#230
        else: Block#231

Block#230
    Parent: Block#229
    Var#866<$prop> = Phi(Var#862<$prop>)
    Expr_ArrayDimFetch
        var: Var#866<$prop>
        dim: LITERAL('value')
        result: Var#867
    Expr_FuncCall
        name: LITERAL('is_array')
        args[0]: Var#867
        result: Var#868
    Stmt_JumpIf
        cond: Var#868
        if: Block#232
        else: Block#233

Block#231
    Parent: Block#229
    Stmt_Jump
        target: Block#234

Block#232
    Parent: Block#230
    Var#869<$opt> = Phi(Var#863<$opt>)
    Var#870<$prop> = Phi(Var#866<$prop>)
    Expr_Assertion<type(LITERAL('array'))>
        expr: Var#867
        result: Var#867
    Expr_Array
        result: Var#871
    Expr_ArrayDimFetch
        var: Var#869<$opt>
        dim: LITERAL('opt')
        result: Var#872
    Expr_Assign
        var: Var#872
        expr: Var#871
        result: Var#873
    Expr_ArrayDimFetch
        var: Var#870<$prop>
        dim: LITERAL('value')
        result: Var#874
    Iterator_Reset
        var: Var#874
    Stmt_Jump
        target: Block#235

Block#233
    Parent: Block#230
    Var#875<$prop> = Phi(Var#866<$prop>)
    Var#876<$opt> = Phi(Var#863<$opt>)
    Expr_Assertion<not(type(LITERAL('array')))>
        expr: Var#867
        result: Var#867
    Expr_ArrayDimFetch
        var: Var#875<$prop>
        dim: LITERAL('value')
        result: Var#877
    Expr_ArrayDimFetch
        var: Var#876<$opt>
        dim: LITERAL('v')
        result: Var#878
    Expr_Assign
        var: Var#878
        expr: Var#877
        result: Var#879
    Stmt_Jump
        target: Block#236

Block#234
    Parent: Block#236
    Parent: Block#231
    Var#880<$prop> = Phi(Var#881<$prop>, Var#862<$prop>)
    Var#882<$opt> = Phi(Var#883<$opt>, Var#863<$opt>)
    Expr_ArrayDimFetch
        var: Var#880<$prop>
        dim: LITERAL('richValue')
        result: Var#884
    Expr_Isset
        vars[0]: Var#884
        result: Var#885
    Stmt_JumpIf
        cond: Var#885
        if: Block#237
        else: Block#238

Block#235
    Parent: Block#232
    Parent: Block#249
    Var#886<$prop> = Phi(Var#870<$prop>, Var#887<$prop>)
    Var#888<$opt> = Phi(Var#869<$opt>, Var#889<$opt>)
    Iterator_Valid
        var: Var#874
        result: Var#890
    Stmt_JumpIf
        cond: Var#890
        if: Block#239
        else: Block#240

Block#236
    Parent: Block#244
    Parent: Block#233
    Var#881<$prop> = Phi(Var#886<$prop>, Var#875<$prop>)
    Var#883<$opt> = Phi(Var#888<$opt>, Var#876<$opt>)
    Stmt_Jump
        target: Block#234

Block#237
    Parent: Block#234
    Var#891<$prop> = Phi(Var#880<$prop>)
    Var#892<$opt> = Phi(Var#882<$opt>)
    Expr_ArrayDimFetch
        var: Var#891<$prop>
        dim: LITERAL('richValue')
        result: Var#893
    Expr_ArrayDimFetch
        var: Var#892<$opt>
        dim: LITERAL('rv')
        result: Var#894
    Expr_Assign
        var: Var#894
        expr: Var#893
        result: Var#895
    Stmt_Jump
        target: Block#241

Block#238
    Parent: Block#234
    Stmt_Jump
        target: Block#241

Block#239
    Parent: Block#235
    Var#896<$prop> = Phi(Var#886<$prop>)
    Iterator_Key
        var: Var#874
        result: Var#897
    Expr_Assign
        var: Var#898<$key>
        expr: Var#897
        result: Var#899
    Iterator_Value
        var: Var#874
        result: Var#900
    Expr_Assign
        var: Var#901<$optval>
        expr: Var#900
        result: Var#902
    Expr_ArrayDimFetch
        var: Var#896<$prop>
        dim: LITERAL('exportValues')
        result: Var#903
    Expr_ArrayDimFetch
        var: Var#903
        dim: Var#898<$key>
        result: Var#904
    Expr_Isset
        vars[0]: Var#904
        result: Var#905
    Stmt_JumpIf
        cond: Var#905
        if: Block#242
        else: Block#243

Block#240
    Parent: Block#235
    Stmt_Jump
        target: Block#244

Block#241
    Parent: Block#237
    Parent: Block#238
    Var#906<$prop> = Phi(Var#891<$prop>, Var#880<$prop>)
    Var#907<$opt> = Phi(Var#892<$opt>, Var#882<$opt>)
    Expr_ArrayDimFetch
        var: Var#906<$prop>
        dim: LITERAL('submitName')
        result: Var#908
    Expr_Isset
        vars[0]: Var#908
        result: Var#909
    Stmt_JumpIf
        cond: Var#909
        if: Block#245
        else: Block#246

Block#242
    Parent: Block#239
    Var#910<$prop> = Phi(Var#896<$prop>)
    Var#911<$key> = Phi(Var#898<$key>)
    Var#912<$opt> = Phi(Var#888<$opt>)
    Expr_ArrayDimFetch
        var: Var#910<$prop>
        dim: LITERAL('exportValues')
        result: Var#913
    Expr_ArrayDimFetch
        var: Var#913
        dim: Var#911<$key>
        result: Var#914
    Expr_ArrayDimFetch
        var: Var#910<$prop>
        dim: LITERAL('value')
        result: Var#915
    Expr_ArrayDimFetch
        var: Var#915
        dim: Var#911<$key>
        result: Var#916
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: Var#914
        values[1]: Var#916
        result: Var#917
    Expr_ArrayDimFetch
        var: Var#912<$opt>
        dim: LITERAL('opt')
        result: Var#918
    Expr_ArrayDimFetch
        var: Var#918
        dim: Var#911<$key>
        result: Var#919
    Expr_Assign
        var: Var#919
        expr: Var#917
        result: Var#920
    Stmt_Jump
        target: Block#247

Block#243
    Parent: Block#239
    Var#921<$prop> = Phi(Var#896<$prop>)
    Var#922<$key> = Phi(Var#898<$key>)
    Var#923<$opt> = Phi(Var#888<$opt>)
    Expr_ArrayDimFetch
        var: Var#921<$prop>
        dim: LITERAL('value')
        result: Var#924
    Expr_ArrayDimFetch
        var: Var#924
        dim: Var#922<$key>
        result: Var#925
    Expr_ArrayDimFetch
        var: Var#923<$opt>
        dim: LITERAL('opt')
        result: Var#926
    Expr_ArrayDimFetch
        var: Var#926
        dim: Var#922<$key>
        result: Var#927
    Expr_Assign
        var: Var#927
        expr: Var#925
        result: Var#928
    Stmt_Jump
        target: Block#247

Block#244
    Parent: Block#240
    Stmt_Jump
        target: Block#236

Block#245
    Parent: Block#241
    Var#929<$prop> = Phi(Var#906<$prop>)
    Var#930<$opt> = Phi(Var#907<$opt>)
    Expr_ArrayDimFetch
        var: Var#929<$prop>
        dim: LITERAL('submitName')
        result: Var#931
    Expr_ArrayDimFetch
        var: Var#930<$opt>
        dim: LITERAL('tm')
        result: Var#932
    Expr_Assign
        var: Var#932
        expr: Var#931
        result: Var#933
    Stmt_Jump
        target: Block#248

Block#246
    Parent: Block#241
    Stmt_Jump
        target: Block#248

Block#247
    Parent: Block#242
    Parent: Block#243
    Var#887<$prop> = Phi(Var#910<$prop>, Var#921<$prop>)
    Var#889<$opt> = Phi(Var#912<$opt>, Var#923<$opt>)
    Stmt_Jump
        target: Block#249

Block#248
    Parent: Block#245
    Parent: Block#246
    Var#934<$prop> = Phi(Var#929<$prop>, Var#906<$prop>)
    Var#935<$opt> = Phi(Var#930<$opt>, Var#907<$opt>)
    Expr_ArrayDimFetch
        var: Var#934<$prop>
        dim: LITERAL('name')
        result: Var#936
    Expr_Isset
        vars[0]: Var#936
        result: Var#937
    Stmt_JumpIf
        cond: Var#937
        if: Block#250
        else: Block#251

Block#249
    Parent: Block#247
    Stmt_Jump
        target: Block#235

Block#250
    Parent: Block#248
    Var#938<$prop> = Phi(Var#934<$prop>)
    Var#939<$opt> = Phi(Var#935<$opt>)
    Expr_ArrayDimFetch
        var: Var#938<$prop>
        dim: LITERAL('name')
        result: Var#940
    Expr_ArrayDimFetch
        var: Var#939<$opt>
        dim: LITERAL('t')
        result: Var#941
    Expr_Assign
        var: Var#941
        expr: Var#940
        result: Var#942
    Stmt_Jump
        target: Block#252

Block#251
    Parent: Block#248
    Stmt_Jump
        target: Block#252

Block#252
    Parent: Block#250
    Parent: Block#251
    Var#943<$prop> = Phi(Var#938<$prop>, Var#934<$prop>)
    Var#944<$opt> = Phi(Var#939<$opt>, Var#935<$opt>)
    Expr_ArrayDimFetch
        var: Var#943<$prop>
        dim: LITERAL('userName')
        result: Var#945
    Expr_Isset
        vars[0]: Var#945
        result: Var#946
    Stmt_JumpIf
        cond: Var#946
        if: Block#253
        else: Block#254

Block#253
    Parent: Block#252
    Var#947<$prop> = Phi(Var#943<$prop>)
    Var#948<$opt> = Phi(Var#944<$opt>)
    Expr_ArrayDimFetch
        var: Var#947<$prop>
        dim: LITERAL('userName')
        result: Var#949
    Expr_ArrayDimFetch
        var: Var#948<$opt>
        dim: LITERAL('tu')
        result: Var#950
    Expr_Assign
        var: Var#950
        expr: Var#949
        result: Var#951
    Stmt_Jump
        target: Block#255

Block#254
    Parent: Block#252
    Stmt_Jump
        target: Block#255

Block#255
    Parent: Block#253
    Parent: Block#254
    Var#952<$prop> = Phi(Var#947<$prop>, Var#943<$prop>)
    Var#953<$opt> = Phi(Var#948<$opt>, Var#944<$opt>)
    Expr_ArrayDimFetch
        var: Var#952<$prop>
        dim: LITERAL('highlight')
        result: Var#954
    Expr_Isset
        vars[0]: Var#954
        result: Var#955
    Stmt_JumpIf
        cond: Var#955
        if: Block#256
        else: Block#257

Block#256
    Parent: Block#255
    Var#956<$prop> = Phi(Var#952<$prop>)
    Expr_ArrayDimFetch
        var: Var#956<$prop>
        dim: LITERAL('highlight')
        result: Var#957
    Stmt_Switch
        cond: Var#957
        cases[0]: LITERAL('none')
        cases[1]: LITERAL('highlight.n')
        cases[2]: LITERAL('invert')
        cases[3]: LITERAL('highlight.i')
        cases[4]: LITERAL('push')
        cases[5]: LITERAL('highlight.p')
        cases[6]: LITERAL('outline')
        cases[7]: LITERAL('highlight.o')
        targets[0]: Block#258
        targets[1]: Block#259
        targets[2]: Block#260
        targets[3]: Block#261
        targets[4]: Block#262
        targets[5]: Block#263
        targets[6]: Block#264
        targets[7]: Block#265
        default: Block#266

Block#257
    Parent: Block#255
    Stmt_Jump
        target: Block#267

Block#258
    Parent: Block#256
    Stmt_Jump
        target: Block#259

Block#259
    Parent: Block#256
    Parent: Block#258
    Var#958<$opt> = Phi(Var#953<$opt>)
    Expr_ArrayDimFetch
        var: Var#958<$opt>
        dim: LITERAL('h')
        result: Var#959
    Expr_Assign
        var: Var#959
        expr: LITERAL('N')
        result: Var#960
    Stmt_Jump
        target: Block#268

Block#260
    Parent: Block#256
    Stmt_Jump
        target: Block#261

Block#261
    Parent: Block#256
    Parent: Block#260
    Var#961<$opt> = Phi(Var#953<$opt>)
    Expr_ArrayDimFetch
        var: Var#961<$opt>
        dim: LITERAL('h')
        result: Var#962
    Expr_Assign
        var: Var#962
        expr: LITERAL('i')
        result: Var#963
    Stmt_Jump
        target: Block#268

Block#262
    Parent: Block#256
    Stmt_Jump
        target: Block#263

Block#263
    Parent: Block#256
    Parent: Block#262
    Var#964<$opt> = Phi(Var#953<$opt>)
    Expr_ArrayDimFetch
        var: Var#964<$opt>
        dim: LITERAL('h')
        result: Var#965
    Expr_Assign
        var: Var#965
        expr: LITERAL('P')
        result: Var#966
    Stmt_Jump
        target: Block#268

Block#264
    Parent: Block#256
    Stmt_Jump
        target: Block#265

Block#265
    Parent: Block#256
    Parent: Block#264
    Var#967<$opt> = Phi(Var#953<$opt>)
    Expr_ArrayDimFetch
        var: Var#967<$opt>
        dim: LITERAL('h')
        result: Var#968
    Expr_Assign
        var: Var#968
        expr: LITERAL('O')
        result: Var#969
    Stmt_Jump
        target: Block#268

Block#266
    Var#970<$opt> = Phi()
    Stmt_Jump
        target: Block#268

Block#267
    Parent: Block#268
    Parent: Block#257
    Var#971<$opt> = Phi(Var#972<$opt>, Var#953<$opt>)
    Terminal_Return
        expr: Var#971<$opt>

Block#268
    Parent: Block#266
    Parent: Block#259
    Parent: Block#261
    Parent: Block#263
    Parent: Block#265
    Var#972<$opt> = Phi(Var#970<$opt>, Var#958<$opt>, Var#961<$opt>, Var#964<$opt>, Var#967<$opt>)
    Stmt_Jump
        target: Block#267

Function TCPDF_STATIC::formatPageNumber(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('num')
        result: Var#1<$num>
    Expr_Cast_Double
        expr: Var#1<$num>
        result: Var#2
    Expr_FuncCall
        name: LITERAL('number_format')
        args[0]: Var#2
        args[1]: LITERAL(0)
        args[2]: LITERAL('')
        args[3]: LITERAL('.')
        result: Var#3
    Terminal_Return
        expr: Var#3

Function TCPDF_STATIC::formatTOCPageNumber(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('num')
        result: Var#1<$num>
    Expr_Cast_Double
        expr: Var#1<$num>
        result: Var#2
    Expr_FuncCall
        name: LITERAL('number_format')
        args[0]: Var#2
        args[1]: LITERAL(0)
        args[2]: LITERAL('')
        args[3]: LITERAL('.')
        result: Var#3
    Terminal_Return
        expr: Var#3

Function TCPDF_STATIC::extractCSSproperties(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('cssdata')
        result: Var#1<$cssdata>
    Expr_Empty
        expr: Var#1<$cssdata>
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_Array
        result: Var#3
    Terminal_Return
        expr: Var#3

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Var#4<$cssdata> = Phi(Var#1<$cssdata>)
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/\\/\\*[^\\*]*\\*\\//')
        args[1]: LITERAL('')
        args[2]: Var#4<$cssdata>
        result: Var#5
    Expr_Assign
        var: Var#6<$cssdata>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/[\\s]+/')
        args[1]: LITERAL(' ')
        args[2]: Var#6<$cssdata>
        result: Var#8
    Expr_Assign
        var: Var#9<$cssdata>
        expr: Var#8
        result: Var#10
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/[\\s]*([;:\\{\\}]{1})[\\s]*/')
        args[1]: LITERAL('\\1')
        args[2]: Var#9<$cssdata>
        result: Var#11
    Expr_Assign
        var: Var#12<$cssdata>
        expr: Var#11
        result: Var#13
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([^\\}\\{]+)\\{\\}/')
        args[1]: LITERAL('')
        args[2]: Var#12<$cssdata>
        result: Var#14
    Expr_Assign
        var: Var#15<$cssdata>
        expr: Var#14
        result: Var#16
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/@media[\\s]+([^\\{]*)\\{/i')
        args[1]: LITERAL('@media \\1Â§')
        args[2]: Var#15<$cssdata>
        result: Var#17
    Expr_Assign
        var: Var#18<$cssdata>
        expr: Var#17
        result: Var#19
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/\\}\\}/si')
        args[1]: LITERAL('}Â§')
        args[2]: Var#18<$cssdata>
        result: Var#20
    Expr_Assign
        var: Var#21<$cssdata>
        expr: Var#20
        result: Var#22
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#21<$cssdata>
        result: Var#23
    Expr_Assign
        var: Var#24<$cssdata>
        expr: Var#23
        result: Var#25
    Expr_Array
        result: Var#26
    Expr_Assign
        var: Var#27<$cssblocks>
        expr: Var#26
        result: Var#28
    Expr_Array
        result: Var#29
    Expr_Assign
        var: Var#30<$matches>
        expr: Var#29
        result: Var#31
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/@media[\\s]+([^\\Â§]*)Â§([^Â§]*)Â§/i')
        args[1]: Var#24<$cssdata>
        args[2]: Var#30<$matches>
        result: Var#32
    Expr_BinaryOp_Greater
        left: Var#32
        right: LITERAL(0)
        result: Var#33
    Stmt_JumpIf
        cond: Var#33
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#34<$matches> = Phi(Var#30<$matches>)
    Expr_ArrayDimFetch
        var: Var#34<$matches>
        dim: LITERAL(1)
        result: Var#35
    Iterator_Reset
        var: Var#35
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Parent: Block#13
    Var#36<$matches> = Phi(Var#34<$matches>, Var#37<$matches>)
    Var#38<$cssblocks> = Phi(Var#27<$cssblocks>, Var#39<$cssblocks>)
    Var#40<$cssdata> = Phi(Var#24<$cssdata>)
    Iterator_Valid
        var: Var#35
        result: Var#41
    Stmt_JumpIf
        cond: Var#41
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#14
    Parent: Block#6
    Var#42<$cssblocks> = Phi(Var#38<$cssblocks>, Var#27<$cssblocks>)
    Var#43<$cssdata> = Phi(Var#44<$cssdata>, Var#24<$cssdata>)
    Expr_ArrayDimFetch
        var: Var#42<$cssblocks>
        dim: LITERAL('all')
        result: Var#45
    Expr_Isset
        vars[0]: Var#45
        result: Var#46
    Stmt_JumpIf
        cond: Var#46
        if: Block#11
        else: Block#12

Block#9
    Parent: Block#7
    Var#37<$matches> = Phi(Var#36<$matches>)
    Var#39<$cssblocks> = Phi(Var#38<$cssblocks>)
    Iterator_Key
        var: Var#35
        result: Var#47
    Expr_Assign
        var: Var#48<$key>
        expr: Var#47
        result: Var#49
    Iterator_Value
        var: Var#35
        result: Var#50
    Expr_Assign
        var: Var#51<$type>
        expr: Var#50
        result: Var#52
    Expr_ArrayDimFetch
        var: Var#37<$matches>
        dim: LITERAL(2)
        result: Var#53
    Expr_ArrayDimFetch
        var: Var#53
        dim: Var#48<$key>
        result: Var#54
    Expr_ArrayDimFetch
        var: Var#39<$cssblocks>
        dim: Var#51<$type>
        result: Var#55
    Expr_Assign
        var: Var#55
        expr: Var#54
        result: Var#56
    Stmt_Jump
        target: Block#13

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#8
    Var#57<$cssblocks> = Phi(Var#42<$cssblocks>)
    Expr_ArrayDimFetch
        var: Var#57<$cssblocks>
        dim: LITERAL('all')
        result: Var#58
    Expr_Empty
        expr: Var#58
        result: Var#59
    Expr_BooleanNot
        expr: Var#59
        result: Var#60
    Expr_Cast_Bool
        expr: Var#60
        result: Var#61
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#8
    Parent: Block#11
    Var#62 = Phi(LITERAL(false), Var#61)
    Var#63<$cssdata> = Phi(Var#43<$cssdata>)
    Var#64<$cssblocks> = Phi(Var#42<$cssblocks>, Var#57<$cssblocks>)
    Stmt_JumpIf
        cond: Var#62
        if: Block#15
        else: Block#16

Block#13
    Parent: Block#9
    Stmt_Jump
        target: Block#7

Block#14
    Parent: Block#10
    Var#65<$cssdata> = Phi(Var#40<$cssdata>)
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/@media[\\s]+([^\\Â§]*)Â§([^Â§]*)Â§/i')
        args[1]: LITERAL('')
        args[2]: Var#65<$cssdata>
        result: Var#66
    Expr_Assign
        var: Var#44<$cssdata>
        expr: Var#66
        result: Var#67
    Stmt_Jump
        target: Block#8

Block#15
    Parent: Block#12
    Var#68<$cssdata> = Phi(Var#63<$cssdata>)
    Var#69<$cssblocks> = Phi(Var#64<$cssblocks>)
    Expr_ArrayDimFetch
        var: Var#69<$cssblocks>
        dim: LITERAL('all')
        result: Var#70
    Expr_BinaryOp_Concat
        left: Var#68<$cssdata>
        right: Var#70
        result: Var#71
    Expr_Assign
        var: Var#72<$cssdata>
        expr: Var#71
        result: Var#73
    Stmt_Jump
        target: Block#17

Block#16
    Parent: Block#12
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#15
    Parent: Block#16
    Var#74<$cssblocks> = Phi(Var#69<$cssblocks>, Var#64<$cssblocks>)
    Var#75<$cssdata> = Phi(Var#72<$cssdata>, Var#63<$cssdata>)
    Expr_ArrayDimFetch
        var: Var#74<$cssblocks>
        dim: LITERAL('print')
        result: Var#76
    Expr_Isset
        vars[0]: Var#76
        result: Var#77
    Stmt_JumpIf
        cond: Var#77
        if: Block#18
        else: Block#19

Block#18
    Parent: Block#17
    Var#78<$cssblocks> = Phi(Var#74<$cssblocks>)
    Expr_ArrayDimFetch
        var: Var#78<$cssblocks>
        dim: LITERAL('print')
        result: Var#79
    Expr_Empty
        expr: Var#79
        result: Var#80
    Expr_BooleanNot
        expr: Var#80
        result: Var#81
    Expr_Cast_Bool
        expr: Var#81
        result: Var#82
    Stmt_Jump
        target: Block#19

Block#19
    Parent: Block#17
    Parent: Block#18
    Var#83 = Phi(LITERAL(false), Var#82)
    Var#84<$cssdata> = Phi(Var#75<$cssdata>)
    Var#85<$cssblocks> = Phi(Var#74<$cssblocks>, Var#78<$cssblocks>)
    Stmt_JumpIf
        cond: Var#83
        if: Block#20
        else: Block#21

Block#20
    Parent: Block#19
    Var#86<$cssdata> = Phi(Var#84<$cssdata>)
    Var#87<$cssblocks> = Phi(Var#85<$cssblocks>)
    Expr_ArrayDimFetch
        var: Var#87<$cssblocks>
        dim: LITERAL('print')
        result: Var#88
    Expr_BinaryOp_Concat
        left: Var#86<$cssdata>
        right: Var#88
        result: Var#89
    Expr_Assign
        var: Var#90<$cssdata>
        expr: Var#89
        result: Var#91
    Stmt_Jump
        target: Block#22

Block#21
    Parent: Block#19
    Stmt_Jump
        target: Block#22

Block#22
    Parent: Block#20
    Parent: Block#21
    Var#92<$cssdata> = Phi(Var#90<$cssdata>, Var#84<$cssdata>)
    Expr_Array
        result: Var#93
    Expr_Assign
        var: Var#94<$cssblocks>
        expr: Var#93
        result: Var#95
    Expr_Array
        result: Var#96
    Expr_Assign
        var: Var#97<$matches>
        expr: Var#96
        result: Var#98
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#99
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#92<$cssdata>
        args[1]: Var#99
        result: Var#100
    Expr_BinaryOp_Equal
        left: Var#100
        right: LITERAL('}')
        result: Var#101
    Stmt_JumpIf
        cond: Var#101
        if: Block#23
        else: Block#24

Block#23
    Parent: Block#22
    Var#102<$cssdata> = Phi(Var#92<$cssdata>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#103
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#102<$cssdata>
        args[1]: LITERAL(0)
        args[2]: Var#103
        result: Var#104
    Expr_Assign
        var: Var#105<$cssdata>
        expr: Var#104
        result: Var#106
    Stmt_Jump
        target: Block#25

Block#24
    Parent: Block#22
    Stmt_Jump
        target: Block#25

Block#25
    Parent: Block#23
    Parent: Block#24
    Var#107<$cssdata> = Phi(Var#105<$cssdata>, Var#92<$cssdata>)
    Var#108<$cssblocks> = Phi(Var#94<$cssblocks>)
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('}')
        args[1]: Var#107<$cssdata>
        result: Var#109
    Expr_Assign
        var: Var#110<$matches>
        expr: Var#109
        result: Var#111
    Iterator_Reset
        var: Var#110<$matches>
    Stmt_Jump
        target: Block#26

Block#26
    Parent: Block#25
    Parent: Block#34
    Var#112<$cssblocks> = Phi(Var#108<$cssblocks>, Var#113<$cssblocks>)
    Iterator_Valid
        var: Var#110<$matches>
        result: Var#114
    Stmt_JumpIf
        cond: Var#114
        if: Block#27
        else: Block#28

Block#27
    Parent: Block#26
    Var#115<$cssblocks> = Phi(Var#112<$cssblocks>)
    Iterator_Key
        var: Var#110<$matches>
        result: Var#116
    Expr_Assign
        var: Var#117<$key>
        expr: Var#116
        result: Var#118
    Iterator_Value
        var: Var#110<$matches>
        result: Var#119
    Expr_Assign
        var: Var#120<$block>
        expr: Var#119
        result: Var#121
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL('{')
        args[1]: Var#120<$block>
        result: Var#122
    Expr_ArrayDimFetch
        var: Var#115<$cssblocks>
        dim: Var#117<$key>
        result: Var#123
    Expr_Assign
        var: Var#123
        expr: Var#122
        result: Var#124
    Expr_ArrayDimFetch
        var: Var#115<$cssblocks>
        dim: Var#117<$key>
        result: Var#125
    Expr_ArrayDimFetch
        var: Var#125
        dim: LITERAL(1)
        result: Var#126
    Expr_Isset
        vars[0]: Var#126
        result: Var#127
    Expr_BooleanNot
        expr: Var#127
        result: Var#128
    Stmt_JumpIf
        cond: Var#128
        if: Block#29
        else: Block#30

Block#28
    Parent: Block#26
    Stmt_Jump
        target: Block#31

Block#29
    Parent: Block#27
    Var#129<$cssblocks> = Phi(Var#115<$cssblocks>)
    Var#130<$key> = Phi(Var#117<$key>)
    Expr_ArrayDimFetch
        var: Var#129<$cssblocks>
        dim: Var#130<$key>
        result: Var#131
    Terminal_Unset
        exprs[0]: Var#131
    Stmt_Jump
        target: Block#32

Block#30
    Parent: Block#27
    Stmt_Jump
        target: Block#32

Block#31
    Parent: Block#28
    Var#132<$cssblocks> = Phi(Var#112<$cssblocks>)
    Iterator_Reset
        var: Var#132<$cssblocks>
    Stmt_Jump
        target: Block#33

Block#32
    Parent: Block#29
    Parent: Block#30
    Var#113<$cssblocks> = Phi(Var#129<$cssblocks>, Var#115<$cssblocks>)
    Stmt_Jump
        target: Block#34

Block#33
    Parent: Block#31
    Parent: Block#45
    Var#133<$cssblocks> = Phi(Var#132<$cssblocks>, Var#134<$cssblocks>)
    Iterator_Valid
        var: Var#132<$cssblocks>
        result: Var#135
    Stmt_JumpIf
        cond: Var#135
        if: Block#35
        else: Block#36

Block#34
    Parent: Block#32
    Stmt_Jump
        target: Block#26

Block#35
    Parent: Block#33
    Iterator_Key
        var: Var#132<$cssblocks>
        result: Var#136
    Expr_Assign
        var: Var#137<$key>
        expr: Var#136
        result: Var#138
    Iterator_Value
        var: Var#132<$cssblocks>
        result: Var#139
    Expr_Assign
        var: Var#140<$block>
        expr: Var#139
        result: Var#141
    Expr_ArrayDimFetch
        var: Var#140<$block>
        dim: LITERAL(0)
        result: Var#142
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#142
        args[1]: LITERAL(',')
        result: Var#143
    Expr_BinaryOp_Greater
        left: Var#143
        right: LITERAL(0)
        result: Var#144
    Stmt_JumpIf
        cond: Var#144
        if: Block#37
        else: Block#38

Block#36
    Parent: Block#33
    Stmt_Jump
        target: Block#39

Block#37
    Parent: Block#35
    Var#145<$block> = Phi(Var#140<$block>)
    Expr_ArrayDimFetch
        var: Var#145<$block>
        dim: LITERAL(0)
        result: Var#146
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL(',')
        args[1]: Var#146
        result: Var#147
    Expr_Assign
        var: Var#148<$selectors>
        expr: Var#147
        result: Var#149
    Iterator_Reset
        var: Var#148<$selectors>
    Stmt_Jump
        target: Block#40

Block#38
    Parent: Block#35
    Stmt_Jump
        target: Block#41

Block#39
    Parent: Block#36
    Var#150<$cssblocks> = Phi(Var#133<$cssblocks>)
    Expr_Array
        result: Var#151
    Expr_Assign
        var: Var#152<$cssdata>
        expr: Var#151
        result: Var#153
    Iterator_Reset
        var: Var#150<$cssblocks>
    Stmt_Jump
        target: Block#42

Block#40
    Parent: Block#37
    Parent: Block#48
    Var#154<$block> = Phi(Var#145<$block>, Var#155<$block>)
    Var#156<$cssblocks> = Phi(Var#133<$cssblocks>, Var#157<$cssblocks>)
    Var#158<$key> = Phi(Var#137<$key>)
    Iterator_Valid
        var: Var#148<$selectors>
        result: Var#159
    Stmt_JumpIf
        cond: Var#159
        if: Block#43
        else: Block#44

Block#41
    Parent: Block#49
    Parent: Block#38
    Var#134<$cssblocks> = Phi(Var#160<$cssblocks>, Var#133<$cssblocks>)
    Stmt_Jump
        target: Block#45

Block#42
    Parent: Block#39
    Parent: Block#50
    Var#161<$cssdata> = Phi(Var#152<$cssdata>, Var#162<$cssdata>)
    Iterator_Valid
        var: Var#150<$cssblocks>
        result: Var#163
    Stmt_JumpIf
        cond: Var#163
        if: Block#46
        else: Block#47

Block#43
    Parent: Block#40
    Var#155<$block> = Phi(Var#154<$block>)
    Var#157<$cssblocks> = Phi(Var#156<$cssblocks>)
    Iterator_Value
        var: Var#148<$selectors>
        result: Var#164
    Expr_Assign
        var: Var#165<$sel>
        expr: Var#164
        result: Var#166
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#165<$sel>
        result: Var#167
    Expr_ArrayDimFetch
        var: Var#155<$block>
        dim: LITERAL(1)
        result: Var#168
    Expr_Array
        keys[0]: LITERAL(0)
        keys[1]: LITERAL(1)
        values[0]: Var#167
        values[1]: Var#168
        result: Var#169
    Expr_ArrayDimFetch
        var: Var#157<$cssblocks>
        dim: NULL
        result: Var#170
    Expr_Assign
        var: Var#170
        expr: Var#169
        result: Var#171
    Stmt_Jump
        target: Block#48

Block#44
    Parent: Block#40
    Stmt_Jump
        target: Block#49

Block#45
    Parent: Block#41
    Stmt_Jump
        target: Block#33

Block#46
    Parent: Block#42
    Var#162<$cssdata> = Phi(Var#161<$cssdata>)
    Iterator_Value
        var: Var#150<$cssblocks>
        result: Var#172
    Expr_Assign
        var: Var#173<$block>
        expr: Var#172
        result: Var#174
    Expr_ArrayDimFetch
        var: Var#173<$block>
        dim: LITERAL(0)
        result: Var#175
    Expr_Assign
        var: Var#176<$selector>
        expr: Var#175
        result: Var#177
    Expr_Array
        result: Var#178
    Expr_Assign
        var: Var#179<$matches>
        expr: Var#178
        result: Var#180
    Expr_Assign
        var: Var#181<$a>
        expr: LITERAL(0)
        result: Var#182
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/[\\#]/')
        args[1]: Var#176<$selector>
        args[2]: Var#179<$matches>
        result: Var#183
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#183
        result: Var#184
    Expr_Assign
        var: Var#185<$b>
        expr: Var#184
        result: Var#186
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/[\\[\\.]/')
        args[1]: Var#176<$selector>
        args[2]: Var#179<$matches>
        result: Var#187
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#187
        result: Var#188
    Expr_Assign
        var: Var#189<$c>
        expr: Var#188
        result: Var#190
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/[\\:]link|visited|hover|active|focus|target|lang|enabled|disabled|checked|indeterminate|root|nth|first|last|only|empty|contains|not/i')
        args[1]: Var#176<$selector>
        args[2]: Var#179<$matches>
        result: Var#191
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#191
        result: Var#192
    Expr_BinaryOp_Plus
        left: Var#189<$c>
        right: Var#192
        result: Var#193
    Expr_Assign
        var: Var#194<$c>
        expr: Var#193
        result: Var#195
    Expr_BinaryOp_Concat
        left: LITERAL(' ')
        right: Var#176<$selector>
        result: Var#196
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/[\\>\\+\\~\\s]{1}[a-zA-Z0-9]+/')
        args[1]: Var#196
        args[2]: Var#179<$matches>
        result: Var#197
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#197
        result: Var#198
    Expr_Assign
        var: Var#199<$d>
        expr: Var#198
        result: Var#200
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/[\\:][\\:]/')
        args[1]: Var#176<$selector>
        args[2]: Var#179<$matches>
        result: Var#201
    Expr_FuncCall
        name: LITERAL('intval')
        args[0]: Var#201
        result: Var#202
    Expr_BinaryOp_Plus
        left: Var#199<$d>
        right: Var#202
        result: Var#203
    Expr_Assign
        var: Var#204<$d>
        expr: Var#203
        result: Var#205
    Expr_BinaryOp_Concat
        left: Var#181<$a>
        right: Var#185<$b>
        result: Var#206
    Expr_BinaryOp_Concat
        left: Var#206
        right: Var#194<$c>
        result: Var#207
    Expr_BinaryOp_Concat
        left: Var#207
        right: Var#204<$d>
        result: Var#208
    Expr_Assign
        var: Var#209<$specificity>
        expr: Var#208
        result: Var#210
    Expr_ArrayDimFetch
        var: Var#173<$block>
        dim: LITERAL(1)
        result: Var#211
    Expr_BinaryOp_Concat
        left: Var#209<$specificity>
        right: LITERAL(' ')
        result: Var#212
    Expr_BinaryOp_Concat
        left: Var#212
        right: Var#176<$selector>
        result: Var#213
    Expr_ArrayDimFetch
        var: Var#162<$cssdata>
        dim: Var#213
        result: Var#214
    Expr_Assign
        var: Var#214
        expr: Var#211
        result: Var#215
    Stmt_Jump
        target: Block#50

Block#47
    Parent: Block#42
    Stmt_Jump
        target: Block#51

Block#48
    Parent: Block#43
    Stmt_Jump
        target: Block#40

Block#49
    Parent: Block#44
    Var#160<$cssblocks> = Phi(Var#156<$cssblocks>)
    Var#216<$key> = Phi(Var#158<$key>)
    Expr_ArrayDimFetch
        var: Var#160<$cssblocks>
        dim: Var#216<$key>
        result: Var#217
    Terminal_Unset
        exprs[0]: Var#217
    Stmt_Jump
        target: Block#41

Block#50
    Parent: Block#46
    Stmt_Jump
        target: Block#42

Block#51
    Parent: Block#47
    Var#218<$cssdata> = Phi(Var#161<$cssdata>)
    Expr_ConstFetch
        name: LITERAL('SORT_STRING')
        result: Var#219
    Expr_FuncCall
        name: LITERAL('ksort')
        args[0]: Var#218<$cssdata>
        args[1]: Var#219
        result: Var#220
    Terminal_Return
        expr: Var#218<$cssdata>

Function TCPDF_STATIC::fixHTMLCode(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('html')
        result: Var#1<$html>
    Expr_Param
        declaredType: mixed
        name: LITERAL('default_css')
        defaultVar: LITERAL('')
        result: Var#2<$default_css>
        defaultBlock: Block#2
    Expr_Param
        declaredType: mixed
        name: LITERAL('tagvs')
        defaultVar: LITERAL('')
        result: Var#3<$tagvs>
        defaultBlock: Block#3
    Expr_Param
        declaredType: mixed
        name: LITERAL('tidy_options')
        defaultVar: LITERAL('')
        result: Var#4<$tidy_options>
        defaultBlock: Block#4
    Expr_Param
        declaredType: mixed
        name: LITERAL('tagvspaces')
        result: Var#5<$tagvspaces>
    Var#6<$matches> = Phi()
    Expr_BinaryOp_Identical
        left: Var#4<$tidy_options>
        right: LITERAL('')
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#5
        else: Block#6

Block#2

Block#3

Block#4

Block#5
    Parent: Block#1
    Expr_Array
        keys[0]: LITERAL('clean')
        keys[1]: LITERAL('drop-empty-paras')
        keys[2]: LITERAL('drop-proprietary-attributes')
        keys[3]: LITERAL('fix-backslash')
        keys[4]: LITERAL('hide-comments')
        keys[5]: LITERAL('join-styles')
        keys[6]: LITERAL('lower-literals')
        keys[7]: LITERAL('merge-divs')
        keys[8]: LITERAL('merge-spans')
        keys[9]: LITERAL('output-xhtml')
        keys[10]: LITERAL('word-2000')
        keys[11]: LITERAL('wrap')
        keys[12]: LITERAL('output-bom')
        values[0]: LITERAL(1)
        values[1]: LITERAL(0)
        values[2]: LITERAL(1)
        values[3]: LITERAL(1)
        values[4]: LITERAL(1)
        values[5]: LITERAL(1)
        values[6]: LITERAL(1)
        values[7]: LITERAL(1)
        values[8]: LITERAL(1)
        values[9]: LITERAL(1)
        values[10]: LITERAL(1)
        values[11]: LITERAL(0)
        values[12]: LITERAL(0)
        result: Var#8
    Expr_Assign
        var: Var#9<$tidy_options>
        expr: Var#8
        result: Var#10
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#1
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#11<$html> = Phi(Var#1<$html>)
    Var#12<$tidy_options> = Phi(Var#9<$tidy_options>, Var#4<$tidy_options>)
    Var#13<$matches> = Phi(Var#6<$matches>)
    Var#14<$default_css> = Phi(Var#2<$default_css>)
    Var#15<$tagvs> = Phi(Var#3<$tagvs>)
    Expr_FuncCall
        name: LITERAL('tidy_parse_string')
        args[0]: Var#11<$html>
        args[1]: Var#12<$tidy_options>
        result: Var#16
    Expr_Assign
        var: Var#17<$tidy>
        expr: Var#16
        result: Var#18
    Expr_MethodCall
        var: Var#17<$tidy>
        name: LITERAL('cleanRepair')
        result: Var#19
    Expr_FuncCall
        name: LITERAL('tidy_get_head')
        args[0]: Var#17<$tidy>
        result: Var#20
    Expr_Assign
        var: Var#21<$tidy_head>
        expr: Var#20
        result: Var#22
    Expr_PropertyFetch
        var: Var#21<$tidy_head>
        name: LITERAL('value')
        result: Var#23
    Expr_Assign
        var: Var#24<$css>
        expr: Var#23
        result: Var#25
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/<style([^>]+)>/ims')
        args[1]: LITERAL('<style>')
        args[2]: Var#24<$css>
        result: Var#26
    Expr_Assign
        var: Var#27<$css>
        expr: Var#26
        result: Var#28
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/<\\/style>(.*)<style>/ims')
        args[1]: LITERAL('
        ')
        args[2]: Var#27<$css>
        result: Var#29
    Expr_Assign
        var: Var#30<$css>
        expr: Var#29
        result: Var#31
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('/*<![CDATA[*/')
        args[1]: LITERAL('')
        args[2]: Var#30<$css>
        result: Var#32
    Expr_Assign
        var: Var#33<$css>
        expr: Var#32
        result: Var#34
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('/*]]>*/')
        args[1]: LITERAL('')
        args[2]: Var#33<$css>
        result: Var#35
    Expr_Assign
        var: Var#36<$css>
        expr: Var#35
        result: Var#37
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/<style>(.*)<\\/style>/ims')
        args[1]: Var#36<$css>
        args[2]: Var#13<$matches>
        result: Var#38
    Expr_ArrayDimFetch
        var: Var#13<$matches>
        dim: LITERAL(1)
        result: Var#39
    Expr_Isset
        vars[0]: Var#39
        result: Var#40
    Stmt_JumpIf
        cond: Var#40
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#41<$matches> = Phi(Var#13<$matches>)
    Expr_ArrayDimFetch
        var: Var#41<$matches>
        dim: LITERAL(1)
        result: Var#42
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#42
        result: Var#43
    Expr_Assign
        var: Var#44<$css>
        expr: Var#43
        result: Var#45
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#7
    Expr_Assign
        var: Var#46<$css>
        expr: LITERAL('')
        result: Var#47
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#8
    Parent: Block#9
    Var#48<$default_css> = Phi(Var#14<$default_css>)
    Var#49<$css> = Phi(Var#44<$css>, Var#46<$css>)
    Var#50<$tidy> = Phi(Var#17<$tidy>)
    Var#51<$tagvs> = Phi(Var#15<$tagvs>)
    Expr_BinaryOp_Concat
        left: LITERAL('<style>')
        right: Var#48<$default_css>
        result: Var#52
    Expr_BinaryOp_Concat
        left: Var#52
        right: Var#49<$css>
        result: Var#53
    Expr_BinaryOp_Concat
        left: Var#53
        right: LITERAL('</style>')
        result: Var#54
    Expr_Assign
        var: Var#55<$css>
        expr: Var#54
        result: Var#56
    Expr_FuncCall
        name: LITERAL('tidy_get_body')
        args[0]: Var#50<$tidy>
        result: Var#57
    Expr_Assign
        var: Var#58<$tidy_body>
        expr: Var#57
        result: Var#59
    Expr_PropertyFetch
        var: Var#58<$tidy_body>
        name: LITERAL('value')
        result: Var#60
    Expr_Assign
        var: Var#61<$html>
        expr: Var#60
        result: Var#62
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('<br>')
        args[1]: LITERAL('<br />')
        args[2]: Var#61<$html>
        result: Var#63
    Expr_Assign
        var: Var#64<$html>
        expr: Var#63
        result: Var#65
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/<div([^\\>]*)><\\/div>/')
        args[1]: LITERAL('')
        args[2]: Var#64<$html>
        result: Var#66
    Expr_Assign
        var: Var#67<$html>
        expr: Var#66
        result: Var#68
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/<p([^\\>]*)><\\/p>/')
        args[1]: LITERAL('')
        args[2]: Var#67<$html>
        result: Var#69
    Expr_Assign
        var: Var#70<$html>
        expr: Var#69
        result: Var#71
    Expr_BinaryOp_NotIdentical
        left: Var#51<$tagvs>
        right: LITERAL('')
        result: Var#72
    Stmt_JumpIf
        cond: Var#72
        if: Block#11
        else: Block#12

Block#11
    Parent: Block#10
    Var#73<$tagvs> = Phi(Var#51<$tagvs>)
    Expr_Assign
        var: Var#74<$tagvspaces>
        expr: Var#73<$tagvs>
        result: Var#75
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#10
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#11
    Parent: Block#12
    Var#76<$css> = Phi(Var#55<$css>)
    Var#77<$html> = Phi(Var#70<$html>)
    Expr_BinaryOp_Concat
        left: Var#76<$css>
        right: Var#77<$html>
        result: Var#78
    Terminal_Return
        expr: Var#78

Function TCPDF_STATIC::isValidCSSSelectorForTag(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('dom')
        result: Var#1<$dom>
    Expr_Param
        declaredType: mixed
        name: LITERAL('key')
        result: Var#2<$key>
    Expr_Param
        declaredType: mixed
        name: LITERAL('selector')
        result: Var#3<$selector>
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#4
    Expr_Assign
        var: Var#5<$valid>
        expr: Var#4
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#1<$dom>
        dim: Var#2<$key>
        result: Var#7
    Expr_ArrayDimFetch
        var: Var#7
        dim: LITERAL('value')
        result: Var#8
    Expr_Assign
        var: Var#9<$tag>
        expr: Var#8
        result: Var#10
    Expr_Array
        result: Var#11
    Expr_Assign
        var: Var#12<$class>
        expr: Var#11
        result: Var#13
    Expr_ArrayDimFetch
        var: Var#1<$dom>
        dim: Var#2<$key>
        result: Var#14
    Expr_ArrayDimFetch
        var: Var#14
        dim: LITERAL('attribute')
        result: Var#15
    Expr_ArrayDimFetch
        var: Var#15
        dim: LITERAL('class')
        result: Var#16
    Expr_Isset
        vars[0]: Var#16
        result: Var#17
    Stmt_JumpIf
        cond: Var#17
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#18<$dom> = Phi(Var#1<$dom>)
    Var#19<$key> = Phi(Var#2<$key>)
    Expr_ArrayDimFetch
        var: Var#18<$dom>
        dim: Var#19<$key>
        result: Var#20
    Expr_ArrayDimFetch
        var: Var#20
        dim: LITERAL('attribute')
        result: Var#21
    Expr_ArrayDimFetch
        var: Var#21
        dim: LITERAL('class')
        result: Var#22
    Expr_Empty
        expr: Var#22
        result: Var#23
    Expr_BooleanNot
        expr: Var#23
        result: Var#24
    Expr_Cast_Bool
        expr: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#26 = Phi(LITERAL(false), Var#25)
    Var#27<$dom> = Phi(Var#1<$dom>, Var#18<$dom>)
    Var#28<$key> = Phi(Var#2<$key>, Var#19<$key>)
    Var#29<$selector> = Phi(Var#3<$selector>)
    Var#30<$tag> = Phi(Var#9<$tag>)
    Var#31<$class> = Phi(Var#12<$class>)
    Var#32<$valid> = Phi(Var#5<$valid>)
    Stmt_JumpIf
        cond: Var#26
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#33<$dom> = Phi(Var#27<$dom>)
    Var#34<$key> = Phi(Var#28<$key>)
    Expr_ArrayDimFetch
        var: Var#33<$dom>
        dim: Var#34<$key>
        result: Var#35
    Expr_ArrayDimFetch
        var: Var#35
        dim: LITERAL('attribute')
        result: Var#36
    Expr_ArrayDimFetch
        var: Var#36
        dim: LITERAL('class')
        result: Var#37
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#37
        result: Var#38
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL(' ')
        args[1]: Var#38
        result: Var#39
    Expr_Assign
        var: Var#40<$class>
        expr: Var#39
        result: Var#41
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#4
    Parent: Block#5
    Var#42<$dom> = Phi(Var#33<$dom>, Var#27<$dom>)
    Var#43<$key> = Phi(Var#34<$key>, Var#28<$key>)
    Var#44<$selector> = Phi(Var#29<$selector>)
    Var#45<$tag> = Phi(Var#30<$tag>)
    Var#46<$class> = Phi(Var#40<$class>, Var#31<$class>)
    Var#47<$valid> = Phi(Var#32<$valid>)
    Expr_Assign
        var: Var#48<$id>
        expr: LITERAL('')
        result: Var#49
    Expr_ArrayDimFetch
        var: Var#42<$dom>
        dim: Var#43<$key>
        result: Var#50
    Expr_ArrayDimFetch
        var: Var#50
        dim: LITERAL('attribute')
        result: Var#51
    Expr_ArrayDimFetch
        var: Var#51
        dim: LITERAL('id')
        result: Var#52
    Expr_Isset
        vars[0]: Var#52
        result: Var#53
    Stmt_JumpIf
        cond: Var#53
        if: Block#7
        else: Block#8

Block#7
    Parent: Block#6
    Var#54<$dom> = Phi(Var#42<$dom>)
    Var#55<$key> = Phi(Var#43<$key>)
    Expr_ArrayDimFetch
        var: Var#54<$dom>
        dim: Var#55<$key>
        result: Var#56
    Expr_ArrayDimFetch
        var: Var#56
        dim: LITERAL('attribute')
        result: Var#57
    Expr_ArrayDimFetch
        var: Var#57
        dim: LITERAL('id')
        result: Var#58
    Expr_Empty
        expr: Var#58
        result: Var#59
    Expr_BooleanNot
        expr: Var#59
        result: Var#60
    Expr_Cast_Bool
        expr: Var#60
        result: Var#61
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#62 = Phi(LITERAL(false), Var#61)
    Var#63<$dom> = Phi(Var#42<$dom>, Var#54<$dom>)
    Var#64<$key> = Phi(Var#43<$key>, Var#55<$key>)
    Var#65<$selector> = Phi(Var#44<$selector>)
    Var#66<$tag> = Phi(Var#45<$tag>)
    Var#67<$class> = Phi(Var#46<$class>)
    Var#68<$id> = Phi(Var#48<$id>)
    Var#69<$valid> = Phi(Var#47<$valid>)
    Stmt_JumpIf
        cond: Var#62
        if: Block#9
        else: Block#10

Block#9
    Parent: Block#8
    Var#70<$dom> = Phi(Var#63<$dom>)
    Var#71<$key> = Phi(Var#64<$key>)
    Expr_ArrayDimFetch
        var: Var#70<$dom>
        dim: Var#71<$key>
        result: Var#72
    Expr_ArrayDimFetch
        var: Var#72
        dim: LITERAL('attribute')
        result: Var#73
    Expr_ArrayDimFetch
        var: Var#73
        dim: LITERAL('id')
        result: Var#74
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#74
        result: Var#75
    Expr_Assign
        var: Var#76<$id>
        expr: Var#75
        result: Var#77
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#11

Block#11
    Parent: Block#9
    Parent: Block#10
    Var#78<$selector> = Phi(Var#65<$selector>)
    Var#79<$tag> = Phi(Var#66<$tag>)
    Var#80<$class> = Phi(Var#67<$class>)
    Var#81<$id> = Phi(Var#76<$id>, Var#68<$id>)
    Var#82<$dom> = Phi(Var#70<$dom>, Var#63<$dom>)
    Var#83<$key> = Phi(Var#71<$key>, Var#64<$key>)
    Var#84<$valid> = Phi(Var#69<$valid>)
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/([\\>\\+\\~\\s]{1})([\\.]{1})([^\\>\\+\\~\\s]*)/si')
        args[1]: LITERAL('\\1*.\\3')
        args[2]: Var#78<$selector>
        result: Var#85
    Expr_Assign
        var: Var#86<$selector>
        expr: Var#85
        result: Var#87
    Expr_Array
        result: Var#88
    Expr_Assign
        var: Var#89<$matches>
        expr: Var#88
        result: Var#90
    Expr_ConstFetch
        name: LITERAL('PREG_PATTERN_ORDER')
        result: Var#91
    Expr_ConstFetch
        name: LITERAL('PREG_OFFSET_CAPTURE')
        result: Var#92
    Expr_BinaryOp_BitwiseOr
        left: Var#91
        right: Var#92
        result: Var#93
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/([\\>\\+\\~\\s]{1})([a-zA-Z0-9\\*]+)([^\\>\\+\\~\\s]*)/si')
        args[1]: Var#86<$selector>
        args[2]: Var#89<$matches>
        args[3]: Var#93
        result: Var#94
    Expr_BinaryOp_Greater
        left: Var#94
        right: LITERAL(0)
        result: Var#95
    Stmt_JumpIf
        cond: Var#95
        if: Block#12
        else: Block#13

Block#12
    Parent: Block#11
    Var#96<$matches> = Phi(Var#89<$matches>)
    Expr_ArrayDimFetch
        var: Var#96<$matches>
        dim: LITERAL(1)
        result: Var#97
    Expr_FuncCall
        name: LITERAL('array_pop')
        args[0]: Var#97
        result: Var#98
    Expr_Assign
        var: Var#99<$parentop>
        expr: Var#98
        result: Var#100
    Expr_ArrayDimFetch
        var: Var#99<$parentop>
        dim: LITERAL(0)
        result: Var#101
    Expr_Assign
        var: Var#102<$operator>
        expr: Var#101
        result: Var#103
    Expr_ArrayDimFetch
        var: Var#99<$parentop>
        dim: LITERAL(1)
        result: Var#104
    Expr_Assign
        var: Var#105<$offset>
        expr: Var#104
        result: Var#106
    Expr_ArrayDimFetch
        var: Var#96<$matches>
        dim: LITERAL(2)
        result: Var#107
    Expr_FuncCall
        name: LITERAL('array_pop')
        args[0]: Var#107
        result: Var#108
    Expr_Assign
        var: Var#109<$lasttag>
        expr: Var#108
        result: Var#110
    Expr_ArrayDimFetch
        var: Var#109<$lasttag>
        dim: LITERAL(0)
        result: Var#111
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#111
        result: Var#112
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#112
        result: Var#113
    Expr_Assign
        var: Var#114<$lasttag>
        expr: Var#113
        result: Var#115
    Expr_BinaryOp_Equal
        left: Var#114<$lasttag>
        right: LITERAL('*')
        result: Var#116
    Stmt_JumpIf
        cond: Var#116
        if: Block#14
        else: Block#15

Block#13
    Parent: Block#11
    Stmt_Jump
        target: Block#16

Block#14
    Parent: Block#12
    Parent: Block#15
    Var#117 = Phi(LITERAL(true), Var#118)
    Var#119<$matches> = Phi(Var#96<$matches>)
    Var#120<$class> = Phi(Var#80<$class>)
    Var#121<$id> = Phi(Var#81<$id>)
    Var#122<$dom> = Phi(Var#82<$dom>)
    Var#123<$key> = Phi(Var#83<$key>)
    Var#124<$valid> = Phi(Var#84<$valid>)
    Var#125<$offset> = Phi(Var#105<$offset>)
    Var#126<$selector> = Phi(Var#86<$selector>)
    Var#127<$operator> = Phi(Var#102<$operator>)
    Stmt_JumpIf
        cond: Var#117
        if: Block#17
        else: Block#18

Block#15
    Parent: Block#12
    Var#128<$lasttag> = Phi(Var#114<$lasttag>)
    Var#129<$tag> = Phi(Var#79<$tag>)
    Expr_BinaryOp_Equal
        left: Var#128<$lasttag>
        right: Var#129<$tag>
        result: Var#130
    Expr_Cast_Bool
        expr: Var#130
        result: Var#118
    Stmt_Jump
        target: Block#14

Block#16
    Parent: Block#21
    Parent: Block#13
    Var#131<$valid> = Phi(Var#132<$valid>, Var#84<$valid>)
    Terminal_Return
        expr: Var#131<$valid>

Block#17
    Parent: Block#14
    Var#133<$matches> = Phi(Var#119<$matches>)
    Expr_ArrayDimFetch
        var: Var#133<$matches>
        dim: LITERAL(3)
        result: Var#134
    Expr_FuncCall
        name: LITERAL('array_pop')
        args[0]: Var#134
        result: Var#135
    Expr_Assign
        var: Var#136<$attrib>
        expr: Var#135
        result: Var#137
    Expr_ArrayDimFetch
        var: Var#136<$attrib>
        dim: LITERAL(0)
        result: Var#138
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#138
        result: Var#139
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#139
        result: Var#140
    Expr_Assign
        var: Var#141<$attrib>
        expr: Var#140
        result: Var#142
    Expr_Empty
        expr: Var#141<$attrib>
        result: Var#143
    Expr_BooleanNot
        expr: Var#143
        result: Var#144
    Stmt_JumpIf
        cond: Var#144
        if: Block#19
        else: Block#20

Block#18
    Parent: Block#14
    Stmt_Jump
        target: Block#21

Block#19
    Parent: Block#17
    Var#145<$attrib> = Phi(Var#141<$attrib>)
    Expr_ArrayDimFetch
        var: Var#145<$attrib>
        dim: LITERAL(0)
        result: Var#146
    Stmt_Switch
        cond: Var#146
        cases[0]: LITERAL('.')
        cases[1]: LITERAL('#')
        cases[2]: LITERAL('[')
        cases[3]: LITERAL(':')
        targets[0]: Block#22
        targets[1]: Block#23
        targets[2]: Block#24
        targets[3]: Block#25
        default: Block#26

Block#20
    Parent: Block#17
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#147
    Expr_Assign
        var: Var#148<$valid>
        expr: Var#147
        result: Var#149
    Stmt_Jump
        target: Block#27

Block#21
    Parent: Block#60
    Parent: Block#18
    Var#132<$valid> = Phi(Var#150<$valid>, Var#124<$valid>)
    Stmt_Jump
        target: Block#16

Block#22
    Parent: Block#19
    Var#151<$attrib> = Phi(Var#145<$attrib>)
    Var#152<$class> = Phi(Var#120<$class>)
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#151<$attrib>
        args[1]: LITERAL(1)
        result: Var#153
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#153
        args[1]: Var#152<$class>
        result: Var#154
    Stmt_JumpIf
        cond: Var#154
        if: Block#28
        else: Block#29

Block#23
    Parent: Block#19
    Var#155<$attrib> = Phi(Var#145<$attrib>)
    Var#156<$id> = Phi(Var#121<$id>)
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#155<$attrib>
        args[1]: LITERAL(1)
        result: Var#157
    Expr_BinaryOp_Equal
        left: Var#157
        right: Var#156<$id>
        result: Var#158
    Stmt_JumpIf
        cond: Var#158
        if: Block#30
        else: Block#31

Block#24
    Parent: Block#19
    Var#159<$attrib> = Phi(Var#145<$attrib>)
    Expr_Array
        result: Var#160
    Expr_Assign
        var: Var#161<$attrmatch>
        expr: Var#160
        result: Var#162
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/\\[([a-zA-Z0-9]*)[\\s]*([\\~\\^\\$\\*\\|\\=]*)[\\s]*["]?([^"\\]]*)["]?\\]/i')
        args[1]: Var#159<$attrib>
        args[2]: Var#161<$attrmatch>
        result: Var#163
    Expr_BinaryOp_Greater
        left: Var#163
        right: LITERAL(0)
        result: Var#164
    Stmt_JumpIf
        cond: Var#164
        if: Block#32
        else: Block#33

Block#25
    Parent: Block#19
    Var#165<$attrib> = Phi(Var#145<$attrib>)
    Expr_ArrayDimFetch
        var: Var#165<$attrib>
        dim: LITERAL(1)
        result: Var#166
    Expr_BinaryOp_Equal
        left: Var#166
        right: LITERAL(':')
        result: Var#167
    Stmt_JumpIf
        cond: Var#167
        if: Block#34
        else: Block#35

Block#26
    Var#168<$valid> = Phi()
    Var#169<$offset> = Phi()
    Var#170<$selector> = Phi()
    Var#171<$operator> = Phi()
    Var#172<$dom> = Phi()
    Var#173<$key> = Phi()
    Stmt_Jump
        target: Block#36

Block#27
    Parent: Block#36
    Parent: Block#20
    Var#174<$valid> = Phi(Var#175<$valid>, Var#148<$valid>)
    Var#176<$offset> = Phi(Var#177<$offset>, Var#125<$offset>)
    Var#178<$selector> = Phi(Var#179<$selector>, Var#126<$selector>)
    Var#180<$operator> = Phi(Var#181<$operator>, Var#127<$operator>)
    Var#182<$dom> = Phi(Var#183<$dom>, Var#122<$dom>)
    Var#184<$key> = Phi(Var#185<$key>, Var#123<$key>)
    Stmt_JumpIf
        cond: Var#174<$valid>
        if: Block#37
        else: Block#38

Block#28
    Parent: Block#22
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#186
    Expr_Assign
        var: Var#187<$valid>
        expr: Var#186
        result: Var#188
    Stmt_Jump
        target: Block#39

Block#29
    Parent: Block#22
    Stmt_Jump
        target: Block#39

Block#30
    Parent: Block#23
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#189
    Expr_Assign
        var: Var#190<$valid>
        expr: Var#189
        result: Var#191
    Stmt_Jump
        target: Block#40

Block#31
    Parent: Block#23
    Stmt_Jump
        target: Block#40

Block#32
    Parent: Block#24
    Var#192<$attrmatch> = Phi(Var#161<$attrmatch>)
    Var#193<$dom> = Phi(Var#122<$dom>)
    Var#194<$key> = Phi(Var#123<$key>)
    Expr_ArrayDimFetch
        var: Var#192<$attrmatch>
        dim: LITERAL(1)
        result: Var#195
    Expr_FuncCall
        name: LITERAL('strtolower')
        args[0]: Var#195
        result: Var#196
    Expr_Assign
        var: Var#197<$att>
        expr: Var#196
        result: Var#198
    Expr_ArrayDimFetch
        var: Var#192<$attrmatch>
        dim: LITERAL(3)
        result: Var#199
    Expr_Assign
        var: Var#200<$val>
        expr: Var#199
        result: Var#201
    Expr_ArrayDimFetch
        var: Var#193<$dom>
        dim: Var#194<$key>
        result: Var#202
    Expr_ArrayDimFetch
        var: Var#202
        dim: LITERAL('attribute')
        result: Var#203
    Expr_ArrayDimFetch
        var: Var#203
        dim: Var#197<$att>
        result: Var#204
    Expr_Isset
        vars[0]: Var#204
        result: Var#205
    Stmt_JumpIf
        cond: Var#205
        if: Block#41
        else: Block#42

Block#33
    Parent: Block#24
    Stmt_Jump
        target: Block#43

Block#34
    Parent: Block#25
    Stmt_Jump
        target: Block#44

Block#35
    Parent: Block#25
    Stmt_Jump
        target: Block#44

Block#36
    Parent: Block#26
    Parent: Block#39
    Parent: Block#40
    Parent: Block#43
    Parent: Block#44
    Var#175<$valid> = Phi(Var#168<$valid>, Var#206<$valid>, Var#207<$valid>, Var#208<$valid>, Var#209<$valid>)
    Var#177<$offset> = Phi(Var#169<$offset>, Var#210<$offset>, Var#211<$offset>, Var#212<$offset>, Var#213<$offset>)
    Var#179<$selector> = Phi(Var#170<$selector>, Var#214<$selector>, Var#215<$selector>, Var#216<$selector>, Var#217<$selector>)
    Var#181<$operator> = Phi(Var#171<$operator>, Var#218<$operator>, Var#219<$operator>, Var#220<$operator>, Var#221<$operator>)
    Var#183<$dom> = Phi(Var#172<$dom>, Var#222<$dom>, Var#223<$dom>, Var#224<$dom>, Var#225<$dom>)
    Var#185<$key> = Phi(Var#173<$key>, Var#226<$key>, Var#227<$key>, Var#228<$key>, Var#229<$key>)
    Stmt_Jump
        target: Block#27

Block#37
    Parent: Block#27
    Var#230<$offset> = Phi(Var#176<$offset>)
    Expr_BinaryOp_Greater
        left: Var#230<$offset>
        right: LITERAL(0)
        result: Var#231
    Expr_Cast_Bool
        expr: Var#231
        result: Var#232
    Stmt_Jump
        target: Block#38

Block#38
    Parent: Block#27
    Parent: Block#37
    Var#233 = Phi(LITERAL(false), Var#232)
    Var#234<$selector> = Phi(Var#178<$selector>)
    Var#235<$offset> = Phi(Var#176<$offset>, Var#230<$offset>)
    Var#236<$operator> = Phi(Var#180<$operator>)
    Var#237<$dom> = Phi(Var#182<$dom>)
    Var#238<$key> = Phi(Var#184<$key>)
    Var#239<$valid> = Phi(Var#174<$valid>)
    Stmt_JumpIf
        cond: Var#233
        if: Block#45
        else: Block#46

Block#39
    Parent: Block#28
    Parent: Block#29
    Var#206<$valid> = Phi(Var#187<$valid>, Var#124<$valid>)
    Var#210<$offset> = Phi(Var#125<$offset>)
    Var#214<$selector> = Phi(Var#126<$selector>)
    Var#218<$operator> = Phi(Var#127<$operator>)
    Var#222<$dom> = Phi(Var#122<$dom>)
    Var#226<$key> = Phi(Var#123<$key>)
    Stmt_Jump
        target: Block#36

Block#40
    Parent: Block#30
    Parent: Block#31
    Var#207<$valid> = Phi(Var#190<$valid>, Var#124<$valid>)
    Var#211<$offset> = Phi(Var#125<$offset>)
    Var#215<$selector> = Phi(Var#126<$selector>)
    Var#219<$operator> = Phi(Var#127<$operator>)
    Var#223<$dom> = Phi(Var#122<$dom>)
    Var#227<$key> = Phi(Var#123<$key>)
    Stmt_Jump
        target: Block#36

Block#41
    Parent: Block#32
    Var#240<$attrmatch> = Phi(Var#192<$attrmatch>)
    Expr_ArrayDimFetch
        var: Var#240<$attrmatch>
        dim: LITERAL(2)
        result: Var#241
    Stmt_Switch
        cond: Var#241
        cases[0]: LITERAL('=')
        cases[1]: LITERAL('~=')
        cases[2]: LITERAL('^=')
        cases[3]: LITERAL('$=')
        cases[4]: LITERAL('*=')
        cases[5]: LITERAL('|=')
        targets[0]: Block#47
        targets[1]: Block#48
        targets[2]: Block#49
        targets[3]: Block#50
        targets[4]: Block#51
        targets[5]: Block#52
        default: Block#53

Block#42
    Parent: Block#32
    Stmt_Jump
        target: Block#54

Block#43
    Parent: Block#54
    Parent: Block#33
    Var#208<$valid> = Phi(Var#242<$valid>, Var#124<$valid>)
    Var#212<$offset> = Phi(Var#243<$offset>, Var#125<$offset>)
    Var#216<$selector> = Phi(Var#244<$selector>, Var#126<$selector>)
    Var#220<$operator> = Phi(Var#245<$operator>, Var#127<$operator>)
    Var#224<$dom> = Phi(Var#246<$dom>, Var#122<$dom>)
    Var#228<$key> = Phi(Var#247<$key>, Var#123<$key>)
    Stmt_Jump
        target: Block#36

Block#44
    Parent: Block#34
    Parent: Block#35
    Var#209<$valid> = Phi(Var#124<$valid>)
    Var#213<$offset> = Phi(Var#125<$offset>)
    Var#217<$selector> = Phi(Var#126<$selector>)
    Var#221<$operator> = Phi(Var#127<$operator>)
    Var#225<$dom> = Phi(Var#122<$dom>)
    Var#229<$key> = Phi(Var#123<$key>)
    Stmt_Jump
        target: Block#36

Block#45
    Parent: Block#38
    Var#248<$selector> = Phi(Var#234<$selector>)
    Var#249<$offset> = Phi(Var#235<$offset>)
    Var#250<$operator> = Phi(Var#236<$operator>)
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#251
    Expr_Assign
        var: Var#252<$valid>
        expr: Var#251
        result: Var#253
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#248<$selector>
        args[1]: LITERAL(0)
        args[2]: Var#249<$offset>
        result: Var#254
    Expr_Assign
        var: Var#255<$selector>
        expr: Var#254
        result: Var#256
    Stmt_Switch
        cond: Var#250<$operator>
        cases[0]: LITERAL(' ')
        cases[1]: LITERAL('>')
        cases[2]: LITERAL('+')
        cases[3]: LITERAL('~')
        targets[0]: Block#55
        targets[1]: Block#56
        targets[2]: Block#57
        targets[3]: Block#58
        default: Block#59

Block#46
    Parent: Block#38
    Stmt_Jump
        target: Block#60

Block#47
    Parent: Block#41
    Var#257<$dom> = Phi(Var#193<$dom>)
    Var#258<$key> = Phi(Var#194<$key>)
    Var#259<$att> = Phi(Var#197<$att>)
    Var#260<$val> = Phi(Var#200<$val>)
    Expr_ArrayDimFetch
        var: Var#257<$dom>
        dim: Var#258<$key>
        result: Var#261
    Expr_ArrayDimFetch
        var: Var#261
        dim: LITERAL('attribute')
        result: Var#262
    Expr_ArrayDimFetch
        var: Var#262
        dim: Var#259<$att>
        result: Var#263
    Expr_BinaryOp_Equal
        left: Var#263
        right: Var#260<$val>
        result: Var#264
    Stmt_JumpIf
        cond: Var#264
        if: Block#61
        else: Block#62

Block#48
    Parent: Block#41
    Var#265<$val> = Phi(Var#200<$val>)
    Var#266<$dom> = Phi(Var#193<$dom>)
    Var#267<$key> = Phi(Var#194<$key>)
    Var#268<$att> = Phi(Var#197<$att>)
    Expr_ArrayDimFetch
        var: Var#266<$dom>
        dim: Var#267<$key>
        result: Var#269
    Expr_ArrayDimFetch
        var: Var#269
        dim: LITERAL('attribute')
        result: Var#270
    Expr_ArrayDimFetch
        var: Var#270
        dim: Var#268<$att>
        result: Var#271
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL(' ')
        args[1]: Var#271
        result: Var#272
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#265<$val>
        args[1]: Var#272
        result: Var#273
    Stmt_JumpIf
        cond: Var#273
        if: Block#63
        else: Block#64

Block#49
    Parent: Block#41
    Var#274<$val> = Phi(Var#200<$val>)
    Var#275<$dom> = Phi(Var#193<$dom>)
    Var#276<$key> = Phi(Var#194<$key>)
    Var#277<$att> = Phi(Var#197<$att>)
    Expr_ArrayDimFetch
        var: Var#275<$dom>
        dim: Var#276<$key>
        result: Var#278
    Expr_ArrayDimFetch
        var: Var#278
        dim: LITERAL('attribute')
        result: Var#279
    Expr_ArrayDimFetch
        var: Var#279
        dim: Var#277<$att>
        result: Var#280
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#274<$val>
        result: Var#281
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#280
        args[1]: LITERAL(0)
        args[2]: Var#281
        result: Var#282
    Expr_BinaryOp_Equal
        left: Var#274<$val>
        right: Var#282
        result: Var#283
    Stmt_JumpIf
        cond: Var#283
        if: Block#65
        else: Block#66

Block#50
    Parent: Block#41
    Var#284<$val> = Phi(Var#200<$val>)
    Var#285<$dom> = Phi(Var#193<$dom>)
    Var#286<$key> = Phi(Var#194<$key>)
    Var#287<$att> = Phi(Var#197<$att>)
    Expr_ArrayDimFetch
        var: Var#285<$dom>
        dim: Var#286<$key>
        result: Var#288
    Expr_ArrayDimFetch
        var: Var#288
        dim: LITERAL('attribute')
        result: Var#289
    Expr_ArrayDimFetch
        var: Var#289
        dim: Var#287<$att>
        result: Var#290
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#284<$val>
        result: Var#291
    Expr_UnaryMinus
        expr: Var#291
        result: Var#292
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#290
        args[1]: Var#292
        result: Var#293
    Expr_BinaryOp_Equal
        left: Var#284<$val>
        right: Var#293
        result: Var#294
    Stmt_JumpIf
        cond: Var#294
        if: Block#67
        else: Block#68

Block#51
    Parent: Block#41
    Var#295<$dom> = Phi(Var#193<$dom>)
    Var#296<$key> = Phi(Var#194<$key>)
    Var#297<$att> = Phi(Var#197<$att>)
    Var#298<$val> = Phi(Var#200<$val>)
    Expr_ArrayDimFetch
        var: Var#295<$dom>
        dim: Var#296<$key>
        result: Var#299
    Expr_ArrayDimFetch
        var: Var#299
        dim: LITERAL('attribute')
        result: Var#300
    Expr_ArrayDimFetch
        var: Var#300
        dim: Var#297<$att>
        result: Var#301
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#301
        args[1]: Var#298<$val>
        result: Var#302
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#303
    Expr_BinaryOp_NotIdentical
        left: Var#302
        right: Var#303
        result: Var#304
    Stmt_JumpIf
        cond: Var#304
        if: Block#69
        else: Block#70

Block#52
    Parent: Block#41
    Var#305<$dom> = Phi(Var#193<$dom>)
    Var#306<$key> = Phi(Var#194<$key>)
    Var#307<$att> = Phi(Var#197<$att>)
    Var#308<$val> = Phi(Var#200<$val>)
    Expr_ArrayDimFetch
        var: Var#305<$dom>
        dim: Var#306<$key>
        result: Var#309
    Expr_ArrayDimFetch
        var: Var#309
        dim: LITERAL('attribute')
        result: Var#310
    Expr_ArrayDimFetch
        var: Var#310
        dim: Var#307<$att>
        result: Var#311
    Expr_BinaryOp_Equal
        left: Var#311
        right: Var#308<$val>
        result: Var#312
    Stmt_JumpIf
        cond: Var#312
        if: Block#71
        else: Block#72

Block#53
    Parent: Block#41
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#313
    Expr_Assign
        var: Var#314<$valid>
        expr: Var#313
        result: Var#315
    Stmt_Jump
        target: Block#73

Block#54
    Parent: Block#86
    Parent: Block#42
    Var#242<$valid> = Phi(Var#316<$valid>, Var#124<$valid>)
    Var#243<$offset> = Phi(Var#317<$offset>, Var#125<$offset>)
    Var#244<$selector> = Phi(Var#318<$selector>, Var#126<$selector>)
    Var#245<$operator> = Phi(Var#319<$operator>, Var#127<$operator>)
    Var#246<$dom> = Phi(Var#320<$dom>, Var#193<$dom>)
    Var#247<$key> = Phi(Var#321<$key>, Var#194<$key>)
    Stmt_Jump
        target: Block#43

Block#55
    Parent: Block#45
    Stmt_Jump
        target: Block#74

Block#56
    Parent: Block#45
    Var#322<$dom> = Phi(Var#237<$dom>)
    Var#323<$key> = Phi(Var#238<$key>)
    Var#324<$selector> = Phi(Var#255<$selector>)
    Expr_ArrayDimFetch
        var: Var#322<$dom>
        dim: Var#323<$key>
        result: Var#325
    Expr_ArrayDimFetch
        var: Var#325
        dim: LITERAL('parent')
        result: Var#326
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('isValidCSSSelectorForTag')
        args[0]: Var#322<$dom>
        args[1]: Var#326
        args[2]: Var#324<$selector>
        result: Var#327
    Expr_Assign
        var: Var#328<$valid>
        expr: Var#327
        result: Var#329
    Stmt_Jump
        target: Block#75

Block#57
    Parent: Block#45
    Var#330<$key> = Phi(Var#238<$key>)
    Expr_BinaryOp_Minus
        left: Var#330<$key>
        right: LITERAL(1)
        result: Var#331
    Expr_Assign
        var: Var#332<$i>
        expr: Var#331
        result: Var#333
    Stmt_Jump
        target: Block#76

Block#58
    Parent: Block#45
    Var#334<$key> = Phi(Var#238<$key>)
    Expr_BinaryOp_Minus
        left: Var#334<$key>
        right: LITERAL(1)
        result: Var#335
    Expr_Assign
        var: Var#336<$i>
        expr: Var#335
        result: Var#337
    Stmt_Jump
        target: Block#77

Block#59
    Var#338<$valid> = Phi()
    Stmt_Jump
        target: Block#75

Block#60
    Parent: Block#75
    Parent: Block#46
    Var#150<$valid> = Phi(Var#339<$valid>, Var#239<$valid>)
    Stmt_Jump
        target: Block#21

Block#61
    Parent: Block#47
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#340
    Expr_Assign
        var: Var#341<$valid>
        expr: Var#340
        result: Var#342
    Stmt_Jump
        target: Block#78

Block#62
    Parent: Block#47
    Stmt_Jump
        target: Block#78

Block#63
    Parent: Block#48
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#343
    Expr_Assign
        var: Var#344<$valid>
        expr: Var#343
        result: Var#345
    Stmt_Jump
        target: Block#79

Block#64
    Parent: Block#48
    Stmt_Jump
        target: Block#79

Block#65
    Parent: Block#49
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#346
    Expr_Assign
        var: Var#347<$valid>
        expr: Var#346
        result: Var#348
    Stmt_Jump
        target: Block#80

Block#66
    Parent: Block#49
    Stmt_Jump
        target: Block#80

Block#67
    Parent: Block#50
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#349
    Expr_Assign
        var: Var#350<$valid>
        expr: Var#349
        result: Var#351
    Stmt_Jump
        target: Block#81

Block#68
    Parent: Block#50
    Stmt_Jump
        target: Block#81

Block#69
    Parent: Block#51
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#352
    Expr_Assign
        var: Var#353<$valid>
        expr: Var#352
        result: Var#354
    Stmt_Jump
        target: Block#82

Block#70
    Parent: Block#51
    Stmt_Jump
        target: Block#82

Block#71
    Parent: Block#52
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#355
    Expr_Assign
        var: Var#356<$valid>
        expr: Var#355
        result: Var#357
    Stmt_Jump
        target: Block#83

Block#72
    Parent: Block#52
    Var#358<$val> = Phi(Var#308<$val>)
    Var#359<$dom> = Phi(Var#305<$dom>)
    Var#360<$key> = Phi(Var#306<$key>)
    Var#361<$att> = Phi(Var#307<$att>)
    Expr_BinaryOp_Concat
        left: LITERAL('/')
        right: Var#358<$val>
        result: Var#362
    Expr_BinaryOp_Concat
        left: Var#362
        right: LITERAL('[\\-]{1}/i')
        result: Var#363
    Expr_ArrayDimFetch
        var: Var#359<$dom>
        dim: Var#360<$key>
        result: Var#364
    Expr_ArrayDimFetch
        var: Var#364
        dim: LITERAL('attribute')
        result: Var#365
    Expr_ArrayDimFetch
        var: Var#365
        dim: Var#361<$att>
        result: Var#366
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: Var#363
        args[1]: Var#366
        result: Var#367
    Expr_BinaryOp_Greater
        left: Var#367
        right: LITERAL(0)
        result: Var#368
    Stmt_JumpIf
        cond: Var#368
        if: Block#84
        else: Block#85

Block#73
    Parent: Block#53
    Stmt_Jump
        target: Block#86

Block#74
    Parent: Block#55
    Parent: Block#107
    Var#369<$dom> = Phi(Var#237<$dom>, Var#370<$dom>)
    Var#371<$key> = Phi(Var#238<$key>, Var#372<$key>)
    Var#373<$selector> = Phi(Var#255<$selector>, Var#374<$selector>)
    Var#375<$valid> = Phi(Var#252<$valid>, Var#376<$valid>)
    Expr_ArrayDimFetch
        var: Var#369<$dom>
        dim: Var#371<$key>
        result: Var#377
    Expr_ArrayDimFetch
        var: Var#377
        dim: LITERAL('parent')
        result: Var#378
    Expr_BinaryOp_Greater
        left: Var#378
        right: LITERAL(0)
        result: Var#379
    Stmt_JumpIf
        cond: Var#379
        if: Block#87
        else: Block#88

Block#75
    Parent: Block#59
    Parent: Block#95
    Parent: Block#56
    Parent: Block#98
    Parent: Block#101
    Var#339<$valid> = Phi(Var#338<$valid>, Var#380<$valid>, Var#328<$valid>, Var#381<$valid>, Var#382<$valid>)
    Stmt_Jump
        target: Block#60

Block#76
    Parent: Block#57
    Parent: Block#112
    Var#383<$i> = Phi(Var#332<$i>, Var#384<$i>)
    Var#385<$dom> = Phi(Var#237<$dom>, Var#386<$dom>)
    Var#387<$key> = Phi(Var#330<$key>, Var#388<$key>)
    Var#389<$selector> = Phi(Var#255<$selector>, Var#390<$selector>)
    Var#391<$valid> = Phi(Var#252<$valid>, Var#392<$valid>)
    Expr_ArrayDimFetch
        var: Var#385<$dom>
        dim: Var#387<$key>
        result: Var#393
    Expr_ArrayDimFetch
        var: Var#393
        dim: LITERAL('parent')
        result: Var#394
    Expr_BinaryOp_Greater
        left: Var#383<$i>
        right: Var#394
        result: Var#395
    Stmt_JumpIf
        cond: Var#395
        if: Block#89
        else: Block#90

Block#77
    Parent: Block#58
    Parent: Block#114
    Var#396<$i> = Phi(Var#336<$i>, Var#397<$i>)
    Var#398<$dom> = Phi(Var#237<$dom>, Var#399<$dom>)
    Var#400<$key> = Phi(Var#334<$key>, Var#401<$key>)
    Var#402<$selector> = Phi(Var#255<$selector>, Var#403<$selector>)
    Var#404<$valid> = Phi(Var#252<$valid>, Var#405<$valid>)
    Expr_ArrayDimFetch
        var: Var#398<$dom>
        dim: Var#400<$key>
        result: Var#406
    Expr_ArrayDimFetch
        var: Var#406
        dim: LITERAL('parent')
        result: Var#407
    Expr_BinaryOp_Greater
        left: Var#396<$i>
        right: Var#407
        result: Var#408
    Stmt_JumpIf
        cond: Var#408
        if: Block#91
        else: Block#92

Block#78
    Parent: Block#61
    Parent: Block#62
    Var#409<$valid> = Phi(Var#341<$valid>, Var#124<$valid>)
    Var#410<$offset> = Phi(Var#125<$offset>)
    Var#411<$selector> = Phi(Var#126<$selector>)
    Var#412<$operator> = Phi(Var#127<$operator>)
    Var#413<$dom> = Phi(Var#257<$dom>)
    Var#414<$key> = Phi(Var#258<$key>)
    Stmt_Jump
        target: Block#86

Block#79
    Parent: Block#63
    Parent: Block#64
    Var#415<$valid> = Phi(Var#344<$valid>, Var#124<$valid>)
    Var#416<$offset> = Phi(Var#125<$offset>)
    Var#417<$selector> = Phi(Var#126<$selector>)
    Var#418<$operator> = Phi(Var#127<$operator>)
    Var#419<$dom> = Phi(Var#266<$dom>)
    Var#420<$key> = Phi(Var#267<$key>)
    Stmt_Jump
        target: Block#86

Block#80
    Parent: Block#65
    Parent: Block#66
    Var#421<$valid> = Phi(Var#347<$valid>, Var#124<$valid>)
    Var#422<$offset> = Phi(Var#125<$offset>)
    Var#423<$selector> = Phi(Var#126<$selector>)
    Var#424<$operator> = Phi(Var#127<$operator>)
    Var#425<$dom> = Phi(Var#275<$dom>)
    Var#426<$key> = Phi(Var#276<$key>)
    Stmt_Jump
        target: Block#86

Block#81
    Parent: Block#67
    Parent: Block#68
    Var#427<$valid> = Phi(Var#350<$valid>, Var#124<$valid>)
    Var#428<$offset> = Phi(Var#125<$offset>)
    Var#429<$selector> = Phi(Var#126<$selector>)
    Var#430<$operator> = Phi(Var#127<$operator>)
    Var#431<$dom> = Phi(Var#285<$dom>)
    Var#432<$key> = Phi(Var#286<$key>)
    Stmt_Jump
        target: Block#86

Block#82
    Parent: Block#69
    Parent: Block#70
    Var#433<$valid> = Phi(Var#353<$valid>, Var#124<$valid>)
    Var#434<$offset> = Phi(Var#125<$offset>)
    Var#435<$selector> = Phi(Var#126<$selector>)
    Var#436<$operator> = Phi(Var#127<$operator>)
    Var#437<$dom> = Phi(Var#295<$dom>)
    Var#438<$key> = Phi(Var#296<$key>)
    Stmt_Jump
        target: Block#86

Block#83
    Parent: Block#71
    Parent: Block#84
    Parent: Block#85
    Var#439<$valid> = Phi(Var#356<$valid>, Var#440<$valid>, Var#124<$valid>)
    Var#441<$offset> = Phi(Var#125<$offset>)
    Var#442<$selector> = Phi(Var#126<$selector>)
    Var#443<$operator> = Phi(Var#127<$operator>)
    Var#444<$dom> = Phi(Var#305<$dom>, Var#359<$dom>)
    Var#445<$key> = Phi(Var#306<$key>, Var#360<$key>)
    Stmt_Jump
        target: Block#86

Block#84
    Parent: Block#72
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#446
    Expr_Assign
        var: Var#440<$valid>
        expr: Var#446
        result: Var#447
    Stmt_Jump
        target: Block#83

Block#85
    Parent: Block#72
    Stmt_Jump
        target: Block#83

Block#86
    Parent: Block#73
    Parent: Block#78
    Parent: Block#79
    Parent: Block#80
    Parent: Block#81
    Parent: Block#82
    Parent: Block#83
    Var#316<$valid> = Phi(Var#314<$valid>, Var#409<$valid>, Var#415<$valid>, Var#421<$valid>, Var#427<$valid>, Var#433<$valid>, Var#439<$valid>)
    Var#317<$offset> = Phi(Var#125<$offset>, Var#410<$offset>, Var#416<$offset>, Var#422<$offset>, Var#428<$offset>, Var#434<$offset>, Var#441<$offset>)
    Var#318<$selector> = Phi(Var#126<$selector>, Var#411<$selector>, Var#417<$selector>, Var#423<$selector>, Var#429<$selector>, Var#435<$selector>, Var#442<$selector>)
    Var#319<$operator> = Phi(Var#127<$operator>, Var#412<$operator>, Var#418<$operator>, Var#424<$operator>, Var#430<$operator>, Var#436<$operator>, Var#443<$operator>)
    Var#320<$dom> = Phi(Var#193<$dom>, Var#413<$dom>, Var#419<$dom>, Var#425<$dom>, Var#431<$dom>, Var#437<$dom>, Var#444<$dom>)
    Var#321<$key> = Phi(Var#194<$key>, Var#414<$key>, Var#420<$key>, Var#426<$key>, Var#432<$key>, Var#438<$key>, Var#445<$key>)
    Stmt_Jump
        target: Block#54

Block#87
    Parent: Block#74
    Var#448<$dom> = Phi(Var#369<$dom>)
    Var#449<$key> = Phi(Var#371<$key>)
    Var#450<$selector> = Phi(Var#373<$selector>)
    Expr_ArrayDimFetch
        var: Var#448<$dom>
        dim: Var#449<$key>
        result: Var#451
    Expr_ArrayDimFetch
        var: Var#451
        dim: LITERAL('parent')
        result: Var#452
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('isValidCSSSelectorForTag')
        args[0]: Var#448<$dom>
        args[1]: Var#452
        args[2]: Var#450<$selector>
        result: Var#453
    Stmt_JumpIf
        cond: Var#453
        if: Block#93
        else: Block#94

Block#88
    Parent: Block#74
    Stmt_Jump
        target: Block#95

Block#89
    Parent: Block#76
    Var#454<$dom> = Phi(Var#385<$dom>)
    Var#455<$i> = Phi(Var#383<$i>)
    Expr_ArrayDimFetch
        var: Var#454<$dom>
        dim: Var#455<$i>
        result: Var#456
    Expr_ArrayDimFetch
        var: Var#456
        dim: LITERAL('tag')
        result: Var#457
    Stmt_JumpIf
        cond: Var#457
        if: Block#96
        else: Block#97

Block#90
    Parent: Block#76
    Stmt_Jump
        target: Block#98

Block#91
    Parent: Block#77
    Var#458<$dom> = Phi(Var#398<$dom>)
    Var#459<$i> = Phi(Var#396<$i>)
    Expr_ArrayDimFetch
        var: Var#458<$dom>
        dim: Var#459<$i>
        result: Var#460
    Expr_ArrayDimFetch
        var: Var#460
        dim: LITERAL('tag')
        result: Var#461
    Stmt_JumpIf
        cond: Var#461
        if: Block#99
        else: Block#100

Block#92
    Parent: Block#77
    Stmt_Jump
        target: Block#101

Block#93
    Parent: Block#87
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#462
    Expr_Assign
        var: Var#463<$valid>
        expr: Var#462
        result: Var#464
    Stmt_Jump
        target: Block#95

Block#94
    Parent: Block#87
    Var#465<$dom> = Phi(Var#448<$dom>)
    Var#466<$key> = Phi(Var#449<$key>)
    Expr_ArrayDimFetch
        var: Var#465<$dom>
        dim: Var#466<$key>
        result: Var#467
    Expr_ArrayDimFetch
        var: Var#467
        dim: LITERAL('parent')
        result: Var#468
    Expr_Assign
        var: Var#469<$key>
        expr: Var#468
        result: Var#470
    Stmt_Jump
        target: Block#102

Block#95
    Parent: Block#88
    Parent: Block#93
    Var#380<$valid> = Phi(Var#375<$valid>, Var#463<$valid>)
    Stmt_Jump
        target: Block#75

Block#96
    Parent: Block#89
    Var#471<$dom> = Phi(Var#454<$dom>)
    Var#472<$i> = Phi(Var#455<$i>)
    Expr_ArrayDimFetch
        var: Var#471<$dom>
        dim: Var#472<$i>
        result: Var#473
    Expr_ArrayDimFetch
        var: Var#473
        dim: LITERAL('opening')
        result: Var#474
    Expr_Cast_Bool
        expr: Var#474
        result: Var#475
    Stmt_Jump
        target: Block#97

Block#97
    Parent: Block#89
    Parent: Block#96
    Var#476 = Phi(LITERAL(false), Var#475)
    Var#477<$dom> = Phi(Var#454<$dom>, Var#471<$dom>)
    Var#478<$key> = Phi(Var#387<$key>)
    Var#479<$i> = Phi(Var#455<$i>, Var#472<$i>)
    Var#480<$selector> = Phi(Var#389<$selector>)
    Var#481<$valid> = Phi(Var#391<$valid>)
    Stmt_JumpIf
        cond: Var#476
        if: Block#103
        else: Block#104

Block#98
    Parent: Block#90
    Parent: Block#103
    Var#381<$valid> = Phi(Var#391<$valid>, Var#482<$valid>)
    Stmt_Jump
        target: Block#75

Block#99
    Parent: Block#91
    Var#483<$dom> = Phi(Var#458<$dom>)
    Var#484<$i> = Phi(Var#459<$i>)
    Expr_ArrayDimFetch
        var: Var#483<$dom>
        dim: Var#484<$i>
        result: Var#485
    Expr_ArrayDimFetch
        var: Var#485
        dim: LITERAL('opening')
        result: Var#486
    Expr_Cast_Bool
        expr: Var#486
        result: Var#487
    Stmt_Jump
        target: Block#100

Block#100
    Parent: Block#91
    Parent: Block#99
    Var#488 = Phi(LITERAL(false), Var#487)
    Var#489<$dom> = Phi(Var#458<$dom>, Var#483<$dom>)
    Var#490<$key> = Phi(Var#400<$key>)
    Var#491<$i> = Phi(Var#459<$i>, Var#484<$i>)
    Var#492<$selector> = Phi(Var#402<$selector>)
    Var#493<$valid> = Phi(Var#404<$valid>)
    Stmt_JumpIf
        cond: Var#488
        if: Block#105
        else: Block#106

Block#101
    Parent: Block#92
    Parent: Block#109
    Var#382<$valid> = Phi(Var#404<$valid>, Var#493<$valid>)
    Stmt_Jump
        target: Block#75

Block#102
    Parent: Block#94
    Var#370<$dom> = Phi(Var#465<$dom>)
    Var#372<$key> = Phi(Var#469<$key>)
    Var#374<$selector> = Phi(Var#450<$selector>)
    Var#376<$valid> = Phi(Var#375<$valid>)
    Stmt_Jump
        target: Block#107

Block#103
    Parent: Block#97
    Var#494<$dom> = Phi(Var#477<$dom>)
    Var#495<$i> = Phi(Var#479<$i>)
    Var#496<$selector> = Phi(Var#480<$selector>)
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('isValidCSSSelectorForTag')
        args[0]: Var#494<$dom>
        args[1]: Var#495<$i>
        args[2]: Var#496<$selector>
        result: Var#497
    Expr_Assign
        var: Var#482<$valid>
        expr: Var#497
        result: Var#498
    Stmt_Jump
        target: Block#98

Block#104
    Parent: Block#97
    Stmt_Jump
        target: Block#108

Block#105
    Parent: Block#100
    Var#499<$dom> = Phi(Var#489<$dom>)
    Var#500<$i> = Phi(Var#491<$i>)
    Var#501<$selector> = Phi(Var#492<$selector>)
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('isValidCSSSelectorForTag')
        args[0]: Var#499<$dom>
        args[1]: Var#500<$i>
        args[2]: Var#501<$selector>
        result: Var#502
    Stmt_JumpIf
        cond: Var#502
        if: Block#109
        else: Block#110

Block#106
    Parent: Block#100
    Stmt_Jump
        target: Block#111

Block#107
    Parent: Block#102
    Stmt_Jump
        target: Block#74

Block#108
    Parent: Block#104
    Var#386<$dom> = Phi(Var#477<$dom>)
    Var#388<$key> = Phi(Var#478<$key>)
    Var#390<$selector> = Phi(Var#480<$selector>)
    Var#503<$i> = Phi(Var#479<$i>)
    Var#392<$valid> = Phi(Var#481<$valid>)
    Stmt_Jump
        target: Block#112

Block#109
    Parent: Block#105
    Stmt_Jump
        target: Block#101

Block#110
    Parent: Block#105
    Stmt_Jump
        target: Block#113

Block#111
    Parent: Block#113
    Parent: Block#106
    Var#399<$dom> = Phi(Var#504<$dom>, Var#489<$dom>)
    Var#401<$key> = Phi(Var#505<$key>, Var#490<$key>)
    Var#403<$selector> = Phi(Var#506<$selector>, Var#492<$selector>)
    Var#507<$i> = Phi(Var#508<$i>, Var#491<$i>)
    Var#405<$valid> = Phi(Var#509<$valid>, Var#493<$valid>)
    Stmt_Jump
        target: Block#114

Block#112
    Parent: Block#108
    Var#510<$i> = Phi(Var#503<$i>)
    Expr_BinaryOp_Minus
        left: Var#510<$i>
        right: LITERAL(1)
        result: Var#511
    Expr_Assign
        var: Var#384<$i>
        expr: Var#511
        result: Var#512
    Stmt_Jump
        target: Block#76

Block#113
    Parent: Block#110
    Var#504<$dom> = Phi(Var#499<$dom>)
    Var#505<$key> = Phi(Var#490<$key>)
    Var#506<$selector> = Phi(Var#501<$selector>)
    Var#508<$i> = Phi(Var#500<$i>)
    Var#509<$valid> = Phi(Var#493<$valid>)
    Stmt_Jump
        target: Block#111

Block#114
    Parent: Block#111
    Var#513<$i> = Phi(Var#507<$i>)
    Expr_BinaryOp_Minus
        left: Var#513<$i>
        right: LITERAL(1)
        result: Var#514
    Expr_Assign
        var: Var#397<$i>
        expr: Var#514
        result: Var#515
    Stmt_Jump
        target: Block#77

Function TCPDF_STATIC::getCSSdataArray(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('dom')
        result: Var#1<$dom>
    Expr_Param
        declaredType: mixed
        name: LITERAL('key')
        result: Var#2<$key>
    Expr_Param
        declaredType: mixed
        name: LITERAL('css')
        result: Var#3<$css>
    Expr_Array
        result: Var#4
    Expr_Assign
        var: Var#5<$cssarray>
        expr: Var#4
        result: Var#6
    Expr_Array
        result: Var#7
    Expr_Assign
        var: Var#8<$selectors>
        expr: Var#7
        result: Var#9
    Expr_ArrayDimFetch
        var: Var#1<$dom>
        dim: Var#2<$key>
        result: Var#10
    Expr_ArrayDimFetch
        var: Var#10
        dim: LITERAL('parent')
        result: Var#11
    Expr_ArrayDimFetch
        var: Var#1<$dom>
        dim: Var#11
        result: Var#12
    Expr_ArrayDimFetch
        var: Var#12
        dim: LITERAL('csssel')
        result: Var#13
    Expr_Isset
        vars[0]: Var#13
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#15<$dom> = Phi(Var#1<$dom>)
    Var#16<$key> = Phi(Var#2<$key>)
    Expr_ArrayDimFetch
        var: Var#15<$dom>
        dim: Var#16<$key>
        result: Var#17
    Expr_ArrayDimFetch
        var: Var#17
        dim: LITERAL('parent')
        result: Var#18
    Expr_ArrayDimFetch
        var: Var#15<$dom>
        dim: Var#18
        result: Var#19
    Expr_ArrayDimFetch
        var: Var#19
        dim: LITERAL('csssel')
        result: Var#20
    Expr_Assign
        var: Var#21<$selectors>
        expr: Var#20
        result: Var#22
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#23<$css> = Phi(Var#3<$css>)
    Var#24<$dom> = Phi(Var#15<$dom>, Var#1<$dom>)
    Var#25<$key> = Phi(Var#16<$key>, Var#2<$key>)
    Var#26<$selectors> = Phi(Var#21<$selectors>, Var#8<$selectors>)
    Var#27<$cssarray> = Phi(Var#5<$cssarray>)
    Iterator_Reset
        var: Var#23<$css>
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#4
    Parent: Block#17
    Var#28<$dom> = Phi(Var#24<$dom>, Var#29<$dom>)
    Var#30<$key> = Phi(Var#25<$key>, Var#31<$key>)
    Var#32<$selectors> = Phi(Var#26<$selectors>, Var#33<$selectors>)
    Var#34<$cssarray> = Phi(Var#27<$cssarray>, Var#35<$cssarray>)
    Iterator_Valid
        var: Var#23<$css>
        result: Var#36
    Stmt_JumpIf
        cond: Var#36
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#37<$dom> = Phi(Var#28<$dom>)
    Var#38<$key> = Phi(Var#30<$key>)
    Iterator_Key
        var: Var#23<$css>
        result: Var#39
    Expr_Assign
        var: Var#40<$selector>
        expr: Var#39
        result: Var#41
    Iterator_Value
        var: Var#23<$css>
        result: Var#42
    Expr_Assign
        var: Var#43<$style>
        expr: Var#42
        result: Var#44
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#40<$selector>
        args[1]: LITERAL(' ')
        result: Var#45
    Expr_Assign
        var: Var#46<$pos>
        expr: Var#45
        result: Var#47
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#40<$selector>
        args[1]: LITERAL(0)
        args[2]: Var#46<$pos>
        result: Var#48
    Expr_Assign
        var: Var#49<$specificity>
        expr: Var#48
        result: Var#50
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#40<$selector>
        args[1]: Var#46<$pos>
        result: Var#51
    Expr_Assign
        var: Var#52<$selector>
        expr: Var#51
        result: Var#53
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('isValidCSSSelectorForTag')
        args[0]: Var#37<$dom>
        args[1]: Var#38<$key>
        args[2]: Var#52<$selector>
        result: Var#54
    Stmt_JumpIf
        cond: Var#54
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#5
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#6
    Var#55<$selector> = Phi(Var#52<$selector>)
    Var#56<$selectors> = Phi(Var#32<$selectors>)
    Expr_FuncCall
        name: LITERAL('in_array')
        args[0]: Var#55<$selector>
        args[1]: Var#56<$selectors>
        result: Var#57
    Expr_BooleanNot
        expr: Var#57
        result: Var#58
    Stmt_JumpIf
        cond: Var#58
        if: Block#11
        else: Block#12

Block#9
    Parent: Block#6
    Stmt_Jump
        target: Block#13

Block#10
    Parent: Block#7
    Var#59<$dom> = Phi(Var#28<$dom>)
    Var#60<$key> = Phi(Var#30<$key>)
    Expr_ArrayDimFetch
        var: Var#59<$dom>
        dim: Var#60<$key>
        result: Var#61
    Expr_ArrayDimFetch
        var: Var#61
        dim: LITERAL('attribute')
        result: Var#62
    Expr_ArrayDimFetch
        var: Var#62
        dim: LITERAL('style')
        result: Var#63
    Expr_Isset
        vars[0]: Var#63
        result: Var#64
    Stmt_JumpIf
        cond: Var#64
        if: Block#14
        else: Block#15

Block#11
    Parent: Block#8
    Var#65<$selector> = Phi(Var#55<$selector>)
    Var#66<$specificity> = Phi(Var#49<$specificity>)
    Var#67<$style> = Phi(Var#43<$style>)
    Var#68<$cssarray> = Phi(Var#34<$cssarray>)
    Var#69<$selectors> = Phi(Var#56<$selectors>)
    Expr_Array
        keys[0]: LITERAL('k')
        keys[1]: LITERAL('s')
        keys[2]: LITERAL('c')
        values[0]: Var#65<$selector>
        values[1]: Var#66<$specificity>
        values[2]: Var#67<$style>
        result: Var#70
    Expr_ArrayDimFetch
        var: Var#68<$cssarray>
        dim: NULL
        result: Var#71
    Expr_Assign
        var: Var#71
        expr: Var#70
        result: Var#72
    Expr_ArrayDimFetch
        var: Var#69<$selectors>
        dim: NULL
        result: Var#73
    Expr_Assign
        var: Var#73
        expr: Var#65<$selector>
        result: Var#74
    Stmt_Jump
        target: Block#16

Block#12
    Parent: Block#8
    Stmt_Jump
        target: Block#16

Block#13
    Parent: Block#16
    Parent: Block#9
    Var#29<$dom> = Phi(Var#75<$dom>, Var#37<$dom>)
    Var#31<$key> = Phi(Var#76<$key>, Var#38<$key>)
    Var#33<$selectors> = Phi(Var#77<$selectors>, Var#32<$selectors>)
    Var#35<$cssarray> = Phi(Var#78<$cssarray>, Var#34<$cssarray>)
    Stmt_Jump
        target: Block#17

Block#14
    Parent: Block#10
    Var#79<$dom> = Phi(Var#59<$dom>)
    Var#80<$key> = Phi(Var#60<$key>)
    Var#81<$cssarray> = Phi(Var#34<$cssarray>)
    Expr_ArrayDimFetch
        var: Var#79<$dom>
        dim: Var#80<$key>
        result: Var#82
    Expr_ArrayDimFetch
        var: Var#82
        dim: LITERAL('attribute')
        result: Var#83
    Expr_ArrayDimFetch
        var: Var#83
        dim: LITERAL('style')
        result: Var#84
    Expr_Array
        keys[0]: LITERAL('k')
        keys[1]: LITERAL('s')
        keys[2]: LITERAL('c')
        values[0]: LITERAL('')
        values[1]: LITERAL('1000')
        values[2]: Var#84
        result: Var#85
    Expr_ArrayDimFetch
        var: Var#81<$cssarray>
        dim: NULL
        result: Var#86
    Expr_Assign
        var: Var#86
        expr: Var#85
        result: Var#87
    Stmt_Jump
        target: Block#18

Block#15
    Parent: Block#10
    Stmt_Jump
        target: Block#18

Block#16
    Parent: Block#11
    Parent: Block#12
    Var#75<$dom> = Phi(Var#37<$dom>)
    Var#76<$key> = Phi(Var#38<$key>)
    Var#77<$selectors> = Phi(Var#69<$selectors>, Var#56<$selectors>)
    Var#78<$cssarray> = Phi(Var#68<$cssarray>, Var#34<$cssarray>)
    Stmt_Jump
        target: Block#13

Block#17
    Parent: Block#13
    Stmt_Jump
        target: Block#5

Block#18
    Parent: Block#14
    Parent: Block#15
    Var#88<$cssarray> = Phi(Var#81<$cssarray>, Var#34<$cssarray>)
    Var#89<$selectors> = Phi(Var#32<$selectors>)
    Expr_Array
        result: Var#90
    Expr_Assign
        var: Var#91<$cssordered>
        expr: Var#90
        result: Var#92
    Iterator_Reset
        var: Var#88<$cssarray>
    Stmt_Jump
        target: Block#19

Block#19
    Parent: Block#18
    Parent: Block#22
    Var#93<$cssordered> = Phi(Var#91<$cssordered>, Var#94<$cssordered>)
    Var#95<$selectors> = Phi(Var#89<$selectors>)
    Iterator_Valid
        var: Var#88<$cssarray>
        result: Var#96
    Stmt_JumpIf
        cond: Var#96
        if: Block#20
        else: Block#21

Block#20
    Parent: Block#19
    Var#94<$cssordered> = Phi(Var#93<$cssordered>)
    Iterator_Key
        var: Var#88<$cssarray>
        result: Var#97
    Expr_Assign
        var: Var#98<$key>
        expr: Var#97
        result: Var#99
    Iterator_Value
        var: Var#88<$cssarray>
        result: Var#100
    Expr_Assign
        var: Var#101<$val>
        expr: Var#100
        result: Var#102
    Expr_FuncCall
        name: LITERAL('sprintf')
        args[0]: LITERAL('%04d')
        args[1]: Var#98<$key>
        result: Var#103
    Expr_Assign
        var: Var#104<$skey>
        expr: Var#103
        result: Var#105
    Expr_ArrayDimFetch
        var: Var#101<$val>
        dim: LITERAL('s')
        result: Var#106
    Expr_BinaryOp_Concat
        left: Var#106
        right: LITERAL('_')
        result: Var#107
    Expr_BinaryOp_Concat
        left: Var#107
        right: Var#104<$skey>
        result: Var#108
    Expr_ArrayDimFetch
        var: Var#94<$cssordered>
        dim: Var#108
        result: Var#109
    Expr_Assign
        var: Var#109
        expr: Var#101<$val>
        result: Var#110
    Stmt_Jump
        target: Block#22

Block#21
    Parent: Block#19
    Stmt_Jump
        target: Block#23

Block#22
    Parent: Block#20
    Stmt_Jump
        target: Block#19

Block#23
    Parent: Block#21
    Var#111<$cssordered> = Phi(Var#93<$cssordered>)
    Var#112<$selectors> = Phi(Var#95<$selectors>)
    Expr_ConstFetch
        name: LITERAL('SORT_STRING')
        result: Var#113
    Expr_FuncCall
        name: LITERAL('ksort')
        args[0]: Var#111<$cssordered>
        args[1]: Var#113
        result: Var#114
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        values[0]: Var#112<$selectors>
        values[1]: Var#111<$cssordered>
        result: Var#115
    Terminal_Return
        expr: Var#115

Function TCPDF_STATIC::getTagStyleFromCSSarray(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('css')
        result: Var#1<$css>
    Expr_Assign
        var: Var#2<$tagstyle>
        expr: LITERAL('')
        result: Var#3
    Iterator_Reset
        var: Var#1<$css>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#15
    Var#4<$tagstyle> = Phi(Var#2<$tagstyle>, Var#5<$tagstyle>)
    Iterator_Valid
        var: Var#1<$css>
        result: Var#6
    Stmt_JumpIf
        cond: Var#6
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Iterator_Value
        var: Var#1<$css>
        result: Var#7
    Expr_Assign
        var: Var#8<$style>
        expr: Var#7
        result: Var#9
    Expr_ArrayDimFetch
        var: Var#8<$style>
        dim: LITERAL('c')
        result: Var#10
    Expr_FuncCall
        name: LITERAL('explode')
        args[0]: LITERAL(';')
        args[1]: Var#10
        result: Var#11
    Expr_Assign
        var: Var#12<$csscmds>
        expr: Var#11
        result: Var#13
    Iterator_Reset
        var: Var#12<$csscmds>
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Parent: Block#19
    Var#14<$tagstyle> = Phi(Var#4<$tagstyle>, Var#15<$tagstyle>)
    Var#16<$style> = Phi(Var#8<$style>, Var#17<$style>)
    Iterator_Valid
        var: Var#12<$csscmds>
        result: Var#18
    Stmt_JumpIf
        cond: Var#18
        if: Block#7
        else: Block#8

Block#6
    Parent: Block#4
    Var#19<$tagstyle> = Phi(Var#4<$tagstyle>)
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/[;]+/')
        args[1]: LITERAL(';')
        args[2]: Var#19<$tagstyle>
        result: Var#20
    Expr_Assign
        var: Var#21<$tagstyle>
        expr: Var#20
        result: Var#22
    Terminal_Return
        expr: Var#21<$tagstyle>

Block#7
    Parent: Block#5
    Iterator_Value
        var: Var#12<$csscmds>
        result: Var#23
    Expr_Assign
        var: Var#24<$cmd>
        expr: Var#23
        result: Var#25
    Expr_Empty
        expr: Var#24<$cmd>
        result: Var#26
    Expr_BooleanNot
        expr: Var#26
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#9
        else: Block#10

Block#8
    Parent: Block#5
    Stmt_Jump
        target: Block#11

Block#9
    Parent: Block#7
    Var#28<$cmd> = Phi(Var#24<$cmd>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#28<$cmd>
        args[1]: LITERAL(':')
        result: Var#29
    Expr_Assign
        var: Var#30<$pos>
        expr: Var#29
        result: Var#31
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#32
    Expr_BinaryOp_NotIdentical
        left: Var#30<$pos>
        right: Var#32
        result: Var#33
    Stmt_JumpIf
        cond: Var#33
        if: Block#12
        else: Block#13

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#14

Block#11
    Parent: Block#8
    Var#34<$tagstyle> = Phi(Var#14<$tagstyle>)
    Var#35<$style> = Phi(Var#16<$style>)
    Expr_ArrayDimFetch
        var: Var#35<$style>
        dim: LITERAL('c')
        result: Var#36
    Expr_BinaryOp_Concat
        left: LITERAL(';')
        right: Var#36
        result: Var#37
    Expr_BinaryOp_Concat
        left: Var#34<$tagstyle>
        right: Var#37
        result: Var#38
    Expr_Assign
        var: Var#5<$tagstyle>
        expr: Var#38
        result: Var#39
    Stmt_Jump
        target: Block#15

Block#12
    Parent: Block#9
    Var#40<$cmd> = Phi(Var#28<$cmd>)
    Var#41<$pos> = Phi(Var#30<$pos>)
    Var#42<$tagstyle> = Phi(Var#14<$tagstyle>)
    Expr_BinaryOp_Plus
        left: Var#41<$pos>
        right: LITERAL(1)
        result: Var#43
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#40<$cmd>
        args[1]: LITERAL(0)
        args[2]: Var#43
        result: Var#44
    Expr_Assign
        var: Var#45<$cmd>
        expr: Var#44
        result: Var#46
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#42<$tagstyle>
        args[1]: Var#45<$cmd>
        result: Var#47
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#48
    Expr_BinaryOp_NotIdentical
        left: Var#47
        right: Var#48
        result: Var#49
    Stmt_JumpIf
        cond: Var#49
        if: Block#16
        else: Block#17

Block#13
    Parent: Block#9
    Stmt_Jump
        target: Block#18

Block#14
    Parent: Block#18
    Parent: Block#10
    Var#15<$tagstyle> = Phi(Var#50<$tagstyle>, Var#14<$tagstyle>)
    Var#17<$style> = Phi(Var#51<$style>, Var#16<$style>)
    Stmt_Jump
        target: Block#19

Block#15
    Parent: Block#11
    Stmt_Jump
        target: Block#2

Block#16
    Parent: Block#12
    Var#52<$cmd> = Phi(Var#45<$cmd>)
    Var#53<$tagstyle> = Phi(Var#42<$tagstyle>)
    Expr_BinaryOp_Concat
        left: LITERAL('/')
        right: Var#52<$cmd>
        result: Var#54
    Expr_BinaryOp_Concat
        left: Var#54
        right: LITERAL('[^;]+/i')
        result: Var#55
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: Var#55
        args[1]: LITERAL('')
        args[2]: Var#53<$tagstyle>
        result: Var#56
    Expr_Assign
        var: Var#57<$tagstyle>
        expr: Var#56
        result: Var#58
    Stmt_Jump
        target: Block#20

Block#17
    Parent: Block#12
    Stmt_Jump
        target: Block#20

Block#18
    Parent: Block#20
    Parent: Block#13
    Var#50<$tagstyle> = Phi(Var#59<$tagstyle>, Var#14<$tagstyle>)
    Var#51<$style> = Phi(Var#60<$style>, Var#16<$style>)
    Stmt_Jump
        target: Block#14

Block#19
    Parent: Block#14
    Stmt_Jump
        target: Block#5

Block#20
    Parent: Block#16
    Parent: Block#17
    Var#59<$tagstyle> = Phi(Var#57<$tagstyle>, Var#42<$tagstyle>)
    Var#60<$style> = Phi(Var#16<$style>)
    Stmt_Jump
        target: Block#18

Function TCPDF_STATIC::intToRoman(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('number')
        result: Var#1<$number>
    Expr_Assign
        var: Var#2<$roman>
        expr: LITERAL('')
        result: Var#3
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#5
    Var#4<$number> = Phi(Var#1<$number>, Var#5<$number>)
    Var#6<$roman> = Phi(Var#2<$roman>, Var#7<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#4<$number>
        right: LITERAL(1000)
        result: Var#8
    Stmt_JumpIf
        cond: Var#8
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Var#9<$roman> = Phi(Var#6<$roman>)
    Var#10<$number> = Phi(Var#4<$number>)
    Expr_BinaryOp_Concat
        left: Var#9<$roman>
        right: LITERAL('M')
        result: Var#11
    Expr_Assign
        var: Var#7<$roman>
        expr: Var#11
        result: Var#12
    Expr_BinaryOp_Minus
        left: Var#10<$number>
        right: LITERAL(1000)
        result: Var#13
    Expr_Assign
        var: Var#5<$number>
        expr: Var#13
        result: Var#14
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#6

Block#5
    Parent: Block#3
    Stmt_Jump
        target: Block#2

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#6
    Parent: Block#10
    Var#15<$number> = Phi(Var#4<$number>, Var#16<$number>)
    Var#17<$roman> = Phi(Var#6<$roman>, Var#18<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#15<$number>
        right: LITERAL(900)
        result: Var#19
    Stmt_JumpIf
        cond: Var#19
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#20<$roman> = Phi(Var#17<$roman>)
    Var#21<$number> = Phi(Var#15<$number>)
    Expr_BinaryOp_Concat
        left: Var#20<$roman>
        right: LITERAL('CM')
        result: Var#22
    Expr_Assign
        var: Var#18<$roman>
        expr: Var#22
        result: Var#23
    Expr_BinaryOp_Minus
        left: Var#21<$number>
        right: LITERAL(900)
        result: Var#24
    Expr_Assign
        var: Var#16<$number>
        expr: Var#24
        result: Var#25
    Stmt_Jump
        target: Block#10

Block#9
    Parent: Block#7
    Stmt_Jump
        target: Block#11

Block#10
    Parent: Block#8
    Stmt_Jump
        target: Block#7

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#11
    Parent: Block#15
    Var#26<$number> = Phi(Var#15<$number>, Var#27<$number>)
    Var#28<$roman> = Phi(Var#17<$roman>, Var#29<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#26<$number>
        right: LITERAL(500)
        result: Var#30
    Stmt_JumpIf
        cond: Var#30
        if: Block#13
        else: Block#14

Block#13
    Parent: Block#12
    Var#31<$roman> = Phi(Var#28<$roman>)
    Var#32<$number> = Phi(Var#26<$number>)
    Expr_BinaryOp_Concat
        left: Var#31<$roman>
        right: LITERAL('D')
        result: Var#33
    Expr_Assign
        var: Var#29<$roman>
        expr: Var#33
        result: Var#34
    Expr_BinaryOp_Minus
        left: Var#32<$number>
        right: LITERAL(500)
        result: Var#35
    Expr_Assign
        var: Var#27<$number>
        expr: Var#35
        result: Var#36
    Stmt_Jump
        target: Block#15

Block#14
    Parent: Block#12
    Stmt_Jump
        target: Block#16

Block#15
    Parent: Block#13
    Stmt_Jump
        target: Block#12

Block#16
    Parent: Block#14
    Stmt_Jump
        target: Block#17

Block#17
    Parent: Block#16
    Parent: Block#20
    Var#37<$number> = Phi(Var#26<$number>, Var#38<$number>)
    Var#39<$roman> = Phi(Var#28<$roman>, Var#40<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#37<$number>
        right: LITERAL(400)
        result: Var#41
    Stmt_JumpIf
        cond: Var#41
        if: Block#18
        else: Block#19

Block#18
    Parent: Block#17
    Var#42<$roman> = Phi(Var#39<$roman>)
    Var#43<$number> = Phi(Var#37<$number>)
    Expr_BinaryOp_Concat
        left: Var#42<$roman>
        right: LITERAL('CD')
        result: Var#44
    Expr_Assign
        var: Var#40<$roman>
        expr: Var#44
        result: Var#45
    Expr_BinaryOp_Minus
        left: Var#43<$number>
        right: LITERAL(400)
        result: Var#46
    Expr_Assign
        var: Var#38<$number>
        expr: Var#46
        result: Var#47
    Stmt_Jump
        target: Block#20

Block#19
    Parent: Block#17
    Stmt_Jump
        target: Block#21

Block#20
    Parent: Block#18
    Stmt_Jump
        target: Block#17

Block#21
    Parent: Block#19
    Stmt_Jump
        target: Block#22

Block#22
    Parent: Block#21
    Parent: Block#25
    Var#48<$number> = Phi(Var#37<$number>, Var#49<$number>)
    Var#50<$roman> = Phi(Var#39<$roman>, Var#51<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#48<$number>
        right: LITERAL(100)
        result: Var#52
    Stmt_JumpIf
        cond: Var#52
        if: Block#23
        else: Block#24

Block#23
    Parent: Block#22
    Var#53<$roman> = Phi(Var#50<$roman>)
    Var#54<$number> = Phi(Var#48<$number>)
    Expr_BinaryOp_Concat
        left: Var#53<$roman>
        right: LITERAL('C')
        result: Var#55
    Expr_Assign
        var: Var#51<$roman>
        expr: Var#55
        result: Var#56
    Expr_BinaryOp_Minus
        left: Var#54<$number>
        right: LITERAL(100)
        result: Var#57
    Expr_Assign
        var: Var#49<$number>
        expr: Var#57
        result: Var#58
    Stmt_Jump
        target: Block#25

Block#24
    Parent: Block#22
    Stmt_Jump
        target: Block#26

Block#25
    Parent: Block#23
    Stmt_Jump
        target: Block#22

Block#26
    Parent: Block#24
    Stmt_Jump
        target: Block#27

Block#27
    Parent: Block#26
    Parent: Block#30
    Var#59<$number> = Phi(Var#48<$number>, Var#60<$number>)
    Var#61<$roman> = Phi(Var#50<$roman>, Var#62<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#59<$number>
        right: LITERAL(90)
        result: Var#63
    Stmt_JumpIf
        cond: Var#63
        if: Block#28
        else: Block#29

Block#28
    Parent: Block#27
    Var#64<$roman> = Phi(Var#61<$roman>)
    Var#65<$number> = Phi(Var#59<$number>)
    Expr_BinaryOp_Concat
        left: Var#64<$roman>
        right: LITERAL('XC')
        result: Var#66
    Expr_Assign
        var: Var#62<$roman>
        expr: Var#66
        result: Var#67
    Expr_BinaryOp_Minus
        left: Var#65<$number>
        right: LITERAL(90)
        result: Var#68
    Expr_Assign
        var: Var#60<$number>
        expr: Var#68
        result: Var#69
    Stmt_Jump
        target: Block#30

Block#29
    Parent: Block#27
    Stmt_Jump
        target: Block#31

Block#30
    Parent: Block#28
    Stmt_Jump
        target: Block#27

Block#31
    Parent: Block#29
    Stmt_Jump
        target: Block#32

Block#32
    Parent: Block#31
    Parent: Block#35
    Var#70<$number> = Phi(Var#59<$number>, Var#71<$number>)
    Var#72<$roman> = Phi(Var#61<$roman>, Var#73<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#70<$number>
        right: LITERAL(50)
        result: Var#74
    Stmt_JumpIf
        cond: Var#74
        if: Block#33
        else: Block#34

Block#33
    Parent: Block#32
    Var#75<$roman> = Phi(Var#72<$roman>)
    Var#76<$number> = Phi(Var#70<$number>)
    Expr_BinaryOp_Concat
        left: Var#75<$roman>
        right: LITERAL('L')
        result: Var#77
    Expr_Assign
        var: Var#73<$roman>
        expr: Var#77
        result: Var#78
    Expr_BinaryOp_Minus
        left: Var#76<$number>
        right: LITERAL(50)
        result: Var#79
    Expr_Assign
        var: Var#71<$number>
        expr: Var#79
        result: Var#80
    Stmt_Jump
        target: Block#35

Block#34
    Parent: Block#32
    Stmt_Jump
        target: Block#36

Block#35
    Parent: Block#33
    Stmt_Jump
        target: Block#32

Block#36
    Parent: Block#34
    Stmt_Jump
        target: Block#37

Block#37
    Parent: Block#36
    Parent: Block#40
    Var#81<$number> = Phi(Var#70<$number>, Var#82<$number>)
    Var#83<$roman> = Phi(Var#72<$roman>, Var#84<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#81<$number>
        right: LITERAL(40)
        result: Var#85
    Stmt_JumpIf
        cond: Var#85
        if: Block#38
        else: Block#39

Block#38
    Parent: Block#37
    Var#86<$roman> = Phi(Var#83<$roman>)
    Var#87<$number> = Phi(Var#81<$number>)
    Expr_BinaryOp_Concat
        left: Var#86<$roman>
        right: LITERAL('XL')
        result: Var#88
    Expr_Assign
        var: Var#84<$roman>
        expr: Var#88
        result: Var#89
    Expr_BinaryOp_Minus
        left: Var#87<$number>
        right: LITERAL(40)
        result: Var#90
    Expr_Assign
        var: Var#82<$number>
        expr: Var#90
        result: Var#91
    Stmt_Jump
        target: Block#40

Block#39
    Parent: Block#37
    Stmt_Jump
        target: Block#41

Block#40
    Parent: Block#38
    Stmt_Jump
        target: Block#37

Block#41
    Parent: Block#39
    Stmt_Jump
        target: Block#42

Block#42
    Parent: Block#41
    Parent: Block#45
    Var#92<$number> = Phi(Var#81<$number>, Var#93<$number>)
    Var#94<$roman> = Phi(Var#83<$roman>, Var#95<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#92<$number>
        right: LITERAL(10)
        result: Var#96
    Stmt_JumpIf
        cond: Var#96
        if: Block#43
        else: Block#44

Block#43
    Parent: Block#42
    Var#97<$roman> = Phi(Var#94<$roman>)
    Var#98<$number> = Phi(Var#92<$number>)
    Expr_BinaryOp_Concat
        left: Var#97<$roman>
        right: LITERAL('X')
        result: Var#99
    Expr_Assign
        var: Var#95<$roman>
        expr: Var#99
        result: Var#100
    Expr_BinaryOp_Minus
        left: Var#98<$number>
        right: LITERAL(10)
        result: Var#101
    Expr_Assign
        var: Var#93<$number>
        expr: Var#101
        result: Var#102
    Stmt_Jump
        target: Block#45

Block#44
    Parent: Block#42
    Stmt_Jump
        target: Block#46

Block#45
    Parent: Block#43
    Stmt_Jump
        target: Block#42

Block#46
    Parent: Block#44
    Stmt_Jump
        target: Block#47

Block#47
    Parent: Block#46
    Parent: Block#50
    Var#103<$number> = Phi(Var#92<$number>, Var#104<$number>)
    Var#105<$roman> = Phi(Var#94<$roman>, Var#106<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#103<$number>
        right: LITERAL(9)
        result: Var#107
    Stmt_JumpIf
        cond: Var#107
        if: Block#48
        else: Block#49

Block#48
    Parent: Block#47
    Var#108<$roman> = Phi(Var#105<$roman>)
    Var#109<$number> = Phi(Var#103<$number>)
    Expr_BinaryOp_Concat
        left: Var#108<$roman>
        right: LITERAL('IX')
        result: Var#110
    Expr_Assign
        var: Var#106<$roman>
        expr: Var#110
        result: Var#111
    Expr_BinaryOp_Minus
        left: Var#109<$number>
        right: LITERAL(9)
        result: Var#112
    Expr_Assign
        var: Var#104<$number>
        expr: Var#112
        result: Var#113
    Stmt_Jump
        target: Block#50

Block#49
    Parent: Block#47
    Stmt_Jump
        target: Block#51

Block#50
    Parent: Block#48
    Stmt_Jump
        target: Block#47

Block#51
    Parent: Block#49
    Stmt_Jump
        target: Block#52

Block#52
    Parent: Block#51
    Parent: Block#55
    Var#114<$number> = Phi(Var#103<$number>, Var#115<$number>)
    Var#116<$roman> = Phi(Var#105<$roman>, Var#117<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#114<$number>
        right: LITERAL(5)
        result: Var#118
    Stmt_JumpIf
        cond: Var#118
        if: Block#53
        else: Block#54

Block#53
    Parent: Block#52
    Var#119<$roman> = Phi(Var#116<$roman>)
    Var#120<$number> = Phi(Var#114<$number>)
    Expr_BinaryOp_Concat
        left: Var#119<$roman>
        right: LITERAL('V')
        result: Var#121
    Expr_Assign
        var: Var#117<$roman>
        expr: Var#121
        result: Var#122
    Expr_BinaryOp_Minus
        left: Var#120<$number>
        right: LITERAL(5)
        result: Var#123
    Expr_Assign
        var: Var#115<$number>
        expr: Var#123
        result: Var#124
    Stmt_Jump
        target: Block#55

Block#54
    Parent: Block#52
    Stmt_Jump
        target: Block#56

Block#55
    Parent: Block#53
    Stmt_Jump
        target: Block#52

Block#56
    Parent: Block#54
    Stmt_Jump
        target: Block#57

Block#57
    Parent: Block#56
    Parent: Block#60
    Var#125<$number> = Phi(Var#114<$number>, Var#126<$number>)
    Var#127<$roman> = Phi(Var#116<$roman>, Var#128<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#125<$number>
        right: LITERAL(4)
        result: Var#129
    Stmt_JumpIf
        cond: Var#129
        if: Block#58
        else: Block#59

Block#58
    Parent: Block#57
    Var#130<$roman> = Phi(Var#127<$roman>)
    Var#131<$number> = Phi(Var#125<$number>)
    Expr_BinaryOp_Concat
        left: Var#130<$roman>
        right: LITERAL('IV')
        result: Var#132
    Expr_Assign
        var: Var#128<$roman>
        expr: Var#132
        result: Var#133
    Expr_BinaryOp_Minus
        left: Var#131<$number>
        right: LITERAL(4)
        result: Var#134
    Expr_Assign
        var: Var#126<$number>
        expr: Var#134
        result: Var#135
    Stmt_Jump
        target: Block#60

Block#59
    Parent: Block#57
    Stmt_Jump
        target: Block#61

Block#60
    Parent: Block#58
    Stmt_Jump
        target: Block#57

Block#61
    Parent: Block#59
    Stmt_Jump
        target: Block#62

Block#62
    Parent: Block#61
    Parent: Block#65
    Var#136<$number> = Phi(Var#125<$number>, Var#137<$number>)
    Var#138<$roman> = Phi(Var#127<$roman>, Var#139<$roman>)
    Expr_BinaryOp_GreaterOrEqual
        left: Var#136<$number>
        right: LITERAL(1)
        result: Var#140
    Stmt_JumpIf
        cond: Var#140
        if: Block#63
        else: Block#64

Block#63
    Parent: Block#62
    Var#141<$roman> = Phi(Var#138<$roman>)
    Var#142<$number> = Phi(Var#136<$number>)
    Expr_BinaryOp_Concat
        left: Var#141<$roman>
        right: LITERAL('I')
        result: Var#143
    Expr_Assign
        var: Var#139<$roman>
        expr: Var#143
        result: Var#144
    Expr_BinaryOp_Minus
        left: Var#142<$number>
        right: LITERAL(1)
        result: Var#145
    Expr_Assign
        var: Var#137<$number>
        expr: Var#145
        result: Var#146
    Stmt_Jump
        target: Block#65

Block#64
    Parent: Block#62
    Stmt_Jump
        target: Block#66

Block#65
    Parent: Block#63
    Stmt_Jump
        target: Block#62

Block#66
    Parent: Block#64
    Var#147<$roman> = Phi(Var#138<$roman>)
    Terminal_Return
        expr: Var#147<$roman>

Function TCPDF_STATIC::revstrpos(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('haystack')
        result: Var#1<$haystack>
    Expr_Param
        declaredType: mixed
        name: LITERAL('needle')
        result: Var#2<$needle>
    Expr_Param
        declaredType: mixed
        name: LITERAL('offset')
        defaultVar: LITERAL(0)
        result: Var#3<$offset>
        defaultBlock: Block#2
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#1<$haystack>
        result: Var#4
    Expr_Assign
        var: Var#5<$length>
        expr: Var#4
        result: Var#6
    Expr_BinaryOp_Greater
        left: Var#3<$offset>
        right: LITERAL(0)
        result: Var#7
    Stmt_JumpIf
        cond: Var#7
        if: Block#3
        else: Block#4

Block#2

Block#3
    Parent: Block#1
    Var#8<$length> = Phi(Var#5<$length>)
    Var#9<$offset> = Phi(Var#3<$offset>)
    Expr_BinaryOp_Minus
        left: Var#8<$length>
        right: Var#9<$offset>
        result: Var#10
    Expr_Assign
        var: Var#11
        expr: Var#10
        result: Var#12
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#1
    Var#13<$offset> = Phi(Var#3<$offset>)
    Expr_FuncCall
        name: LITERAL('abs')
        args[0]: Var#13<$offset>
        result: Var#14
    Expr_Assign
        var: Var#15
        expr: Var#14
        result: Var#16
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#17 = Phi(Var#11, Var#15)
    Var#18<$haystack> = Phi(Var#1<$haystack>)
    Var#19<$needle> = Phi(Var#2<$needle>)
    Var#20<$length> = Phi(Var#8<$length>, Var#5<$length>)
    Expr_Assign
        var: Var#21<$offset>
        expr: Var#17
        result: Var#22
    Expr_FuncCall
        name: LITERAL('strrev')
        args[0]: Var#18<$haystack>
        result: Var#23
    Expr_FuncCall
        name: LITERAL('strrev')
        args[0]: Var#19<$needle>
        result: Var#24
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#23
        args[1]: Var#24
        args[2]: Var#21<$offset>
        result: Var#25
    Expr_Assign
        var: Var#26<$pos>
        expr: Var#25
        result: Var#27
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#28
    Expr_BinaryOp_Identical
        left: Var#26<$pos>
        right: Var#28
        result: Var#29
    Stmt_JumpIf
        cond: Var#29
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#30
    Expr_Assign
        var: Var#31
        expr: Var#30
        result: Var#32
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#5
    Var#33<$length> = Phi(Var#20<$length>)
    Var#34<$pos> = Phi(Var#26<$pos>)
    Var#35<$needle> = Phi(Var#19<$needle>)
    Expr_BinaryOp_Minus
        left: Var#33<$length>
        right: Var#34<$pos>
        result: Var#36
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#35<$needle>
        result: Var#37
    Expr_BinaryOp_Minus
        left: Var#36
        right: Var#37
        result: Var#38
    Expr_Assign
        var: Var#39
        expr: Var#38
        result: Var#40
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#6
    Parent: Block#7
    Var#41 = Phi(Var#31, Var#39)
    Terminal_Return
        expr: Var#41

Function TCPDF_STATIC::serializeTCPDFtagParameters(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_FuncCall
        name: LITERAL('json_encode')
        args[0]: Var#1<$data>
        result: Var#2
    Expr_FuncCall
        name: LITERAL('urlencode')
        args[0]: Var#2
        result: Var#3
    Terminal_Return
        expr: Var#3

Function TCPDF_STATIC::unserializeTCPDFtagParameters(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('data')
        result: Var#1<$data>
    Expr_FuncCall
        name: LITERAL('urldecode')
        args[0]: Var#1<$data>
        result: Var#2
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#3
    Expr_FuncCall
        name: LITERAL('json_decode')
        args[0]: Var#2
        args[1]: Var#3
        result: Var#4
    Terminal_Return
        expr: Var#4

Function TCPDF_STATIC::getHyphenPatternsFromTEX(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('file')
        result: Var#1<$file>
    Var#2<$matches> = Phi()
    Expr_FuncCall
        name: LITERAL('file_get_contents')
        args[0]: Var#1<$file>
        result: Var#3
    Expr_Assign
        var: Var#4<$data>
        expr: Var#3
        result: Var#5
    Expr_Array
        result: Var#6
    Expr_Assign
        var: Var#7<$patterns>
        expr: Var#6
        result: Var#8
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/\\%[^\\n]*/')
        args[1]: LITERAL('')
        args[2]: Var#4<$data>
        result: Var#9
    Expr_Assign
        var: Var#10<$data>
        expr: Var#9
        result: Var#11
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/\\\\patterns\\{([^\\}]*)\\}/i')
        args[1]: Var#10<$data>
        args[2]: Var#2<$matches>
        result: Var#12
    Expr_ArrayDimFetch
        var: Var#2<$matches>
        dim: LITERAL(0)
        result: Var#13
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#14
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#13
        args[1]: LITERAL(10)
        args[2]: Var#14
        result: Var#15
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#15
        result: Var#16
    Expr_Assign
        var: Var#17<$data>
        expr: Var#16
        result: Var#18
    Expr_FuncCall
        name: LITERAL('preg_split')
        args[0]: LITERAL('/[\\s]+/')
        args[1]: Var#17<$data>
        result: Var#19
    Expr_Assign
        var: Var#20<$patterns_array>
        expr: Var#19
        result: Var#21
    Expr_Array
        result: Var#22
    Expr_Assign
        var: Var#23<$patterns>
        expr: Var#22
        result: Var#24
    Iterator_Reset
        var: Var#20<$patterns_array>
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#9
    Var#25<$patterns> = Phi(Var#23<$patterns>, Var#26<$patterns>)
    Iterator_Valid
        var: Var#20<$patterns_array>
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Iterator_Value
        var: Var#20<$patterns_array>
        result: Var#28
    Expr_Assign
        var: Var#29<$val>
        expr: Var#28
        result: Var#30
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('empty_string')
        args[0]: Var#29<$val>
        result: Var#31
    Expr_BooleanNot
        expr: Var#31
        result: Var#32
    Stmt_JumpIf
        cond: Var#32
        if: Block#5
        else: Block#6

Block#4
    Parent: Block#2
    Stmt_Jump
        target: Block#7

Block#5
    Parent: Block#3
    Var#33<$val> = Phi(Var#29<$val>)
    Var#34<$patterns> = Phi(Var#25<$patterns>)
    Expr_FuncCall
        name: LITERAL('trim')
        args[0]: Var#33<$val>
        result: Var#35
    Expr_Assign
        var: Var#36<$val>
        expr: Var#35
        result: Var#37
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL('\'')
        args[1]: LITERAL('\\\'')
        args[2]: Var#36<$val>
        result: Var#38
    Expr_Assign
        var: Var#39<$val>
        expr: Var#38
        result: Var#40
    Expr_FuncCall
        name: LITERAL('preg_replace')
        args[0]: LITERAL('/[0-9]+/')
        args[1]: LITERAL('')
        args[2]: Var#39<$val>
        result: Var#41
    Expr_Assign
        var: Var#42<$key>
        expr: Var#41
        result: Var#43
    Expr_ArrayDimFetch
        var: Var#34<$patterns>
        dim: Var#42<$key>
        result: Var#44
    Expr_Assign
        var: Var#44
        expr: Var#39<$val>
        result: Var#45
    Stmt_Jump
        target: Block#8

Block#6
    Parent: Block#3
    Stmt_Jump
        target: Block#8

Block#7
    Parent: Block#4
    Var#46<$patterns> = Phi(Var#25<$patterns>)
    Terminal_Return
        expr: Var#46<$patterns>

Block#8
    Parent: Block#5
    Parent: Block#6
    Var#26<$patterns> = Phi(Var#34<$patterns>, Var#25<$patterns>)
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Stmt_Jump
        target: Block#2

Function TCPDF_STATIC::getPathPaintOperator(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('style')
        result: Var#1<$style>
    Expr_Param
        declaredType: mixed
        name: LITERAL('default')
        defaultVar: LITERAL('S')
        result: Var#2<$default>
        defaultBlock: Block#2
    Expr_Assign
        var: Var#3<$op>
        expr: LITERAL('')
        result: Var#4
    Stmt_Switch
        cond: Var#1<$style>
        cases[0]: LITERAL('S')
        cases[1]: LITERAL('D')
        cases[2]: LITERAL('s')
        cases[3]: LITERAL('d')
        cases[4]: LITERAL('f')
        cases[5]: LITERAL('F')
        cases[6]: LITERAL('f*')
        cases[7]: LITERAL('F*')
        cases[8]: LITERAL('B')
        cases[9]: LITERAL('FD')
        cases[10]: LITERAL('DF')
        cases[11]: LITERAL('B*')
        cases[12]: LITERAL('F*D')
        cases[13]: LITERAL('DF*')
        cases[14]: LITERAL('b')
        cases[15]: LITERAL('fd')
        cases[16]: LITERAL('df')
        cases[17]: LITERAL('b*')
        cases[18]: LITERAL('f*d')
        cases[19]: LITERAL('df*')
        cases[20]: LITERAL('CNZ')
        cases[21]: LITERAL('CEO')
        cases[22]: LITERAL('n')
        targets[0]: Block#3
        targets[1]: Block#4
        targets[2]: Block#5
        targets[3]: Block#6
        targets[4]: Block#7
        targets[5]: Block#8
        targets[6]: Block#9
        targets[7]: Block#10
        targets[8]: Block#11
        targets[9]: Block#12
        targets[10]: Block#13
        targets[11]: Block#14
        targets[12]: Block#15
        targets[13]: Block#16
        targets[14]: Block#17
        targets[15]: Block#18
        targets[16]: Block#19
        targets[17]: Block#20
        targets[18]: Block#21
        targets[19]: Block#22
        targets[20]: Block#23
        targets[21]: Block#24
        targets[22]: Block#25
        default: Block#26

Block#2

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#1
    Parent: Block#3
    Expr_Assign
        var: Var#5<$op>
        expr: LITERAL('S')
        result: Var#6
    Stmt_Jump
        target: Block#27

Block#5
    Parent: Block#1
    Stmt_Jump
        target: Block#6

Block#6
    Parent: Block#1
    Parent: Block#5
    Expr_Assign
        var: Var#7<$op>
        expr: LITERAL('s')
        result: Var#8
    Stmt_Jump
        target: Block#27

Block#7
    Parent: Block#1
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#1
    Parent: Block#7
    Expr_Assign
        var: Var#9<$op>
        expr: LITERAL('f')
        result: Var#10
    Stmt_Jump
        target: Block#27

Block#9
    Parent: Block#1
    Stmt_Jump
        target: Block#10

Block#10
    Parent: Block#1
    Parent: Block#9
    Expr_Assign
        var: Var#11<$op>
        expr: LITERAL('f*')
        result: Var#12
    Stmt_Jump
        target: Block#27

Block#11
    Parent: Block#1
    Stmt_Jump
        target: Block#12

Block#12
    Parent: Block#1
    Parent: Block#11
    Stmt_Jump
        target: Block#13

Block#13
    Parent: Block#1
    Parent: Block#12
    Expr_Assign
        var: Var#13<$op>
        expr: LITERAL('B')
        result: Var#14
    Stmt_Jump
        target: Block#27

Block#14
    Parent: Block#1
    Stmt_Jump
        target: Block#15

Block#15
    Parent: Block#1
    Parent: Block#14
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#1
    Parent: Block#15
    Expr_Assign
        var: Var#15<$op>
        expr: LITERAL('B*')
        result: Var#16
    Stmt_Jump
        target: Block#27

Block#17
    Parent: Block#1
    Stmt_Jump
        target: Block#18

Block#18
    Parent: Block#1
    Parent: Block#17
    Stmt_Jump
        target: Block#19

Block#19
    Parent: Block#1
    Parent: Block#18
    Expr_Assign
        var: Var#17<$op>
        expr: LITERAL('b')
        result: Var#18
    Stmt_Jump
        target: Block#27

Block#20
    Parent: Block#1
    Stmt_Jump
        target: Block#21

Block#21
    Parent: Block#1
    Parent: Block#20
    Stmt_Jump
        target: Block#22

Block#22
    Parent: Block#1
    Parent: Block#21
    Expr_Assign
        var: Var#19<$op>
        expr: LITERAL('b*')
        result: Var#20
    Stmt_Jump
        target: Block#27

Block#23
    Parent: Block#1
    Expr_Assign
        var: Var#21<$op>
        expr: LITERAL('W n')
        result: Var#22
    Stmt_Jump
        target: Block#27

Block#24
    Parent: Block#1
    Expr_Assign
        var: Var#23<$op>
        expr: LITERAL('W* n')
        result: Var#24
    Stmt_Jump
        target: Block#27

Block#25
    Parent: Block#1
    Expr_Assign
        var: Var#25<$op>
        expr: LITERAL('n')
        result: Var#26
    Stmt_Jump
        target: Block#27

Block#26
    Parent: Block#1
    Var#27<$default> = Phi(Var#2<$default>)
    Expr_Empty
        expr: Var#27<$default>
        result: Var#28
    Expr_BooleanNot
        expr: Var#28
        result: Var#29
    Stmt_JumpIf
        cond: Var#29
        if: Block#28
        else: Block#29

Block#27
    Parent: Block#31
    Parent: Block#4
    Parent: Block#6
    Parent: Block#8
    Parent: Block#10
    Parent: Block#13
    Parent: Block#16
    Parent: Block#19
    Parent: Block#22
    Parent: Block#23
    Parent: Block#24
    Parent: Block#25
    Var#30<$op> = Phi(Var#31<$op>, Var#5<$op>, Var#7<$op>, Var#9<$op>, Var#11<$op>, Var#13<$op>, Var#15<$op>, Var#17<$op>, Var#19<$op>, Var#21<$op>, Var#23<$op>, Var#25<$op>)
    Terminal_Return
        expr: Var#30<$op>

Block#28
    Parent: Block#26
    Var#32<$default> = Phi(Var#27<$default>)
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('getPathPaintOperator')
        args[0]: Var#32<$default>
        args[1]: LITERAL('')
        result: Var#33
    Expr_Assign
        var: Var#34<$op>
        expr: Var#33
        result: Var#35
    Stmt_Jump
        target: Block#30

Block#29
    Parent: Block#26
    Expr_Assign
        var: Var#36<$op>
        expr: LITERAL('')
        result: Var#37
    Stmt_Jump
        target: Block#30

Block#30
    Parent: Block#28
    Parent: Block#29
    Var#31<$op> = Phi(Var#34<$op>, Var#36<$op>)
    Stmt_Jump
        target: Block#31

Block#31
    Parent: Block#30
    Stmt_Jump
        target: Block#27

Function TCPDF_STATIC::getTransformationMatrixProduct(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('ta')
        result: Var#1<$ta>
    Expr_Param
        declaredType: mixed
        name: LITERAL('tb')
        result: Var#2<$tb>
    Expr_Array
        result: Var#3
    Expr_Assign
        var: Var#4<$tm>
        expr: Var#3
        result: Var#5
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(0)
        result: Var#6
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(0)
        result: Var#7
    Expr_BinaryOp_Mul
        left: Var#6
        right: Var#7
        result: Var#8
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(2)
        result: Var#9
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(1)
        result: Var#10
    Expr_BinaryOp_Mul
        left: Var#9
        right: Var#10
        result: Var#11
    Expr_BinaryOp_Plus
        left: Var#8
        right: Var#11
        result: Var#12
    Expr_ArrayDimFetch
        var: Var#4<$tm>
        dim: LITERAL(0)
        result: Var#13
    Expr_Assign
        var: Var#13
        expr: Var#12
        result: Var#14
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(1)
        result: Var#15
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(0)
        result: Var#16
    Expr_BinaryOp_Mul
        left: Var#15
        right: Var#16
        result: Var#17
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(3)
        result: Var#18
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(1)
        result: Var#19
    Expr_BinaryOp_Mul
        left: Var#18
        right: Var#19
        result: Var#20
    Expr_BinaryOp_Plus
        left: Var#17
        right: Var#20
        result: Var#21
    Expr_ArrayDimFetch
        var: Var#4<$tm>
        dim: LITERAL(1)
        result: Var#22
    Expr_Assign
        var: Var#22
        expr: Var#21
        result: Var#23
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(0)
        result: Var#24
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(2)
        result: Var#25
    Expr_BinaryOp_Mul
        left: Var#24
        right: Var#25
        result: Var#26
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(2)
        result: Var#27
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(3)
        result: Var#28
    Expr_BinaryOp_Mul
        left: Var#27
        right: Var#28
        result: Var#29
    Expr_BinaryOp_Plus
        left: Var#26
        right: Var#29
        result: Var#30
    Expr_ArrayDimFetch
        var: Var#4<$tm>
        dim: LITERAL(2)
        result: Var#31
    Expr_Assign
        var: Var#31
        expr: Var#30
        result: Var#32
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(1)
        result: Var#33
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(2)
        result: Var#34
    Expr_BinaryOp_Mul
        left: Var#33
        right: Var#34
        result: Var#35
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(3)
        result: Var#36
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(3)
        result: Var#37
    Expr_BinaryOp_Mul
        left: Var#36
        right: Var#37
        result: Var#38
    Expr_BinaryOp_Plus
        left: Var#35
        right: Var#38
        result: Var#39
    Expr_ArrayDimFetch
        var: Var#4<$tm>
        dim: LITERAL(3)
        result: Var#40
    Expr_Assign
        var: Var#40
        expr: Var#39
        result: Var#41
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(0)
        result: Var#42
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(4)
        result: Var#43
    Expr_BinaryOp_Mul
        left: Var#42
        right: Var#43
        result: Var#44
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(2)
        result: Var#45
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(5)
        result: Var#46
    Expr_BinaryOp_Mul
        left: Var#45
        right: Var#46
        result: Var#47
    Expr_BinaryOp_Plus
        left: Var#44
        right: Var#47
        result: Var#48
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(4)
        result: Var#49
    Expr_BinaryOp_Plus
        left: Var#48
        right: Var#49
        result: Var#50
    Expr_ArrayDimFetch
        var: Var#4<$tm>
        dim: LITERAL(4)
        result: Var#51
    Expr_Assign
        var: Var#51
        expr: Var#50
        result: Var#52
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(1)
        result: Var#53
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(4)
        result: Var#54
    Expr_BinaryOp_Mul
        left: Var#53
        right: Var#54
        result: Var#55
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(3)
        result: Var#56
    Expr_ArrayDimFetch
        var: Var#2<$tb>
        dim: LITERAL(5)
        result: Var#57
    Expr_BinaryOp_Mul
        left: Var#56
        right: Var#57
        result: Var#58
    Expr_BinaryOp_Plus
        left: Var#55
        right: Var#58
        result: Var#59
    Expr_ArrayDimFetch
        var: Var#1<$ta>
        dim: LITERAL(5)
        result: Var#60
    Expr_BinaryOp_Plus
        left: Var#59
        right: Var#60
        result: Var#61
    Expr_ArrayDimFetch
        var: Var#4<$tm>
        dim: LITERAL(5)
        result: Var#62
    Expr_Assign
        var: Var#62
        expr: Var#61
        result: Var#63
    Terminal_Return
        expr: Var#4<$tm>

Function TCPDF_STATIC::getSVGTransformMatrix(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('attribute')
        result: Var#1<$attribute>
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        keys[3]: NULL
        keys[4]: NULL
        keys[5]: NULL
        values[0]: LITERAL(1)
        values[1]: LITERAL(0)
        values[2]: LITERAL(0)
        values[3]: LITERAL(1)
        values[4]: LITERAL(0)
        values[5]: LITERAL(0)
        result: Var#2
    Expr_Assign
        var: Var#3<$tm>
        expr: Var#2
        result: Var#4
    Expr_Array
        result: Var#5
    Expr_Assign
        var: Var#6<$transform>
        expr: Var#5
        result: Var#7
    Expr_ConstFetch
        name: LITERAL('PREG_SET_ORDER')
        result: Var#8
    Expr_FuncCall
        name: LITERAL('preg_match_all')
        args[0]: LITERAL('/(matrix|translate|scale|rotate|skewX|skewY)[\\s]*\\(([^\\)]+)\\)/si')
        args[1]: Var#1<$attribute>
        args[2]: Var#6<$transform>
        args[3]: Var#8
        result: Var#9
    Expr_BinaryOp_Greater
        left: Var#9
        right: LITERAL(0)
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#11<$transform> = Phi(Var#6<$transform>)
    Iterator_Reset
        var: Var#11<$transform>
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Parent: Block#32
    Var#12<$tm> = Phi(Var#3<$tm>, Var#13<$tm>)
    Iterator_Valid
        var: Var#11<$transform>
        result: Var#14
    Stmt_JumpIf
        cond: Var#14
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#10
    Parent: Block#3
    Var#15<$tm> = Phi(Var#12<$tm>, Var#3<$tm>)
    Terminal_Return
        expr: Var#15<$tm>

Block#6
    Parent: Block#4
    Iterator_Key
        var: Var#11<$transform>
        result: Var#16
    Expr_Assign
        var: Var#17<$key>
        expr: Var#16
        result: Var#18
    Iterator_Value
        var: Var#11<$transform>
        result: Var#19
    Expr_Assign
        var: Var#20<$data>
        expr: Var#19
        result: Var#21
    Expr_ArrayDimFetch
        var: Var#20<$data>
        dim: LITERAL(2)
        result: Var#22
    Expr_Empty
        expr: Var#22
        result: Var#23
    Expr_BooleanNot
        expr: Var#23
        result: Var#24
    Stmt_JumpIf
        cond: Var#24
        if: Block#8
        else: Block#9

Block#7
    Parent: Block#4
    Stmt_Jump
        target: Block#10

Block#8
    Parent: Block#6
    Var#25<$data> = Phi(Var#20<$data>)
    Expr_Assign
        var: Var#26<$a>
        expr: LITERAL(1)
        result: Var#27
    Expr_Assign
        var: Var#28<$b>
        expr: LITERAL(0)
        result: Var#29
    Expr_Assign
        var: Var#30<$c>
        expr: LITERAL(0)
        result: Var#31
    Expr_Assign
        var: Var#32<$d>
        expr: LITERAL(1)
        result: Var#33
    Expr_Assign
        var: Var#34<$e>
        expr: LITERAL(0)
        result: Var#35
    Expr_Assign
        var: Var#36<$f>
        expr: LITERAL(0)
        result: Var#37
    Expr_Array
        result: Var#38
    Expr_Assign
        var: Var#39<$regs>
        expr: Var#38
        result: Var#40
    Expr_ArrayDimFetch
        var: Var#25<$data>
        dim: LITERAL(1)
        result: Var#41
    Stmt_Switch
        cond: Var#41
        cases[0]: LITERAL('matrix')
        cases[1]: LITERAL('translate')
        cases[2]: LITERAL('scale')
        cases[3]: LITERAL('rotate')
        cases[4]: LITERAL('skewX')
        cases[5]: LITERAL('skewY')
        targets[0]: Block#11
        targets[1]: Block#12
        targets[2]: Block#13
        targets[3]: Block#14
        targets[4]: Block#15
        targets[5]: Block#16
        default: Block#17

Block#9
    Parent: Block#6
    Stmt_Jump
        target: Block#18

Block#10
    Parent: Block#7
    Stmt_Jump
        target: Block#5

Block#11
    Parent: Block#8
    Var#42<$data> = Phi(Var#25<$data>)
    Var#43<$regs> = Phi(Var#39<$regs>)
    Expr_ArrayDimFetch
        var: Var#42<$data>
        dim: LITERAL(2)
        result: Var#44
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)/si')
        args[1]: Var#44
        args[2]: Var#43<$regs>
        result: Var#45
    Stmt_JumpIf
        cond: Var#45
        if: Block#19
        else: Block#20

Block#12
    Parent: Block#8
    Var#46<$data> = Phi(Var#25<$data>)
    Var#47<$regs> = Phi(Var#39<$regs>)
    Expr_ArrayDimFetch
        var: Var#46<$data>
        dim: LITERAL(2)
        result: Var#48
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)/si')
        args[1]: Var#48
        args[2]: Var#47<$regs>
        result: Var#49
    Stmt_JumpIf
        cond: Var#49
        if: Block#21
        else: Block#22

Block#13
    Parent: Block#8
    Var#50<$data> = Phi(Var#25<$data>)
    Var#51<$regs> = Phi(Var#39<$regs>)
    Expr_ArrayDimFetch
        var: Var#50<$data>
        dim: LITERAL(2)
        result: Var#52
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)/si')
        args[1]: Var#52
        args[2]: Var#51<$regs>
        result: Var#53
    Stmt_JumpIf
        cond: Var#53
        if: Block#23
        else: Block#24

Block#14
    Parent: Block#8
    Var#54<$data> = Phi(Var#25<$data>)
    Var#55<$regs> = Phi(Var#39<$regs>)
    Expr_ArrayDimFetch
        var: Var#54<$data>
        dim: LITERAL(2)
        result: Var#56
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)[\\,\\s]+([a-z0-9\\-\\.]+)/si')
        args[1]: Var#56
        args[2]: Var#55<$regs>
        result: Var#57
    Stmt_JumpIf
        cond: Var#57
        if: Block#25
        else: Block#26

Block#15
    Parent: Block#8
    Var#58<$data> = Phi(Var#25<$data>)
    Var#59<$regs> = Phi(Var#39<$regs>)
    Expr_ArrayDimFetch
        var: Var#58<$data>
        dim: LITERAL(2)
        result: Var#60
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([0-9\\-\\.]+)/si')
        args[1]: Var#60
        args[2]: Var#59<$regs>
        result: Var#61
    Stmt_JumpIf
        cond: Var#61
        if: Block#27
        else: Block#28

Block#16
    Parent: Block#8
    Var#62<$data> = Phi(Var#25<$data>)
    Var#63<$regs> = Phi(Var#39<$regs>)
    Expr_ArrayDimFetch
        var: Var#62<$data>
        dim: LITERAL(2)
        result: Var#64
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([0-9\\-\\.]+)/si')
        args[1]: Var#64
        args[2]: Var#63<$regs>
        result: Var#65
    Stmt_JumpIf
        cond: Var#65
        if: Block#29
        else: Block#30

Block#17
    Var#66<$tm> = Phi()
    Var#67<$a> = Phi()
    Var#68<$b> = Phi()
    Var#69<$c> = Phi()
    Var#70<$d> = Phi()
    Var#71<$e> = Phi()
    Var#72<$f> = Phi()
    Stmt_Jump
        target: Block#31

Block#18
    Parent: Block#31
    Parent: Block#9
    Var#13<$tm> = Phi(Var#73<$tm>, Var#12<$tm>)
    Stmt_Jump
        target: Block#32

Block#19
    Parent: Block#11
    Var#74<$regs> = Phi(Var#43<$regs>)
    Expr_ArrayDimFetch
        var: Var#74<$regs>
        dim: LITERAL(1)
        result: Var#75
    Expr_Assign
        var: Var#76<$a>
        expr: Var#75
        result: Var#77
    Expr_ArrayDimFetch
        var: Var#74<$regs>
        dim: LITERAL(2)
        result: Var#78
    Expr_Assign
        var: Var#79<$b>
        expr: Var#78
        result: Var#80
    Expr_ArrayDimFetch
        var: Var#74<$regs>
        dim: LITERAL(3)
        result: Var#81
    Expr_Assign
        var: Var#82<$c>
        expr: Var#81
        result: Var#83
    Expr_ArrayDimFetch
        var: Var#74<$regs>
        dim: LITERAL(4)
        result: Var#84
    Expr_Assign
        var: Var#85<$d>
        expr: Var#84
        result: Var#86
    Expr_ArrayDimFetch
        var: Var#74<$regs>
        dim: LITERAL(5)
        result: Var#87
    Expr_Assign
        var: Var#88<$e>
        expr: Var#87
        result: Var#89
    Expr_ArrayDimFetch
        var: Var#74<$regs>
        dim: LITERAL(6)
        result: Var#90
    Expr_Assign
        var: Var#91<$f>
        expr: Var#90
        result: Var#92
    Stmt_Jump
        target: Block#33

Block#20
    Parent: Block#11
    Stmt_Jump
        target: Block#33

Block#21
    Parent: Block#12
    Var#93<$regs> = Phi(Var#47<$regs>)
    Expr_ArrayDimFetch
        var: Var#93<$regs>
        dim: LITERAL(1)
        result: Var#94
    Expr_Assign
        var: Var#95<$e>
        expr: Var#94
        result: Var#96
    Expr_ArrayDimFetch
        var: Var#93<$regs>
        dim: LITERAL(2)
        result: Var#97
    Expr_Assign
        var: Var#98<$f>
        expr: Var#97
        result: Var#99
    Stmt_Jump
        target: Block#34

Block#22
    Parent: Block#12
    Var#100<$data> = Phi(Var#46<$data>)
    Var#101<$regs> = Phi(Var#47<$regs>)
    Expr_ArrayDimFetch
        var: Var#100<$data>
        dim: LITERAL(2)
        result: Var#102
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([a-z0-9\\-\\.]+)/si')
        args[1]: Var#102
        args[2]: Var#101<$regs>
        result: Var#103
    Stmt_JumpIf
        cond: Var#103
        if: Block#35
        else: Block#36

Block#23
    Parent: Block#13
    Var#104<$regs> = Phi(Var#51<$regs>)
    Expr_ArrayDimFetch
        var: Var#104<$regs>
        dim: LITERAL(1)
        result: Var#105
    Expr_Assign
        var: Var#106<$a>
        expr: Var#105
        result: Var#107
    Expr_ArrayDimFetch
        var: Var#104<$regs>
        dim: LITERAL(2)
        result: Var#108
    Expr_Assign
        var: Var#109<$d>
        expr: Var#108
        result: Var#110
    Stmt_Jump
        target: Block#37

Block#24
    Parent: Block#13
    Var#111<$data> = Phi(Var#50<$data>)
    Var#112<$regs> = Phi(Var#51<$regs>)
    Expr_ArrayDimFetch
        var: Var#111<$data>
        dim: LITERAL(2)
        result: Var#113
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([a-z0-9\\-\\.]+)/si')
        args[1]: Var#113
        args[2]: Var#112<$regs>
        result: Var#114
    Stmt_JumpIf
        cond: Var#114
        if: Block#38
        else: Block#39

Block#25
    Parent: Block#14
    Var#115<$regs> = Phi(Var#55<$regs>)
    Expr_ArrayDimFetch
        var: Var#115<$regs>
        dim: LITERAL(1)
        result: Var#116
    Expr_FuncCall
        name: LITERAL('deg2rad')
        args[0]: Var#116
        result: Var#117
    Expr_Assign
        var: Var#118<$ang>
        expr: Var#117
        result: Var#119
    Expr_ArrayDimFetch
        var: Var#115<$regs>
        dim: LITERAL(2)
        result: Var#120
    Expr_Assign
        var: Var#121<$x>
        expr: Var#120
        result: Var#122
    Expr_ArrayDimFetch
        var: Var#115<$regs>
        dim: LITERAL(3)
        result: Var#123
    Expr_Assign
        var: Var#124<$y>
        expr: Var#123
        result: Var#125
    Expr_FuncCall
        name: LITERAL('cos')
        args[0]: Var#118<$ang>
        result: Var#126
    Expr_Assign
        var: Var#127<$a>
        expr: Var#126
        result: Var#128
    Expr_FuncCall
        name: LITERAL('sin')
        args[0]: Var#118<$ang>
        result: Var#129
    Expr_Assign
        var: Var#130<$b>
        expr: Var#129
        result: Var#131
    Expr_UnaryMinus
        expr: Var#130<$b>
        result: Var#132
    Expr_Assign
        var: Var#133<$c>
        expr: Var#132
        result: Var#134
    Expr_Assign
        var: Var#135<$d>
        expr: Var#127<$a>
        result: Var#136
    Expr_BinaryOp_Minus
        left: LITERAL(1)
        right: Var#127<$a>
        result: Var#137
    Expr_BinaryOp_Mul
        left: Var#121<$x>
        right: Var#137
        result: Var#138
    Expr_BinaryOp_Mul
        left: Var#124<$y>
        right: Var#133<$c>
        result: Var#139
    Expr_BinaryOp_Minus
        left: Var#138
        right: Var#139
        result: Var#140
    Expr_Assign
        var: Var#141<$e>
        expr: Var#140
        result: Var#142
    Expr_BinaryOp_Minus
        left: LITERAL(1)
        right: Var#135<$d>
        result: Var#143
    Expr_BinaryOp_Mul
        left: Var#124<$y>
        right: Var#143
        result: Var#144
    Expr_BinaryOp_Mul
        left: Var#121<$x>
        right: Var#130<$b>
        result: Var#145
    Expr_BinaryOp_Minus
        left: Var#144
        right: Var#145
        result: Var#146
    Expr_Assign
        var: Var#147<$f>
        expr: Var#146
        result: Var#148
    Stmt_Jump
        target: Block#40

Block#26
    Parent: Block#14
    Var#149<$data> = Phi(Var#54<$data>)
    Var#150<$regs> = Phi(Var#55<$regs>)
    Expr_ArrayDimFetch
        var: Var#149<$data>
        dim: LITERAL(2)
        result: Var#151
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('/([0-9\\-\\.]+)/si')
        args[1]: Var#151
        args[2]: Var#150<$regs>
        result: Var#152
    Stmt_JumpIf
        cond: Var#152
        if: Block#41
        else: Block#42

Block#27
    Parent: Block#15
    Var#153<$regs> = Phi(Var#59<$regs>)
    Expr_ArrayDimFetch
        var: Var#153<$regs>
        dim: LITERAL(1)
        result: Var#154
    Expr_FuncCall
        name: LITERAL('deg2rad')
        args[0]: Var#154
        result: Var#155
    Expr_FuncCall
        name: LITERAL('tan')
        args[0]: Var#155
        result: Var#156
    Expr_Assign
        var: Var#157<$c>
        expr: Var#156
        result: Var#158
    Stmt_Jump
        target: Block#43

Block#28
    Parent: Block#15
    Stmt_Jump
        target: Block#43

Block#29
    Parent: Block#16
    Var#159<$regs> = Phi(Var#63<$regs>)
    Expr_ArrayDimFetch
        var: Var#159<$regs>
        dim: LITERAL(1)
        result: Var#160
    Expr_FuncCall
        name: LITERAL('deg2rad')
        args[0]: Var#160
        result: Var#161
    Expr_FuncCall
        name: LITERAL('tan')
        args[0]: Var#161
        result: Var#162
    Expr_Assign
        var: Var#163<$b>
        expr: Var#162
        result: Var#164
    Stmt_Jump
        target: Block#44

Block#30
    Parent: Block#16
    Stmt_Jump
        target: Block#44

Block#31
    Parent: Block#17
    Parent: Block#33
    Parent: Block#34
    Parent: Block#37
    Parent: Block#40
    Parent: Block#43
    Parent: Block#44
    Var#165<$tm> = Phi(Var#66<$tm>, Var#166<$tm>, Var#167<$tm>, Var#168<$tm>, Var#169<$tm>, Var#170<$tm>, Var#171<$tm>)
    Var#172<$a> = Phi(Var#67<$a>, Var#173<$a>, Var#174<$a>, Var#175<$a>, Var#176<$a>, Var#177<$a>, Var#178<$a>)
    Var#179<$b> = Phi(Var#68<$b>, Var#180<$b>, Var#181<$b>, Var#182<$b>, Var#183<$b>, Var#184<$b>, Var#185<$b>)
    Var#186<$c> = Phi(Var#69<$c>, Var#187<$c>, Var#188<$c>, Var#189<$c>, Var#190<$c>, Var#191<$c>, Var#192<$c>)
    Var#193<$d> = Phi(Var#70<$d>, Var#194<$d>, Var#195<$d>, Var#196<$d>, Var#197<$d>, Var#198<$d>, Var#199<$d>)
    Var#200<$e> = Phi(Var#71<$e>, Var#201<$e>, Var#202<$e>, Var#203<$e>, Var#204<$e>, Var#205<$e>, Var#206<$e>)
    Var#207<$f> = Phi(Var#72<$f>, Var#208<$f>, Var#209<$f>, Var#210<$f>, Var#211<$f>, Var#212<$f>, Var#213<$f>)
    Expr_Array
        keys[0]: NULL
        keys[1]: NULL
        keys[2]: NULL
        keys[3]: NULL
        keys[4]: NULL
        keys[5]: NULL
        values[0]: Var#172<$a>
        values[1]: Var#179<$b>
        values[2]: Var#186<$c>
        values[3]: Var#193<$d>
        values[4]: Var#200<$e>
        values[5]: Var#207<$f>
        result: Var#214
    Expr_StaticCall
        class: LITERAL('TCPDF_STATIC')
        name: LITERAL('getTransformationMatrixProduct')
        args[0]: Var#165<$tm>
        args[1]: Var#214
        result: Var#215
    Expr_Assign
        var: Var#73<$tm>
        expr: Var#215
        result: Var#216
    Stmt_Jump
        target: Block#18

Block#32
    Parent: Block#18
    Stmt_Jump
        target: Block#4

Block#33
    Parent: Block#19
    Parent: Block#20
    Var#166<$tm> = Phi(Var#12<$tm>)
    Var#173<$a> = Phi(Var#76<$a>, Var#26<$a>)
    Var#180<$b> = Phi(Var#79<$b>, Var#28<$b>)
    Var#187<$c> = Phi(Var#82<$c>, Var#30<$c>)
    Var#194<$d> = Phi(Var#85<$d>, Var#32<$d>)
    Var#201<$e> = Phi(Var#88<$e>, Var#34<$e>)
    Var#208<$f> = Phi(Var#91<$f>, Var#36<$f>)
    Stmt_Jump
        target: Block#31

Block#34
    Parent: Block#21
    Parent: Block#35
    Parent: Block#36
    Var#167<$tm> = Phi(Var#12<$tm>)
    Var#174<$a> = Phi(Var#26<$a>)
    Var#181<$b> = Phi(Var#28<$b>)
    Var#188<$c> = Phi(Var#30<$c>)
    Var#195<$d> = Phi(Var#32<$d>)
    Var#202<$e> = Phi(Var#95<$e>, Var#217<$e>, Var#34<$e>)
    Var#209<$f> = Phi(Var#98<$f>, Var#36<$f>)
    Stmt_Jump
        target: Block#31

Block#35
    Parent: Block#22
    Var#218<$regs> = Phi(Var#101<$regs>)
    Expr_ArrayDimFetch
        var: Var#218<$regs>
        dim: LITERAL(1)
        result: Var#219
    Expr_Assign
        var: Var#217<$e>
        expr: Var#219
        result: Var#220
    Stmt_Jump
        target: Block#34

Block#36
    Parent: Block#22
    Stmt_Jump
        target: Block#34

Block#37
    Parent: Block#23
    Parent: Block#38
    Parent: Block#39
    Var#168<$tm> = Phi(Var#12<$tm>)
    Var#175<$a> = Phi(Var#106<$a>, Var#221<$a>, Var#26<$a>)
    Var#182<$b> = Phi(Var#28<$b>)
    Var#189<$c> = Phi(Var#30<$c>)
    Var#196<$d> = Phi(Var#109<$d>, Var#222<$d>, Var#32<$d>)
    Var#203<$e> = Phi(Var#34<$e>)
    Var#210<$f> = Phi(Var#36<$f>)
    Stmt_Jump
        target: Block#31

Block#38
    Parent: Block#24
    Var#223<$regs> = Phi(Var#112<$regs>)
    Expr_ArrayDimFetch
        var: Var#223<$regs>
        dim: LITERAL(1)
        result: Var#224
    Expr_Assign
        var: Var#221<$a>
        expr: Var#224
        result: Var#225
    Expr_Assign
        var: Var#222<$d>
        expr: Var#221<$a>
        result: Var#226
    Stmt_Jump
        target: Block#37

Block#39
    Parent: Block#24
    Stmt_Jump
        target: Block#37

Block#40
    Parent: Block#25
    Parent: Block#41
    Parent: Block#42
    Var#169<$tm> = Phi(Var#12<$tm>)
    Var#176<$a> = Phi(Var#127<$a>, Var#227<$a>, Var#26<$a>)
    Var#183<$b> = Phi(Var#130<$b>, Var#228<$b>, Var#28<$b>)
    Var#190<$c> = Phi(Var#133<$c>, Var#229<$c>, Var#30<$c>)
    Var#197<$d> = Phi(Var#135<$d>, Var#230<$d>, Var#32<$d>)
    Var#204<$e> = Phi(Var#141<$e>, Var#231<$e>, Var#34<$e>)
    Var#211<$f> = Phi(Var#147<$f>, Var#232<$f>, Var#36<$f>)
    Stmt_Jump
        target: Block#31

Block#41
    Parent: Block#26
    Var#233<$regs> = Phi(Var#150<$regs>)
    Expr_ArrayDimFetch
        var: Var#233<$regs>
        dim: LITERAL(1)
        result: Var#234
    Expr_FuncCall
        name: LITERAL('deg2rad')
        args[0]: Var#234
        result: Var#235
    Expr_Assign
        var: Var#236<$ang>
        expr: Var#235
        result: Var#237
    Expr_FuncCall
        name: LITERAL('cos')
        args[0]: Var#236<$ang>
        result: Var#238
    Expr_Assign
        var: Var#227<$a>
        expr: Var#238
        result: Var#239
    Expr_FuncCall
        name: LITERAL('sin')
        args[0]: Var#236<$ang>
        result: Var#240
    Expr_Assign
        var: Var#228<$b>
        expr: Var#240
        result: Var#241
    Expr_UnaryMinus
        expr: Var#228<$b>
        result: Var#242
    Expr_Assign
        var: Var#229<$c>
        expr: Var#242
        result: Var#243
    Expr_Assign
        var: Var#230<$d>
        expr: Var#227<$a>
        result: Var#244
    Expr_Assign
        var: Var#231<$e>
        expr: LITERAL(0)
        result: Var#245
    Expr_Assign
        var: Var#232<$f>
        expr: LITERAL(0)
        result: Var#246
    Stmt_Jump
        target: Block#40

Block#42
    Parent: Block#26
    Stmt_Jump
        target: Block#40

Block#43
    Parent: Block#27
    Parent: Block#28
    Var#170<$tm> = Phi(Var#12<$tm>)
    Var#177<$a> = Phi(Var#26<$a>)
    Var#184<$b> = Phi(Var#28<$b>)
    Var#191<$c> = Phi(Var#157<$c>, Var#30<$c>)
    Var#198<$d> = Phi(Var#32<$d>)
    Var#205<$e> = Phi(Var#34<$e>)
    Var#212<$f> = Phi(Var#36<$f>)
    Stmt_Jump
        target: Block#31

Block#44
    Parent: Block#29
    Parent: Block#30
    Var#171<$tm> = Phi(Var#12<$tm>)
    Var#178<$a> = Phi(Var#26<$a>)
    Var#185<$b> = Phi(Var#163<$b>, Var#28<$b>)
    Var#192<$c> = Phi(Var#30<$c>)
    Var#199<$d> = Phi(Var#32<$d>)
    Var#206<$e> = Phi(Var#34<$e>)
    Var#213<$f> = Phi(Var#36<$f>)
    Stmt_Jump
        target: Block#31

Function TCPDF_STATIC::getVectorsAngle(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('x1')
        result: Var#1<$x1>
    Expr_Param
        declaredType: mixed
        name: LITERAL('y1')
        result: Var#2<$y1>
    Expr_Param
        declaredType: mixed
        name: LITERAL('x2')
        result: Var#3<$x2>
    Expr_Param
        declaredType: mixed
        name: LITERAL('y2')
        result: Var#4<$y2>
    Expr_BinaryOp_Mul
        left: Var#1<$x1>
        right: Var#3<$x2>
        result: Var#5
    Expr_BinaryOp_Mul
        left: Var#2<$y1>
        right: Var#4<$y2>
        result: Var#6
    Expr_BinaryOp_Plus
        left: Var#5
        right: Var#6
        result: Var#7
    Expr_Assign
        var: Var#8<$dprod>
        expr: Var#7
        result: Var#9
    Expr_BinaryOp_Mul
        left: Var#1<$x1>
        right: Var#1<$x1>
        result: Var#10
    Expr_BinaryOp_Mul
        left: Var#2<$y1>
        right: Var#2<$y1>
        result: Var#11
    Expr_BinaryOp_Plus
        left: Var#10
        right: Var#11
        result: Var#12
    Expr_FuncCall
        name: LITERAL('sqrt')
        args[0]: Var#12
        result: Var#13
    Expr_Assign
        var: Var#14<$dist1>
        expr: Var#13
        result: Var#15
    Expr_BinaryOp_Mul
        left: Var#3<$x2>
        right: Var#3<$x2>
        result: Var#16
    Expr_BinaryOp_Mul
        left: Var#4<$y2>
        right: Var#4<$y2>
        result: Var#17
    Expr_BinaryOp_Plus
        left: Var#16
        right: Var#17
        result: Var#18
    Expr_FuncCall
        name: LITERAL('sqrt')
        args[0]: Var#18
        result: Var#19
    Expr_Assign
        var: Var#20<$dist2>
        expr: Var#19
        result: Var#21
    Expr_BinaryOp_Mul
        left: Var#14<$dist1>
        right: Var#20<$dist2>
        result: Var#22
    Expr_BinaryOp_Div
        left: Var#8<$dprod>
        right: Var#22
        result: Var#23
    Expr_FuncCall
        name: LITERAL('acos')
        args[0]: Var#23
        result: Var#24
    Expr_Assign
        var: Var#25<$angle>
        expr: Var#24
        result: Var#26
    Expr_FuncCall
        name: LITERAL('is_nan')
        args[0]: Var#25<$angle>
        result: Var#27
    Stmt_JumpIf
        cond: Var#27
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_ConstFetch
        name: LITERAL('M_PI')
        result: Var#28
    Expr_Assign
        var: Var#29<$angle>
        expr: Var#28
        result: Var#30
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Var#31<$x1> = Phi(Var#1<$x1>)
    Var#32<$y2> = Phi(Var#4<$y2>)
    Var#33<$x2> = Phi(Var#3<$x2>)
    Var#34<$y1> = Phi(Var#2<$y1>)
    Var#35<$angle> = Phi(Var#29<$angle>, Var#25<$angle>)
    Expr_BinaryOp_Mul
        left: Var#31<$x1>
        right: Var#32<$y2>
        result: Var#36
    Expr_BinaryOp_Mul
        left: Var#33<$x2>
        right: Var#34<$y1>
        result: Var#37
    Expr_BinaryOp_Minus
        left: Var#36
        right: Var#37
        result: Var#38
    Expr_BinaryOp_Smaller
        left: Var#38
        right: LITERAL(0)
        result: Var#39
    Stmt_JumpIf
        cond: Var#39
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Var#40<$angle> = Phi(Var#35<$angle>)
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#41
    Expr_BinaryOp_Mul
        left: Var#40<$angle>
        right: Var#41
        result: Var#42
    Expr_Assign
        var: Var#43<$angle>
        expr: Var#42
        result: Var#44
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#45<$angle> = Phi(Var#43<$angle>, Var#35<$angle>)
    Terminal_Return
        expr: Var#45<$angle>

Function TCPDF_STATIC::pregSplit(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('pattern')
        result: Var#1<$pattern>
    Expr_Param
        declaredType: mixed
        name: LITERAL('modifiers')
        result: Var#2<$modifiers>
    Expr_Param
        declaredType: mixed
        name: LITERAL('subject')
        result: Var#3<$subject>
    Expr_Param
        declaredType: mixed
        name: LITERAL('limit')
        defaultVar: Var#4
        result: Var#5<$limit>
        defaultBlock: Block#2
    Expr_Param
        declaredType: mixed
        name: LITERAL('flags')
        defaultVar: Var#6
        result: Var#7<$flags>
        defaultBlock: Block#3
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#2<$modifiers>
        args[1]: LITERAL('u')
        result: Var#8
    Expr_ConstFetch
        name: LITERAL('FALSE')
        result: Var#9
    Expr_BinaryOp_Identical
        left: Var#8
        right: Var#9
        result: Var#10
    Stmt_JumpIf
        cond: Var#10
        if: Block#4
        else: Block#5

Block#2
    Expr_ConstFetch
        name: LITERAL('NULL')
        result: Var#4

Block#3
    Expr_ConstFetch
        name: LITERAL('NULL')
        result: Var#6

Block#4
    Parent: Block#1
    Parent: Block#5
    Var#11 = Phi(LITERAL(true), Var#12)
    Var#13<$pattern> = Phi(Var#1<$pattern>)
    Var#14<$modifiers> = Phi(Var#2<$modifiers>)
    Var#15<$subject> = Phi(Var#3<$subject>)
    Var#16<$limit> = Phi(Var#5<$limit>)
    Var#17<$flags> = Phi(Var#7<$flags>)
    Stmt_JumpIf
        cond: Var#11
        if: Block#6
        else: Block#7

Block#5
    Parent: Block#1
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#18
    Expr_ConstFetch
        name: LITERAL('PREG_SPLIT_NO_EMPTY')
        result: Var#19
    Expr_FuncCall
        name: LITERAL('preg_split')
        args[0]: LITERAL('//u')
        args[1]: LITERAL('
        	')
        args[2]: Var#18
        args[3]: Var#19
        result: Var#20
    Expr_FuncCall
        name: LITERAL('count')
        args[0]: Var#20
        result: Var#21
    Expr_BinaryOp_Equal
        left: Var#21
        right: LITERAL(2)
        result: Var#22
    Expr_Cast_Bool
        expr: Var#22
        result: Var#12
    Stmt_Jump
        target: Block#4

Block#6
    Parent: Block#4
    Var#23<$pattern> = Phi(Var#13<$pattern>)
    Var#24<$modifiers> = Phi(Var#14<$modifiers>)
    Var#25<$subject> = Phi(Var#15<$subject>)
    Var#26<$limit> = Phi(Var#16<$limit>)
    Var#27<$flags> = Phi(Var#17<$flags>)
    Expr_BinaryOp_Concat
        left: Var#23<$pattern>
        right: Var#24<$modifiers>
        result: Var#28
    Expr_FuncCall
        name: LITERAL('preg_split')
        args[0]: Var#28
        args[1]: Var#25<$subject>
        args[2]: Var#26<$limit>
        args[3]: Var#27<$flags>
        result: Var#29
    Terminal_Return
        expr: Var#29

Block#7
    Parent: Block#4
    Stmt_Jump
        target: Block#8

Block#8
    Parent: Block#7
    Var#30<$subject> = Phi(Var#15<$subject>)
    Var#31<$pattern> = Phi(Var#13<$pattern>)
    Var#32<$modifiers> = Phi(Var#14<$modifiers>)
    Var#33<$limit> = Phi(Var#16<$limit>)
    Var#34<$flags> = Phi(Var#17<$flags>)
    Expr_Array
        result: Var#35
    Expr_Assign
        var: Var#36<$ret>
        expr: Var#35
        result: Var#37
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#8
    Parent: Block#12
    Var#38<$subject> = Phi(Var#30<$subject>, Var#39<$subject>)
    Var#40<$ret> = Phi(Var#36<$ret>, Var#41<$ret>)
    Var#42<$pattern> = Phi(Var#31<$pattern>, Var#43<$pattern>)
    Var#44<$modifiers> = Phi(Var#32<$modifiers>, Var#45<$modifiers>)
    Var#46<$limit> = Phi(Var#33<$limit>, Var#47<$limit>)
    Var#48<$flags> = Phi(Var#34<$flags>, Var#49<$flags>)
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#38<$subject>
        args[1]: LITERAL('
        ')
        result: Var#50
    Expr_Assign
        var: Var#51<$nl>
        expr: Var#50
        result: Var#52
    Expr_ConstFetch
        name: LITERAL('FALSE')
        result: Var#53
    Expr_BinaryOp_NotIdentical
        left: Var#52
        right: Var#53
        result: Var#54
    Stmt_JumpIf
        cond: Var#54
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Var#55<$ret> = Phi(Var#40<$ret>)
    Var#43<$pattern> = Phi(Var#42<$pattern>)
    Var#45<$modifiers> = Phi(Var#44<$modifiers>)
    Var#56<$subject> = Phi(Var#38<$subject>)
    Var#57<$nl> = Phi(Var#51<$nl>)
    Var#47<$limit> = Phi(Var#46<$limit>)
    Var#49<$flags> = Phi(Var#48<$flags>)
    Expr_BinaryOp_Concat
        left: Var#43<$pattern>
        right: Var#45<$modifiers>
        result: Var#58
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#56<$subject>
        args[1]: LITERAL(0)
        args[2]: Var#57<$nl>
        result: Var#59
    Expr_FuncCall
        name: LITERAL('preg_split')
        args[0]: Var#58
        args[1]: Var#59
        args[2]: Var#47<$limit>
        args[3]: Var#49<$flags>
        result: Var#60
    Expr_FuncCall
        name: LITERAL('array_merge')
        args[0]: Var#55<$ret>
        args[1]: Var#60
        result: Var#61
    Expr_Assign
        var: Var#41<$ret>
        expr: Var#61
        result: Var#62
    Expr_ArrayDimFetch
        var: Var#41<$ret>
        dim: NULL
        result: Var#63
    Expr_Assign
        var: Var#63
        expr: LITERAL('
        ')
        result: Var#64
    Expr_BinaryOp_Plus
        left: Var#57<$nl>
        right: LITERAL(1)
        result: Var#65
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#56<$subject>
        args[1]: Var#65
        result: Var#66
    Expr_Assign
        var: Var#39<$subject>
        expr: Var#66
        result: Var#67
    Stmt_Jump
        target: Block#12

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#13

Block#12
    Parent: Block#10
    Stmt_Jump
        target: Block#9

Block#13
    Parent: Block#11
    Var#68<$subject> = Phi(Var#38<$subject>)
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#68<$subject>
        result: Var#69
    Expr_BinaryOp_Greater
        left: Var#69
        right: LITERAL(0)
        result: Var#70
    Stmt_JumpIf
        cond: Var#70
        if: Block#14
        else: Block#15

Block#14
    Parent: Block#13
    Var#71<$ret> = Phi(Var#40<$ret>)
    Var#72<$pattern> = Phi(Var#42<$pattern>)
    Var#73<$modifiers> = Phi(Var#44<$modifiers>)
    Var#74<$subject> = Phi(Var#68<$subject>)
    Var#75<$limit> = Phi(Var#46<$limit>)
    Var#76<$flags> = Phi(Var#48<$flags>)
    Expr_BinaryOp_Concat
        left: Var#72<$pattern>
        right: Var#73<$modifiers>
        result: Var#77
    Expr_FuncCall
        name: LITERAL('preg_split')
        args[0]: Var#77
        args[1]: Var#74<$subject>
        args[2]: Var#75<$limit>
        args[3]: Var#76<$flags>
        result: Var#78
    Expr_FuncCall
        name: LITERAL('array_merge')
        args[0]: Var#71<$ret>
        args[1]: Var#78
        result: Var#79
    Expr_Assign
        var: Var#80<$ret>
        expr: Var#79
        result: Var#81
    Stmt_Jump
        target: Block#16

Block#15
    Parent: Block#13
    Stmt_Jump
        target: Block#16

Block#16
    Parent: Block#14
    Parent: Block#15
    Var#82<$ret> = Phi(Var#80<$ret>, Var#40<$ret>)
    Terminal_Return
        expr: Var#82<$ret>

Function TCPDF_STATIC::fileGetContents(): mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('file')
        result: Var#1<$file>
    Var#2<$_SERVER> = Phi()
    Var#3<$match> = Phi()
    Var#4<$ret> = Phi()
    Expr_Array
        keys[0]: NULL
        values[0]: Var#1<$file>
        result: Var#5
    Expr_Assign
        var: Var#6<$alt>
        expr: Var#5
        result: Var#7
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#1<$file>
        result: Var#8
    Expr_BinaryOp_Greater
        left: Var#8
        right: LITERAL(1)
        result: Var#9
    Stmt_JumpIf
        cond: Var#9
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Var#10<$file> = Phi(Var#1<$file>)
    Expr_ArrayDimFetch
        var: Var#10<$file>
        dim: LITERAL(0)
        result: Var#11
    Expr_BinaryOp_Equal
        left: Var#11
        right: LITERAL('/')
        result: Var#12
    Expr_Cast_Bool
        expr: Var#12
        result: Var#13
    Stmt_Jump
        target: Block#3

Block#3
    Parent: Block#1
    Parent: Block#2
    Var#14 = Phi(LITERAL(false), Var#13)
    Var#15<$file> = Phi(Var#1<$file>, Var#10<$file>)
    Var#16<$_SERVER> = Phi(Var#2<$_SERVER>)
    Var#17<$alt> = Phi(Var#6<$alt>)
    Var#18<$match> = Phi(Var#3<$match>)
    Var#19<$ret> = Phi(Var#4<$ret>)
    Stmt_JumpIf
        cond: Var#14
        if: Block#4
        else: Block#5

Block#4
    Parent: Block#3
    Var#20<$file> = Phi(Var#15<$file>)
    Expr_ArrayDimFetch
        var: Var#20<$file>
        dim: LITERAL(1)
        result: Var#21
    Expr_BinaryOp_NotEqual
        left: Var#21
        right: LITERAL('/')
        result: Var#22
    Expr_Cast_Bool
        expr: Var#22
        result: Var#23
    Stmt_Jump
        target: Block#5

Block#5
    Parent: Block#3
    Parent: Block#4
    Var#24 = Phi(LITERAL(false), Var#23)
    Var#25<$_SERVER> = Phi(Var#16<$_SERVER>)
    Var#26<$file> = Phi(Var#15<$file>, Var#20<$file>)
    Var#27<$alt> = Phi(Var#17<$alt>)
    Var#28<$match> = Phi(Var#18<$match>)
    Var#29<$ret> = Phi(Var#19<$ret>)
    Stmt_JumpIf
        cond: Var#24
        if: Block#6
        else: Block#7

Block#6
    Parent: Block#5
    Var#30<$_SERVER> = Phi(Var#25<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#30<$_SERVER>
        dim: LITERAL('DOCUMENT_ROOT')
        result: Var#31
    Expr_Empty
        expr: Var#31
        result: Var#32
    Expr_BooleanNot
        expr: Var#32
        result: Var#33
    Expr_Cast_Bool
        expr: Var#33
        result: Var#34
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Var#35 = Phi(LITERAL(false), Var#34)
    Var#36<$_SERVER> = Phi(Var#25<$_SERVER>, Var#30<$_SERVER>)
    Var#37<$file> = Phi(Var#26<$file>)
    Var#38<$alt> = Phi(Var#27<$alt>)
    Var#39<$match> = Phi(Var#28<$match>)
    Var#40<$ret> = Phi(Var#29<$ret>)
    Stmt_JumpIf
        cond: Var#35
        if: Block#8
        else: Block#9

Block#8
    Parent: Block#7
    Var#41<$_SERVER> = Phi(Var#36<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#41<$_SERVER>
        dim: LITERAL('DOCUMENT_ROOT')
        result: Var#42
    Expr_BinaryOp_NotEqual
        left: Var#42
        right: LITERAL('/')
        result: Var#43
    Expr_Cast_Bool
        expr: Var#43
        result: Var#44
    Stmt_Jump
        target: Block#9

Block#9
    Parent: Block#7
    Parent: Block#8
    Var#45 = Phi(LITERAL(false), Var#44)
    Var#46<$file> = Phi(Var#37<$file>)
    Var#47<$_SERVER> = Phi(Var#36<$_SERVER>, Var#41<$_SERVER>)
    Var#48<$alt> = Phi(Var#38<$alt>)
    Var#49<$match> = Phi(Var#39<$match>)
    Var#50<$ret> = Phi(Var#40<$ret>)
    Stmt_JumpIf
        cond: Var#45
        if: Block#10
        else: Block#11

Block#10
    Parent: Block#9
    Var#51<$file> = Phi(Var#46<$file>)
    Var#52<$_SERVER> = Phi(Var#47<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#52<$_SERVER>
        dim: LITERAL('DOCUMENT_ROOT')
        result: Var#53
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#51<$file>
        args[1]: Var#53
        result: Var#54
    Expr_Assign
        var: Var#55<$findroot>
        expr: Var#54
        result: Var#56
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#57
    Expr_BinaryOp_Identical
        left: Var#55<$findroot>
        right: Var#57
        result: Var#58
    Stmt_JumpIf
        cond: Var#58
        if: Block#12
        else: Block#13

Block#11
    Parent: Block#9
    Stmt_Jump
        target: Block#14

Block#12
    Parent: Block#10
    Parent: Block#13
    Var#59 = Phi(LITERAL(true), Var#60)
    Var#61<$_SERVER> = Phi(Var#52<$_SERVER>)
    Var#62<$file> = Phi(Var#51<$file>)
    Var#63<$alt> = Phi(Var#48<$alt>)
    Var#64<$match> = Phi(Var#49<$match>)
    Var#65<$ret> = Phi(Var#50<$ret>)
    Stmt_JumpIf
        cond: Var#59
        if: Block#15
        else: Block#16

Block#13
    Parent: Block#10
    Var#66<$findroot> = Phi(Var#55<$findroot>)
    Expr_BinaryOp_Greater
        left: Var#66<$findroot>
        right: LITERAL(1)
        result: Var#67
    Expr_Cast_Bool
        expr: Var#67
        result: Var#60
    Stmt_Jump
        target: Block#12

Block#14
    Parent: Block#21
    Parent: Block#11
    Var#68<$file> = Phi(Var#69<$file>, Var#46<$file>)
    Var#70<$match> = Phi(Var#71<$match>, Var#49<$match>)
    Var#72<$alt> = Phi(Var#73<$alt>, Var#48<$alt>)
    Var#74<$_SERVER> = Phi(Var#75<$_SERVER>, Var#47<$_SERVER>)
    Var#76<$ret> = Phi(Var#77<$ret>, Var#50<$ret>)
    Expr_Assign
        var: Var#78<$url>
        expr: Var#68<$file>
        result: Var#79
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('%^/{2}%')
        args[1]: Var#78<$url>
        result: Var#80
    Stmt_JumpIf
        cond: Var#80
        if: Block#17
        else: Block#18

Block#15
    Parent: Block#12
    Var#81<$_SERVER> = Phi(Var#61<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#81<$_SERVER>
        dim: LITERAL('DOCUMENT_ROOT')
        result: Var#82
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#83
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#82
        args[1]: Var#83
        result: Var#84
    Expr_BinaryOp_Equal
        left: Var#84
        right: LITERAL('/')
        result: Var#85
    Stmt_JumpIf
        cond: Var#85
        if: Block#19
        else: Block#20

Block#16
    Parent: Block#12
    Stmt_Jump
        target: Block#21

Block#17
    Parent: Block#14
    Var#86<$match> = Phi(Var#70<$match>)
    Expr_ConstFetch
        name: LITERAL('K_PATH_URL')
        result: Var#87
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('%^([^:]+:)//%i')
        args[1]: Var#87
        args[2]: Var#86<$match>
        result: Var#88
    Stmt_JumpIf
        cond: Var#88
        if: Block#22
        else: Block#23

Block#18
    Parent: Block#14
    Stmt_Jump
        target: Block#24

Block#19
    Parent: Block#15
    Var#89<$_SERVER> = Phi(Var#81<$_SERVER>)
    Var#90<$file> = Phi(Var#62<$file>)
    Expr_ArrayDimFetch
        var: Var#89<$_SERVER>
        dim: LITERAL('DOCUMENT_ROOT')
        result: Var#91
    Expr_UnaryMinus
        expr: LITERAL(1)
        result: Var#92
    Expr_FuncCall
        name: LITERAL('substr')
        args[0]: Var#91
        args[1]: LITERAL(0)
        args[2]: Var#92
        result: Var#93
    Expr_BinaryOp_Concat
        left: Var#93
        right: Var#90<$file>
        result: Var#94
    Expr_Assign
        var: Var#95<$tmp>
        expr: Var#94
        result: Var#96
    Stmt_Jump
        target: Block#25

Block#20
    Parent: Block#15
    Var#97<$_SERVER> = Phi(Var#81<$_SERVER>)
    Var#98<$file> = Phi(Var#62<$file>)
    Expr_ArrayDimFetch
        var: Var#97<$_SERVER>
        dim: LITERAL('DOCUMENT_ROOT')
        result: Var#99
    Expr_BinaryOp_Concat
        left: Var#99
        right: Var#98<$file>
        result: Var#100
    Expr_Assign
        var: Var#101<$tmp>
        expr: Var#100
        result: Var#102
    Stmt_Jump
        target: Block#25

Block#21
    Parent: Block#25
    Parent: Block#16
    Var#69<$file> = Phi(Var#103<$file>, Var#62<$file>)
    Var#71<$match> = Phi(Var#104<$match>, Var#64<$match>)
    Var#73<$alt> = Phi(Var#105<$alt>, Var#63<$alt>)
    Var#75<$_SERVER> = Phi(Var#106<$_SERVER>, Var#61<$_SERVER>)
    Var#77<$ret> = Phi(Var#107<$ret>, Var#65<$ret>)
    Stmt_Jump
        target: Block#14

Block#22
    Parent: Block#17
    Var#108<$match> = Phi(Var#86<$match>)
    Var#109<$url> = Phi(Var#78<$url>)
    Var#110<$alt> = Phi(Var#72<$alt>)
    Expr_ArrayDimFetch
        var: Var#108<$match>
        dim: LITERAL(1)
        result: Var#111
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: LITERAL(' ')
        args[1]: LITERAL('%20')
        args[2]: Var#109<$url>
        result: Var#112
    Expr_BinaryOp_Concat
        left: Var#111
        right: Var#112
        result: Var#113
    Expr_Assign
        var: Var#114<$url>
        expr: Var#113
        result: Var#115
    Expr_ArrayDimFetch
        var: Var#110<$alt>
        dim: NULL
        result: Var#116
    Expr_Assign
        var: Var#116
        expr: Var#114<$url>
        result: Var#117
    Stmt_Jump
        target: Block#26

Block#23
    Parent: Block#17
    Stmt_Jump
        target: Block#26

Block#24
    Parent: Block#26
    Parent: Block#18
    Var#118<$url> = Phi(Var#119<$url>, Var#78<$url>)
    Var#120<$alt> = Phi(Var#121<$alt>, Var#72<$alt>)
    Var#122<$_SERVER> = Phi(Var#123<$_SERVER>, Var#74<$_SERVER>)
    Var#124<$file> = Phi(Var#125<$file>, Var#68<$file>)
    Var#126<$ret> = Phi(Var#127<$ret>, Var#76<$ret>)
    Stmt_Jump
        target: Block#27

Block#25
    Parent: Block#19
    Parent: Block#20
    Var#128<$tmp> = Phi(Var#95<$tmp>, Var#101<$tmp>)
    Var#105<$alt> = Phi(Var#63<$alt>)
    Var#103<$file> = Phi(Var#90<$file>, Var#98<$file>)
    Var#104<$match> = Phi(Var#64<$match>)
    Var#106<$_SERVER> = Phi(Var#89<$_SERVER>, Var#97<$_SERVER>)
    Var#107<$ret> = Phi(Var#65<$ret>)
    Expr_FuncCall
        name: LITERAL('urldecode')
        args[0]: Var#128<$tmp>
        result: Var#129
    Expr_FuncCall
        name: LITERAL('htmlspecialchars_decode')
        args[0]: Var#129
        result: Var#130
    Expr_ArrayDimFetch
        var: Var#105<$alt>
        dim: NULL
        result: Var#131
    Expr_Assign
        var: Var#131
        expr: Var#130
        result: Var#132
    Stmt_Jump
        target: Block#21

Block#26
    Parent: Block#22
    Parent: Block#23
    Var#119<$url> = Phi(Var#114<$url>, Var#78<$url>)
    Var#121<$alt> = Phi(Var#110<$alt>, Var#72<$alt>)
    Var#123<$_SERVER> = Phi(Var#74<$_SERVER>)
    Var#125<$file> = Phi(Var#68<$file>)
    Var#127<$ret> = Phi(Var#76<$ret>)
    Stmt_Jump
        target: Block#24

Block#27
    Parent: Block#24
    Var#133<$url> = Phi(Var#118<$url>)
    Expr_FuncCall
        name: LITERAL('parse_url')
        args[0]: Var#133<$url>
        result: Var#134
    Stmt_Jump
        target: Block#28

Block#28
    Parent: Block#27
    Expr_Assign
        var: Var#135<$urldata>
        expr: Var#134
        result: Var#136
    Expr_ArrayDimFetch
        var: Var#135<$urldata>
        dim: LITERAL('query')
        result: Var#137
    Expr_Isset
        vars[0]: Var#137
        result: Var#138
    Expr_BooleanNot
        expr: Var#138
        result: Var#139
    Stmt_JumpIf
        cond: Var#139
        if: Block#29
        else: Block#30

Block#29
    Parent: Block#28
    Parent: Block#30
    Var#140 = Phi(LITERAL(true), Var#141)
    Var#142<$url> = Phi(Var#133<$url>)
    Var#143<$alt> = Phi(Var#120<$alt>)
    Var#144<$_SERVER> = Phi(Var#122<$_SERVER>)
    Var#145<$file> = Phi(Var#124<$file>)
    Var#146<$ret> = Phi(Var#126<$ret>)
    Stmt_JumpIf
        cond: Var#140
        if: Block#31
        else: Block#32

Block#30
    Parent: Block#28
    Var#147<$urldata> = Phi(Var#135<$urldata>)
    Expr_ArrayDimFetch
        var: Var#147<$urldata>
        dim: LITERAL('query')
        result: Var#148
    Expr_FuncCall
        name: LITERAL('strlen')
        args[0]: Var#148
        result: Var#149
    Expr_BinaryOp_SmallerOrEqual
        left: Var#149
        right: LITERAL(0)
        result: Var#150
    Expr_Cast_Bool
        expr: Var#150
        result: Var#141
    Stmt_Jump
        target: Block#29

Block#31
    Parent: Block#29
    Var#151<$url> = Phi(Var#142<$url>)
    Expr_ConstFetch
        name: LITERAL('K_PATH_URL')
        result: Var#152
    Expr_FuncCall
        name: LITERAL('strpos')
        args[0]: Var#151<$url>
        args[1]: Var#152
        result: Var#153
    Expr_BinaryOp_Identical
        left: Var#153
        right: LITERAL(0)
        result: Var#154
    Stmt_JumpIf
        cond: Var#154
        if: Block#33
        else: Block#34

Block#32
    Parent: Block#29
    Stmt_Jump
        target: Block#35

Block#33
    Parent: Block#31
    Var#155<$url> = Phi(Var#151<$url>)
    Var#156<$alt> = Phi(Var#143<$alt>)
    Expr_ConstFetch
        name: LITERAL('K_PATH_URL')
        result: Var#157
    Expr_ConstFetch
        name: LITERAL('K_PATH_MAIN')
        result: Var#158
    Expr_FuncCall
        name: LITERAL('str_replace')
        args[0]: Var#157
        args[1]: Var#158
        args[2]: Var#155<$url>
        result: Var#159
    Expr_Assign
        var: Var#160<$tmp>
        expr: Var#159
        result: Var#161
    Expr_FuncCall
        name: LITERAL('urldecode')
        args[0]: Var#160<$tmp>
        result: Var#162
    Expr_FuncCall
        name: LITERAL('htmlspecialchars_decode')
        args[0]: Var#162
        result: Var#163
    Expr_Assign
        var: Var#164<$tmp>
        expr: Var#163
        result: Var#165
    Expr_ArrayDimFetch
        var: Var#156<$alt>
        dim: NULL
        result: Var#166
    Expr_Assign
        var: Var#166
        expr: Var#164<$tmp>
        result: Var#167
    Stmt_Jump
        target: Block#36

Block#34
    Parent: Block#31
    Stmt_Jump
        target: Block#36

Block#35
    Parent: Block#36
    Parent: Block#32
    Var#168<$_SERVER> = Phi(Var#169<$_SERVER>, Var#144<$_SERVER>)
    Var#170<$file> = Phi(Var#171<$file>, Var#145<$file>)
    Var#172<$alt> = Phi(Var#173<$alt>, Var#143<$alt>)
    Var#174<$ret> = Phi(Var#175<$ret>, Var#146<$ret>)
    Expr_ArrayDimFetch
        var: Var#168<$_SERVER>
        dim: LITERAL('SCRIPT_URI')
        result: Var#176
    Expr_Isset
        vars[0]: Var#176
        result: Var#177
    Stmt_JumpIf
        cond: Var#177
        if: Block#37
        else: Block#38

Block#36
    Parent: Block#33
    Parent: Block#34
    Var#169<$_SERVER> = Phi(Var#144<$_SERVER>)
    Var#171<$file> = Phi(Var#145<$file>)
    Var#173<$alt> = Phi(Var#156<$alt>, Var#143<$alt>)
    Var#175<$ret> = Phi(Var#146<$ret>)
    Stmt_Jump
        target: Block#35

Block#37
    Parent: Block#35
    Stmt_Jump
        target: Block#39

Block#38
    Parent: Block#35
    Stmt_Jump
        target: Block#40

Block#39
    Parent: Block#37
    Var#178<$_SERVER> = Phi(Var#168<$_SERVER>)
    Expr_ArrayDimFetch
        var: Var#178<$_SERVER>
        dim: LITERAL('SCRIPT_URI')
        result: Var#179
    Expr_FuncCall
        name: LITERAL('parse_url')
        args[0]: Var#179
        result: Var#180
    Stmt_Jump
        target: Block#41

Block#40
    Parent: Block#47
    Parent: Block#38
    Var#181<$alt> = Phi(Var#182<$alt>, Var#172<$alt>)
    Var#183<$ret> = Phi(Var#184<$ret>, Var#174<$ret>)
    Iterator_Reset
        var: Var#181<$alt>
    Stmt_Jump
        target: Block#42

Block#41
    Parent: Block#39
    Var#185<$file> = Phi(Var#170<$file>)
    Expr_Assign
        var: Var#186<$urldata>
        expr: Var#180
        result: Var#187
    Expr_ArrayDimFetch
        var: Var#186<$urldata>
        dim: LITERAL('scheme')
        result: Var#188
    Expr_BinaryOp_Concat
        left: Var#188
        right: LITERAL('://')
        result: Var#189
    Expr_ArrayDimFetch
        var: Var#186<$urldata>
        dim: LITERAL('host')
        result: Var#190
    Expr_BinaryOp_Concat
        left: Var#189
        right: Var#190
        result: Var#191
    Expr_ArrayDimFetch
        var: Var#185<$file>
        dim: LITERAL(0)
        result: Var#192
    Expr_BinaryOp_Equal
        left: Var#192
        right: LITERAL('/')
        result: Var#193
    Stmt_JumpIf
        cond: Var#193
        if: Block#43
        else: Block#44

Block#42
    Parent: Block#40
    Parent: Block#68
    Var#194<$ret> = Phi(Var#183<$ret>, Var#195<$ret>)
    Iterator_Valid
        var: Var#181<$alt>
        result: Var#196
    Stmt_JumpIf
        cond: Var#196
        if: Block#45
        else: Block#46

Block#43
    Parent: Block#41
    Expr_Assign
        var: Var#197
        expr: LITERAL('')
        result: Var#198
    Stmt_Jump
        target: Block#47

Block#44
    Parent: Block#41
    Expr_Assign
        var: Var#199
        expr: LITERAL('/')
        result: Var#200
    Stmt_Jump
        target: Block#47

Block#45
    Parent: Block#42
    Iterator_Value
        var: Var#181<$alt>
        result: Var#201
    Expr_Assign
        var: Var#202<$f>
        expr: Var#201
        result: Var#203
    Stmt_Jump
        target: Block#48

Block#46
    Parent: Block#42
    Stmt_Jump
        target: Block#49

Block#47
    Parent: Block#43
    Parent: Block#44
    Var#204 = Phi(Var#197, Var#199)
    Var#205<$file> = Phi(Var#185<$file>)
    Var#182<$alt> = Phi(Var#172<$alt>)
    Var#184<$ret> = Phi(Var#174<$ret>)
    Expr_BinaryOp_Concat
        left: Var#191
        right: Var#204
        result: Var#206
    Expr_BinaryOp_Concat
        left: Var#206
        right: Var#205<$file>
        result: Var#207
    Expr_ArrayDimFetch
        var: Var#182<$alt>
        dim: NULL
        result: Var#208
    Expr_Assign
        var: Var#208
        expr: Var#207
        result: Var#209
    Stmt_Jump
        target: Block#40

Block#48
    Parent: Block#45
    Var#210<$f> = Phi(Var#202<$f>)
    Expr_FuncCall
        name: LITERAL('file_get_contents')
        args[0]: Var#210<$f>
        result: Var#211
    Stmt_Jump
        target: Block#50

Block#49
    Parent: Block#46
    Parent: Block#64
    Var#212<$ret> = Phi(Var#194<$ret>, Var#213<$ret>)
    Terminal_Return
        expr: Var#212<$ret>

Block#50
    Parent: Block#48
    Expr_Assign
        var: Var#214<$ret>
        expr: Var#211
        result: Var#215
    Expr_ConstFetch
        name: LITERAL('FALSE')
        result: Var#216
    Expr_BinaryOp_Identical
        left: Var#214<$ret>
        right: Var#216
        result: Var#217
    Stmt_JumpIf
        cond: Var#217
        if: Block#51
        else: Block#52

Block#51
    Parent: Block#50
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('allow_url_fopen')
        result: Var#218
    Expr_BooleanNot
        expr: Var#218
        result: Var#219
    Expr_Cast_Bool
        expr: Var#219
        result: Var#220
    Stmt_Jump
        target: Block#52

Block#52
    Parent: Block#50
    Parent: Block#51
    Var#221 = Phi(LITERAL(false), Var#220)
    Var#222<$f> = Phi(Var#210<$f>)
    Var#223<$ret> = Phi(Var#214<$ret>)
    Stmt_JumpIf
        cond: Var#221
        if: Block#53
        else: Block#54

Block#53
    Parent: Block#52
    Expr_FuncCall
        name: LITERAL('function_exists')
        args[0]: LITERAL('curl_init')
        result: Var#224
    Expr_Cast_Bool
        expr: Var#224
        result: Var#225
    Stmt_Jump
        target: Block#54

Block#54
    Parent: Block#52
    Parent: Block#53
    Var#226 = Phi(LITERAL(false), Var#225)
    Var#227<$f> = Phi(Var#222<$f>)
    Var#228<$ret> = Phi(Var#223<$ret>)
    Stmt_JumpIf
        cond: Var#226
        if: Block#55
        else: Block#56

Block#55
    Parent: Block#54
    Var#229<$f> = Phi(Var#227<$f>)
    Expr_FuncCall
        name: LITERAL('preg_match')
        args[0]: LITERAL('%^(https?|ftp)://%')
        args[1]: Var#229<$f>
        result: Var#230
    Expr_Cast_Bool
        expr: Var#230
        result: Var#231
    Stmt_Jump
        target: Block#56

Block#56
    Parent: Block#54
    Parent: Block#55
    Var#232 = Phi(LITERAL(false), Var#231)
    Var#233<$f> = Phi(Var#227<$f>, Var#229<$f>)
    Var#234<$ret> = Phi(Var#228<$ret>)
    Stmt_JumpIf
        cond: Var#232
        if: Block#57
        else: Block#58

Block#57
    Parent: Block#56
    Var#235<$f> = Phi(Var#233<$f>)
    Expr_FuncCall
        name: LITERAL('curl_init')
        result: Var#236
    Expr_Assign
        var: Var#237<$cs>
        expr: Var#236
        result: Var#238
    Expr_ConstFetch
        name: LITERAL('CURLOPT_URL')
        result: Var#239
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#237<$cs>
        args[1]: Var#239
        args[2]: Var#235<$f>
        result: Var#240
    Expr_ConstFetch
        name: LITERAL('CURLOPT_BINARYTRANSFER')
        result: Var#241
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#242
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#237<$cs>
        args[1]: Var#241
        args[2]: Var#242
        result: Var#243
    Expr_ConstFetch
        name: LITERAL('CURLOPT_FAILONERROR')
        result: Var#244
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#245
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#237<$cs>
        args[1]: Var#244
        args[2]: Var#245
        result: Var#246
    Expr_ConstFetch
        name: LITERAL('CURLOPT_RETURNTRANSFER')
        result: Var#247
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#248
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#237<$cs>
        args[1]: Var#247
        args[2]: Var#248
        result: Var#249
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('open_basedir')
        result: Var#250
    Expr_BinaryOp_Equal
        left: Var#250
        right: LITERAL('')
        result: Var#251
    Stmt_JumpIf
        cond: Var#251
        if: Block#59
        else: Block#60

Block#58
    Parent: Block#56
    Stmt_Jump
        target: Block#61

Block#59
    Parent: Block#57
    Expr_FuncCall
        name: LITERAL('ini_get')
        args[0]: LITERAL('safe_mode')
        result: Var#252
    Expr_BooleanNot
        expr: Var#252
        result: Var#253
    Expr_Cast_Bool
        expr: Var#253
        result: Var#254
    Stmt_Jump
        target: Block#60

Block#60
    Parent: Block#57
    Parent: Block#59
    Var#255 = Phi(LITERAL(false), Var#254)
    Var#256<$cs> = Phi(Var#237<$cs>)
    Stmt_JumpIf
        cond: Var#255
        if: Block#62
        else: Block#63

Block#61
    Parent: Block#66
    Parent: Block#58
    Var#213<$ret> = Phi(Var#257<$ret>, Var#234<$ret>)
    Expr_ConstFetch
        name: LITERAL('FALSE')
        result: Var#258
    Expr_BinaryOp_NotIdentical
        left: Var#213<$ret>
        right: Var#258
        result: Var#259
    Stmt_JumpIf
        cond: Var#259
        if: Block#64
        else: Block#65

Block#62
    Parent: Block#60
    Var#260<$cs> = Phi(Var#256<$cs>)
    Expr_ConstFetch
        name: LITERAL('CURLOPT_FOLLOWLOCATION')
        result: Var#261
    Expr_ConstFetch
        name: LITERAL('true')
        result: Var#262
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#260<$cs>
        args[1]: Var#261
        args[2]: Var#262
        result: Var#263
    Stmt_Jump
        target: Block#66

Block#63
    Parent: Block#60
    Stmt_Jump
        target: Block#66

Block#64
    Parent: Block#61
    Stmt_Jump
        target: Block#49

Block#65
    Parent: Block#61
    Stmt_Jump
        target: Block#67

Block#66
    Parent: Block#62
    Parent: Block#63
    Var#264<$cs> = Phi(Var#260<$cs>, Var#256<$cs>)
    Expr_ConstFetch
        name: LITERAL('CURLOPT_CONNECTTIMEOUT')
        result: Var#265
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#264<$cs>
        args[1]: Var#265
        args[2]: LITERAL(5)
        result: Var#266
    Expr_ConstFetch
        name: LITERAL('CURLOPT_TIMEOUT')
        result: Var#267
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#264<$cs>
        args[1]: Var#267
        args[2]: LITERAL(30)
        result: Var#268
    Expr_ConstFetch
        name: LITERAL('CURLOPT_SSL_VERIFYPEER')
        result: Var#269
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#270
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#264<$cs>
        args[1]: Var#269
        args[2]: Var#270
        result: Var#271
    Expr_ConstFetch
        name: LITERAL('CURLOPT_SSL_VERIFYHOST')
        result: Var#272
    Expr_ConstFetch
        name: LITERAL('false')
        result: Var#273
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#264<$cs>
        args[1]: Var#272
        args[2]: Var#273
        result: Var#274
    Expr_ConstFetch
        name: LITERAL('CURLOPT_USERAGENT')
        result: Var#275
    Expr_FuncCall
        name: LITERAL('curl_setopt')
        args[0]: Var#264<$cs>
        args[1]: Var#275
        args[2]: LITERAL('TCPDF')
        result: Var#276
    Expr_FuncCall
        name: LITERAL('curl_exec')
        args[0]: Var#264<$cs>
        result: Var#277
    Expr_Assign
        var: Var#257<$ret>
        expr: Var#277
        result: Var#278
    Expr_FuncCall
        name: LITERAL('curl_close')
        args[0]: Var#264<$cs>
        result: Var#279
    Stmt_Jump
        target: Block#61

Block#67
    Parent: Block#65
    Var#195<$ret> = Phi(Var#213<$ret>)
    Stmt_Jump
        target: Block#68

Block#68
    Parent: Block#67
    Stmt_Jump
        target: Block#42
